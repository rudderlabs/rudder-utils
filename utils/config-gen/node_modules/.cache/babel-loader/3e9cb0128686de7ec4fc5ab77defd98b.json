{"ast":null,"code":"var _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/iconCardList/index.tsx\";\nimport { Flex } from '@components/common/misc';\nimport IconCard from '@components/iconCard';\nimport * as React from 'react';\nexport default class IconCardList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickHandle = icon => {\n      const {\n        selectionMode\n      } = this.props;\n\n      if (selectionMode === 'single') {\n        this.onClickIconSingleMode(icon.id);\n      } else if (selectionMode === 'multi') {\n        this.onClickIconMultiMode(icon.id);\n      } else if (icon.onClick) {\n        icon.onClick();\n      }\n    };\n\n    this.onClickIconSingleMode = iconId => {\n      this.setState(prevState => ({\n        selectedMap: {\n          [iconId]: !prevState.selectedMap[iconId]\n        }\n      }), this.onSelctionChange);\n    };\n\n    this.onClickIconMultiMode = iconId => {\n      const {\n        selectedMap\n      } = this.state;\n\n      if (selectedMap[iconId]) {\n        this.setState({\n          selectedMap: { ...selectedMap,\n            [iconId]: false\n          }\n        }, this.onSelctionChange);\n      } else {\n        this.setState({\n          selectedMap: { ...selectedMap,\n            [iconId]: true\n          }\n        }, this.onSelctionChange);\n      }\n    };\n\n    this.onSelctionChange = () => {\n      if (this.props.onSelectionChange) {\n        this.props.onSelectionChange(this.state.selectedMap);\n      }\n    };\n\n    let initState = {};\n    const idObj = this.props.icons.map((icon, index) => {\n      if (icon.selected === true) {\n        initState = {\n          [icon.id]: true\n        };\n      }\n    });\n    props.onSelectionChange(initState);\n    this.state = {\n      selectedMap: initState\n    };\n  }\n\n  render() {\n    const {\n      icons,\n      type,\n      selectionMode,\n      destinationDefConfig\n    } = this.props;\n    const {\n      selectedMap\n    } = this.state;\n    return icons.length > 0 ? React.createElement(Flex, {\n      wrap: true.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, icons.map((icon, index) => {\n      let selected = false;\n      selected = selectedMap[icon.id];\n      return React.createElement(IconCard, {\n        key: icon.title,\n        name: icon.type,\n        title: icon.title,\n        type: type,\n        selected: selected,\n        selectionMode: selectionMode,\n        onClick: () => this.onClickHandle(icon),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    })) : React.createElement(Flex, {\n      wrap: true.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Please add a compatible \", type, \" before making this connection!\"), destinationDefConfig ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Following are the supported types:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, destinationDefConfig.map(config => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, config));\n    }))) : ''));\n  }\n\n}","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/iconCardList/index.tsx"],"names":["Flex","IconCard","React","IconCardList","Component","constructor","props","onClickHandle","icon","selectionMode","onClickIconSingleMode","id","onClickIconMultiMode","onClick","iconId","setState","prevState","selectedMap","onSelctionChange","state","onSelectionChange","initState","idObj","icons","map","index","selected","render","type","destinationDefConfig","length","toString","title","config"],"mappings":"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","sourcesContent":["import { Flex } from '@components/common/misc';\nimport IconCard from '@components/iconCard';\nimport * as React from 'react';\n\nexport interface IIcon {\n  type: string;\n  title: any;\n  onClick?: () => void;\n  id: string;\n  selected?: boolean;\n}\n\nexport interface IIconCardListProps {\n  icons: IIcon[];\n  type: string;\n  selectionMode: 'none' | 'single' | 'multi';\n  destinationDefConfig?: string[];\n  onSelectionChange?: (selectedMap: any) => any;\n}\n\nexport interface IIconCardListState {\n  selectedMap: any;\n}\n\nexport default class IconCardList extends React.Component<\n  IIconCardListProps,\n  IIconCardListState\n> {\n  constructor(props: IIconCardListProps) {\n    super(props);\n\n    let initState = {};\n    const idObj = this.props.icons.map((icon: IIcon, index: number) => {\n      if (icon.selected === true) {\n        initState = { [icon.id]: true };\n      }\n    });\n    props.onSelectionChange!(initState);\n\n    this.state = {\n      selectedMap: initState,\n    };\n  }\n\n  public onClickHandle = (icon: IIcon) => {\n    const { selectionMode } = this.props;\n    if (selectionMode === 'single') {\n      this.onClickIconSingleMode(icon.id);\n    } else if (selectionMode === 'multi') {\n      this.onClickIconMultiMode(icon.id);\n    } else if (icon.onClick) {\n      icon.onClick();\n    }\n  };\n\n  public onClickIconSingleMode = (iconId: string) => {\n    this.setState(\n      prevState => ({\n        selectedMap: { [iconId]: !prevState.selectedMap[iconId] },\n      }),\n      this.onSelctionChange,\n    );\n  };\n\n  public onClickIconMultiMode = (iconId: string) => {\n    const { selectedMap } = this.state;\n    if (selectedMap[iconId]) {\n      this.setState(\n        {\n          selectedMap: {\n            ...selectedMap,\n            [iconId]: false,\n          },\n        },\n        this.onSelctionChange,\n      );\n    } else {\n      this.setState(\n        {\n          selectedMap: {\n            ...selectedMap,\n            [iconId]: true,\n          },\n        },\n        this.onSelctionChange,\n      );\n    }\n  };\n\n  public onSelctionChange = () => {\n    if (this.props.onSelectionChange) {\n      this.props.onSelectionChange(this.state.selectedMap);\n    }\n  };\n\n  public render() {\n    const { icons, type, selectionMode, destinationDefConfig } = this.props;\n    const { selectedMap } = this.state;\n\n    return icons.length > 0 ? (\n      <Flex wrap={true.toString()}>\n        {icons.map((icon: IIcon, index: number) => {\n          let selected = false;\n          selected = selectedMap[icon.id];\n          return (\n            <IconCard\n              key={icon.title}\n              name={icon.type}\n              title={icon.title}\n              type={type}\n              selected={selected}\n              selectionMode={selectionMode}\n              onClick={() => this.onClickHandle(icon)}\n            />\n          );\n        })}\n      </Flex>\n    ) : (\n      <Flex wrap={true.toString()}>\n        <p>\n          <h2>Please add a compatible {type} before making this connection!</h2>\n          {destinationDefConfig ? (\n            <p>\n              <h3>Following are the supported types:</h3>\n              <ul>\n                {destinationDefConfig!.map(config => {\n                  return (\n                    <li>\n                      <b>{config}</b>\n                    </li>\n                  );\n                })}\n              </ul>\n            </p>\n          ) : (\n            ''\n          )}\n        </p>\n      </Flex>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}