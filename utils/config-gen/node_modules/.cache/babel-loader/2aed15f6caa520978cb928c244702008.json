{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint-disable prefer-spread */\n\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport RcTable, { INTERNAL_COL_DEFINE } from 'rc-table';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport FilterDropdown from './filterDropdown';\nimport createStore from './createStore';\nimport SelectionBox from './SelectionBox';\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport createBodyRow from './createBodyRow';\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\nimport Pagination from '../pagination';\nimport Icon from '../icon';\nimport Spin from '../spin';\nimport TransButton from '../_util/transButton';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\n\nfunction noop() {}\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n\n  if (e.nativeEvent.stopImmediatePropagation) {\n    e.nativeEvent.stopImmediatePropagation();\n  }\n}\n\nfunction getRowSelection(props) {\n  return props.rowSelection || {};\n}\n\nfunction getColumnKey(column, index) {\n  return column.key || column.dataIndex || index;\n}\n\nfunction isSameColumn(a, b) {\n  if (a && b && a.key && a.key === b.key) {\n    return true;\n  }\n\n  return a === b || shallowEqual(a, b, function (value, other) {\n    if (typeof value === 'function' && typeof other === 'function') {\n      return value === other || value.toString() === other.toString();\n    }\n  });\n}\n\nvar defaultPagination = {\n  onChange: noop,\n  onShowSizeChange: noop\n};\n/**\n * Avoid creating new object, so that parent component's shouldComponentUpdate\n * can works appropriately。\n */\n\nvar emptyObject = {};\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table(props) {\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));\n\n    _this.getCheckboxPropsByItem = function (item, index) {\n      var rowSelection = getRowSelection(_this.props);\n\n      if (!rowSelection.getCheckboxProps) {\n        return {};\n      }\n\n      var key = _this.getRecordKey(item, index); // Cache checkboxProps\n\n\n      if (!_this.CheckboxPropsCache[key]) {\n        _this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item) || {};\n        var checkboxProps = _this.CheckboxPropsCache[key];\n        warning(!('checked' in checkboxProps) && !('defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n\n      return _this.CheckboxPropsCache[key];\n    };\n\n    _this.getRecordKey = function (record, index) {\n      var rowKey = _this.props.rowKey;\n      var recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n      warning(recordKey !== undefined, 'Table', 'Each record in dataSource of table should have a unique `key` prop, ' + 'or set `rowKey` of Table to an unique primary key, ' + 'see https://u.ant.design/table-row-key');\n      return recordKey === undefined ? index : recordKey;\n    };\n\n    _this.onRow = function (prefixCls, record, index) {\n      var onRow = _this.props.onRow;\n      var custom = onRow ? onRow(record, index) : {};\n      return _extends({}, custom, {\n        prefixCls: prefixCls,\n        store: _this.store,\n        rowKey: _this.getRecordKey(record, index)\n      });\n    };\n\n    _this.generatePopupContainerFunc = function (getPopupContainer) {\n      var scroll = _this.props.scroll;\n\n      if (getPopupContainer) {\n        return getPopupContainer;\n      } // Use undefined to let rc component use default logic.\n\n\n      return scroll ? function () {\n        return ReactDOM.findDOMNode(_assertThisInitialized(_this));\n      } : undefined;\n    };\n\n    _this.handleFilter = function (column, nextFilters) {\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      var filters = _extends({}, _this.state.filters, _defineProperty({}, getColumnKey(column), nextFilters)); // Remove filters not in current columns\n\n\n      var currentColumnKeys = [];\n      treeMap(_this.columns, function (c) {\n        if (!c.children) {\n          currentColumnKeys.push(getColumnKey(c));\n        }\n      });\n      Object.keys(filters).forEach(function (columnKey) {\n        if (currentColumnKeys.indexOf(columnKey) < 0) {\n          delete filters[columnKey];\n        }\n      });\n\n      if (props.pagination) {\n        // Reset current prop\n        pagination.current = 1;\n        pagination.onChange(pagination.current);\n      }\n\n      var newState = {\n        pagination: pagination,\n        filters: {}\n      };\n\n      var filtersToSetState = _extends({}, filters); // Remove filters which is controlled\n\n\n      _this.getFilteredValueColumns().forEach(function (col) {\n        var columnKey = getColumnKey(col);\n\n        if (columnKey) {\n          delete filtersToSetState[columnKey];\n        }\n      });\n\n      if (Object.keys(filtersToSetState).length > 0) {\n        newState.filters = filtersToSetState;\n      } // Controlled current prop will not respond user interaction\n\n\n      if (_typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends({}, pagination, {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState, function () {\n        _this.store.setState({\n          selectionDirty: false\n        });\n\n        var onChange = _this.props.onChange;\n\n        if (onChange) {\n          onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n            selectionDirty: false,\n            filters: filters,\n            pagination: pagination\n          })));\n        }\n      });\n    };\n\n    _this.handleSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var nativeEvent = e.nativeEvent;\n      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      var pivot = _this.state.pivot;\n\n      var rows = _this.getFlatCurrentPageData();\n\n      var realIndex = rowIndex;\n\n      if (_this.props.expandedRowRender) {\n        realIndex = rows.findIndex(function (row) {\n          return _this.getRecordKey(row, rowIndex) === key;\n        });\n      }\n\n      if (nativeEvent.shiftKey && pivot !== undefined && realIndex !== pivot) {\n        var changeRowKeys = [];\n        var direction = Math.sign(pivot - realIndex);\n        var dist = Math.abs(pivot - realIndex);\n        var step = 0;\n\n        var _loop = function _loop() {\n          var i = realIndex + step * direction;\n          step += 1;\n          var row = rows[i];\n\n          var rowKey = _this.getRecordKey(row, i);\n\n          var checkboxProps = _this.getCheckboxPropsByItem(row, i);\n\n          if (!checkboxProps.disabled) {\n            if (selectedRowKeys.includes(rowKey)) {\n              if (!checked) {\n                selectedRowKeys = selectedRowKeys.filter(function (j) {\n                  return rowKey !== j;\n                });\n                changeRowKeys.push(rowKey);\n              }\n            } else if (checked) {\n              selectedRowKeys.push(rowKey);\n              changeRowKeys.push(rowKey);\n            }\n          }\n        };\n\n        while (step <= dist) {\n          _loop();\n        }\n\n        _this.setState({\n          pivot: realIndex\n        });\n\n        _this.store.setState({\n          selectionDirty: true\n        });\n\n        _this.setSelectedRowKeys(selectedRowKeys, {\n          selectWay: 'onSelectMultiple',\n          record: record,\n          checked: checked,\n          changeRowKeys: changeRowKeys,\n          nativeEvent: nativeEvent\n        });\n      } else {\n        if (checked) {\n          selectedRowKeys.push(_this.getRecordKey(record, realIndex));\n        } else {\n          selectedRowKeys = selectedRowKeys.filter(function (i) {\n            return key !== i;\n          });\n        }\n\n        _this.setState({\n          pivot: realIndex\n        });\n\n        _this.store.setState({\n          selectionDirty: true\n        });\n\n        _this.setSelectedRowKeys(selectedRowKeys, {\n          selectWay: 'onSelect',\n          record: record,\n          checked: checked,\n          changeRowKeys: undefined,\n          nativeEvent: nativeEvent\n        });\n      }\n    };\n\n    _this.handleRadioSelect = function (record, rowIndex, e) {\n      var checked = e.target.checked;\n      var nativeEvent = e.nativeEvent;\n\n      var key = _this.getRecordKey(record, rowIndex);\n\n      var selectedRowKeys = [key];\n\n      _this.store.setState({\n        selectionDirty: true\n      });\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: 'onSelect',\n        record: record,\n        checked: checked,\n        changeRowKeys: undefined,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    _this.handleSelectRow = function (selectionKey, index, onSelectFunc) {\n      var data = _this.getFlatCurrentPageData();\n\n      var defaultSelection = _this.store.getState().selectionDirty ? [] : _this.getDefaultSelection();\n\n      var selectedRowKeys = _this.store.getState().selectedRowKeys.concat(defaultSelection);\n\n      var changeableRowKeys = data.filter(function (item, i) {\n        return !_this.getCheckboxPropsByItem(item, i).disabled;\n      }).map(function (item, i) {\n        return _this.getRecordKey(item, i);\n      });\n      var changeRowKeys = [];\n      var selectWay = 'onSelectAll';\n      var checked; // handle default selection\n\n      switch (selectionKey) {\n        case 'all':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = true;\n          break;\n\n        case 'removeAll':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) >= 0) {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n              changeRowKeys.push(key);\n            }\n          });\n          selectWay = 'onSelectAll';\n          checked = false;\n          break;\n\n        case 'invert':\n          changeableRowKeys.forEach(function (key) {\n            if (selectedRowKeys.indexOf(key) < 0) {\n              selectedRowKeys.push(key);\n            } else {\n              selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n            }\n\n            changeRowKeys.push(key);\n            selectWay = 'onSelectInvert';\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      _this.store.setState({\n        selectionDirty: true\n      }); // when select custom selection, callback selections[n].onSelect\n\n\n      var rowSelection = _this.props.rowSelection;\n      var customSelectionStartIndex = 2;\n\n      if (rowSelection && rowSelection.hideDefaultSelections) {\n        customSelectionStartIndex = 0;\n      }\n\n      if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\n        return onSelectFunc(changeableRowKeys);\n      }\n\n      _this.setSelectedRowKeys(selectedRowKeys, {\n        selectWay: selectWay,\n        checked: checked,\n        changeRowKeys: changeRowKeys\n      });\n    };\n\n    _this.handlePageChange = function (current) {\n      var props = _this.props;\n\n      var pagination = _extends({}, _this.state.pagination);\n\n      if (current) {\n        pagination.current = current;\n      } else {\n        pagination.current = pagination.current || 1;\n      }\n\n      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        otherArguments[_key - 1] = arguments[_key];\n      }\n\n      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));\n      var newState = {\n        pagination: pagination\n      }; // Controlled current prop will not respond user interaction\n\n      if (props.pagination && _typeof(props.pagination) === 'object' && 'current' in props.pagination) {\n        newState.pagination = _extends({}, pagination, {\n          current: _this.state.pagination.current\n        });\n      }\n\n      _this.setState(newState);\n\n      _this.store.setState({\n        selectionDirty: false\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n          selectionDirty: false,\n          pagination: pagination\n        })));\n      }\n    };\n\n    _this.handleShowSizeChange = function (current, pageSize) {\n      var pagination = _this.state.pagination;\n      pagination.onShowSizeChange(current, pageSize);\n\n      var nextPagination = _extends({}, pagination, {\n        pageSize: pageSize,\n        current: current\n      });\n\n      _this.setState({\n        pagination: nextPagination\n      });\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, _this.prepareParamsArguments(_extends({}, _this.state, {\n          pagination: nextPagination\n        })));\n      }\n    };\n\n    _this.renderExpandIcon = function (prefixCls) {\n      return function (_ref) {\n        var expandable = _ref.expandable,\n            expanded = _ref.expanded,\n            needIndentSpaced = _ref.needIndentSpaced,\n            record = _ref.record,\n            onExpand = _ref.onExpand;\n\n        if (expandable) {\n          return React.createElement(LocaleReceiver, {\n            componentName: \"Table\",\n            defaultLocale: defaultLocale.Table\n          }, function (locale) {\n            var _classNames;\n\n            return React.createElement(TransButton, {\n              className: classNames(\"\".concat(prefixCls, \"-row-expand-icon\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-row-collapsed\"), !expanded), _defineProperty(_classNames, \"\".concat(prefixCls, \"-row-expanded\"), expanded), _classNames)),\n              onClick: function onClick(event) {\n                onExpand(record, event);\n              },\n              \"aria-label\": expanded ? locale.collapse : locale.expand,\n              noStyle: true\n            });\n          });\n        }\n\n        if (needIndentSpaced) {\n          return React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-row-expand-icon \").concat(prefixCls, \"-row-spaced\")\n          });\n        }\n\n        return null;\n      };\n    };\n\n    _this.renderSelectionBox = function (type) {\n      return function (_, record, index) {\n        var rowKey = _this.getRecordKey(record, index);\n\n        var props = _this.getCheckboxPropsByItem(record, index);\n\n        var handleChange = function handleChange(e) {\n          return type === 'radio' ? _this.handleRadioSelect(record, index, e) : _this.handleSelect(record, index, e);\n        };\n\n        return React.createElement(\"span\", {\n          onClick: stopPropagation\n        }, React.createElement(SelectionBox, _extends({\n          type: type,\n          store: _this.store,\n          rowIndex: rowKey,\n          onChange: handleChange,\n          defaultSelection: _this.getDefaultSelection()\n        }, props)));\n      };\n    };\n\n    _this.renderTable = function (_ref2) {\n      var _classNames2;\n\n      var prefixCls = _ref2.prefixCls,\n          renderEmpty = _ref2.renderEmpty,\n          dropdownPrefixCls = _ref2.dropdownPrefixCls,\n          contextLocale = _ref2.contextLocale,\n          contextGetPopupContainer = _ref2.getPopupContainer;\n\n      var _a = _this.props,\n          showHeader = _a.showHeader,\n          locale = _a.locale,\n          getPopupContainer = _a.getPopupContainer,\n          restProps = __rest(_a, [\"showHeader\", \"locale\", \"getPopupContainer\"]);\n\n      var data = _this.getCurrentPageData();\n\n      var expandIconAsCell = _this.props.expandedRowRender && _this.props.expandIconAsCell !== false; // use props.getPopupContainer first\n\n      var realGetPopupContainer = getPopupContainer || contextGetPopupContainer; // Merge too locales\n\n      var mergedLocale = _extends({}, contextLocale, locale);\n\n      if (!locale || !locale.emptyText) {\n        mergedLocale.emptyText = renderEmpty('Table');\n      }\n\n      var classString = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-\").concat(_this.props.size), true), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-bordered\"), _this.props.bordered), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-empty\"), !data.length), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-without-column-header\"), !showHeader), _classNames2));\n\n      var columnsWithRowSelection = _this.renderRowSelection({\n        prefixCls: prefixCls,\n        locale: mergedLocale,\n        getPopupContainer: realGetPopupContainer\n      });\n\n      var columns = _this.renderColumnsDropdown({\n        columns: columnsWithRowSelection,\n        prefixCls: prefixCls,\n        dropdownPrefixCls: dropdownPrefixCls,\n        locale: mergedLocale,\n        getPopupContainer: realGetPopupContainer\n      }).map(function (column, i) {\n        var newColumn = _extends({}, column);\n\n        newColumn.key = getColumnKey(newColumn, i);\n        return newColumn;\n      });\n\n      var expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;\n\n      if ('expandIconColumnIndex' in restProps) {\n        expandIconColumnIndex = restProps.expandIconColumnIndex;\n      }\n\n      return React.createElement(RcTable, _extends({\n        key: \"table\",\n        expandIcon: _this.renderExpandIcon(prefixCls)\n      }, restProps, {\n        onRow: function onRow(record, index) {\n          return _this.onRow(prefixCls, record, index);\n        },\n        components: _this.components,\n        prefixCls: prefixCls,\n        data: data,\n        columns: columns,\n        showHeader: showHeader,\n        className: classString,\n        expandIconColumnIndex: expandIconColumnIndex,\n        expandIconAsCell: expandIconAsCell,\n        emptyText: mergedLocale.emptyText\n      }));\n    };\n\n    _this.renderComponent = function (_ref3) {\n      var getPrefixCls = _ref3.getPrefixCls,\n          renderEmpty = _ref3.renderEmpty,\n          getPopupContainer = _ref3.getPopupContainer;\n      var _this$props = _this.props,\n          customizePrefixCls = _this$props.prefixCls,\n          customizeDropdownPrefixCls = _this$props.dropdownPrefixCls,\n          style = _this$props.style,\n          className = _this$props.className;\n\n      var data = _this.getCurrentPageData();\n\n      var loading = _this.props.loading;\n\n      if (typeof loading === 'boolean') {\n        loading = {\n          spinning: loading\n        };\n      }\n\n      var prefixCls = getPrefixCls('table', customizePrefixCls);\n      var dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);\n      var table = React.createElement(LocaleReceiver, {\n        componentName: \"Table\",\n        defaultLocale: defaultLocale.Table\n      }, function (locale) {\n        return _this.renderTable({\n          prefixCls: prefixCls,\n          renderEmpty: renderEmpty,\n          dropdownPrefixCls: dropdownPrefixCls,\n          contextLocale: locale,\n          getPopupContainer: getPopupContainer\n        });\n      }); // if there is no pagination or no data,\n      // the height of spin should decrease by half of pagination\n\n      var paginationPatchClass = _this.hasPagination() && data && data.length !== 0 ? \"\".concat(prefixCls, \"-with-pagination\") : \"\".concat(prefixCls, \"-without-pagination\");\n      return React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-wrapper\"), className),\n        style: style\n      }, React.createElement(Spin, _extends({}, loading, {\n        className: loading.spinning ? \"\".concat(paginationPatchClass, \" \").concat(prefixCls, \"-spin-holder\") : ''\n      }), _this.renderPagination(prefixCls, 'top'), table, _this.renderPagination(prefixCls, 'bottom')));\n    };\n\n    var expandedRowRender = props.expandedRowRender,\n        _props$columns = props.columns,\n        columns = _props$columns === void 0 ? [] : _props$columns;\n    warning(!('columnsPageRange' in props || 'columnsPageSize' in props), 'Table', '`columnsPageRange` and `columnsPageSize` are removed, please use ' + 'fixed columns instead, see: https://u.ant.design/fixed-columns.');\n\n    if (expandedRowRender && columns.some(function (_ref4) {\n      var fixed = _ref4.fixed;\n      return !!fixed;\n    })) {\n      warning(false, 'Table', '`expandedRowRender` and `Column.fixed` are not compatible. Please use one of them at one time.');\n    }\n\n    _this.columns = props.columns || normalizeColumns(props.children);\n\n    _this.createComponents(props.components);\n\n    _this.state = _extends({}, _this.getDefaultSortOrder(_this.columns), {\n      // 减少状态\n      filters: _this.getFiltersFromColumns(),\n      pagination: _this.getDefaultPagination(props),\n      pivot: undefined\n    });\n    _this.CheckboxPropsCache = {};\n    _this.store = createStore({\n      selectedRowKeys: getRowSelection(props).selectedRowKeys || [],\n      selectionDirty: false\n    });\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.columns = nextProps.columns || normalizeColumns(nextProps.children);\n\n      if ('pagination' in nextProps || 'pagination' in this.props) {\n        this.setState(function (previousState) {\n          var newPagination = _extends({}, defaultPagination, previousState.pagination, nextProps.pagination);\n\n          newPagination.current = newPagination.current || 1;\n          newPagination.pageSize = newPagination.pageSize || 10;\n          return {\n            pagination: nextProps.pagination !== false ? newPagination : emptyObject\n          };\n        });\n      }\n\n      if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n        this.store.setState({\n          selectedRowKeys: nextProps.rowSelection.selectedRowKeys || []\n        });\n      } else if (this.props.rowSelection && !nextProps.rowSelection) {\n        this.store.setState({\n          selectedRowKeys: []\n        });\n      }\n\n      if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {\n        this.store.setState({\n          selectionDirty: false\n        });\n      } // https://github.com/ant-design/ant-design/issues/10133\n\n\n      this.CheckboxPropsCache = {};\n\n      if (this.getSortOrderColumns(this.columns).length > 0) {\n        var sortState = this.getSortStateFromColumns(this.columns);\n\n        if (sortState.sortColumn !== this.state.sortColumn || sortState.sortOrder !== this.state.sortOrder) {\n          this.setState(sortState);\n        }\n      }\n\n      var filteredValueColumns = this.getFilteredValueColumns(this.columns);\n\n      if (filteredValueColumns.length > 0) {\n        var filtersFromColumns = this.getFiltersFromColumns(this.columns);\n\n        var newFilters = _extends({}, this.state.filters);\n\n        Object.keys(filtersFromColumns).forEach(function (key) {\n          newFilters[key] = filtersFromColumns[key];\n        });\n\n        if (this.isFiltersChanged(newFilters)) {\n          this.setState({\n            filters: newFilters\n          });\n        }\n      }\n\n      this.createComponents(nextProps.components, this.props.components);\n    }\n  }, {\n    key: \"getDefaultSelection\",\n    value: function getDefaultSelection() {\n      var _this2 = this;\n\n      var rowSelection = getRowSelection(this.props);\n\n      if (!rowSelection.getCheckboxProps) {\n        return [];\n      }\n\n      return this.getFlatData().filter(function (item, rowIndex) {\n        return _this2.getCheckboxPropsByItem(item, rowIndex).defaultChecked;\n      }).map(function (record, rowIndex) {\n        return _this2.getRecordKey(record, rowIndex);\n      });\n    }\n  }, {\n    key: \"getDefaultPagination\",\n    value: function getDefaultPagination(props) {\n      var pagination = _typeof(props.pagination) === 'object' ? props.pagination : {};\n      var current;\n\n      if ('current' in pagination) {\n        current = pagination.current;\n      } else if ('defaultCurrent' in pagination) {\n        current = pagination.defaultCurrent;\n      }\n\n      var pageSize;\n\n      if ('pageSize' in pagination) {\n        pageSize = pagination.pageSize;\n      } else if ('defaultPageSize' in pagination) {\n        pageSize = pagination.defaultPageSize;\n      }\n\n      return this.hasPagination(props) ? _extends({}, defaultPagination, pagination, {\n        current: current || 1,\n        pageSize: pageSize || 10\n      }) : {};\n    }\n  }, {\n    key: \"getSortOrderColumns\",\n    value: function getSortOrderColumns(columns) {\n      return flatFilter(columns || this.columns || [], function (column) {\n        return 'sortOrder' in column;\n      });\n    }\n  }, {\n    key: \"getFilteredValueColumns\",\n    value: function getFilteredValueColumns(columns) {\n      return flatFilter(columns || this.columns || [], function (column) {\n        return typeof column.filteredValue !== 'undefined';\n      });\n    }\n  }, {\n    key: \"getFiltersFromColumns\",\n    value: function getFiltersFromColumns(columns) {\n      var filters = {};\n      this.getFilteredValueColumns(columns).forEach(function (col) {\n        var colKey = getColumnKey(col);\n        filters[colKey] = col.filteredValue;\n      });\n      return filters;\n    }\n  }, {\n    key: \"getDefaultSortOrder\",\n    value: function getDefaultSortOrder(columns) {\n      var definedSortState = this.getSortStateFromColumns(columns);\n      var defaultSortedColumn = flatFilter(columns || [], function (column) {\n        return column.defaultSortOrder != null;\n      })[0];\n\n      if (defaultSortedColumn && !definedSortState.sortColumn) {\n        return {\n          sortColumn: defaultSortedColumn,\n          sortOrder: defaultSortedColumn.defaultSortOrder\n        };\n      }\n\n      return definedSortState;\n    }\n  }, {\n    key: \"getSortStateFromColumns\",\n    value: function getSortStateFromColumns(columns) {\n      // return first column which sortOrder is not falsy\n      var sortedColumn = this.getSortOrderColumns(columns).filter(function (col) {\n        return col.sortOrder;\n      })[0];\n\n      if (sortedColumn) {\n        return {\n          sortColumn: sortedColumn,\n          sortOrder: sortedColumn.sortOrder\n        };\n      }\n\n      return {\n        sortColumn: null,\n        sortOrder: null\n      };\n    }\n  }, {\n    key: \"getMaxCurrent\",\n    value: function getMaxCurrent(total) {\n      var _this$state$paginatio = this.state.pagination,\n          current = _this$state$paginatio.current,\n          pageSize = _this$state$paginatio.pageSize;\n\n      if ((current - 1) * pageSize >= total) {\n        return Math.floor((total - 1) / pageSize) + 1;\n      }\n\n      return current;\n    }\n  }, {\n    key: \"getSorterFn\",\n    value: function getSorterFn(state) {\n      var _ref5 = state || this.state,\n          sortOrder = _ref5.sortOrder,\n          sortColumn = _ref5.sortColumn;\n\n      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\n        return;\n      }\n\n      return function (a, b) {\n        var result = sortColumn.sorter(a, b, sortOrder);\n\n        if (result !== 0) {\n          return sortOrder === 'descend' ? -result : result;\n        }\n\n        return 0;\n      };\n    }\n  }, {\n    key: \"getCurrentPageData\",\n    value: function getCurrentPageData() {\n      var data = this.getLocalData();\n      var current;\n      var pageSize;\n      var state = this.state; // 如果没有分页的话，默认全部展示\n\n      if (!this.hasPagination()) {\n        pageSize = Number.MAX_VALUE;\n        current = 1;\n      } else {\n        pageSize = state.pagination.pageSize;\n        current = this.getMaxCurrent(state.pagination.total || data.length);\n      } // 分页\n      // ---\n      // 当数据量少于等于每页数量时，直接设置数据\n      // 否则进行读取分页数据\n\n\n      if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\n        data = data.filter(function (_, i) {\n          return i >= (current - 1) * pageSize && i < current * pageSize;\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: \"getFlatData\",\n    value: function getFlatData() {\n      var childrenColumnName = this.props.childrenColumnName;\n      return flatArray(this.getLocalData(null, false), childrenColumnName);\n    }\n  }, {\n    key: \"getFlatCurrentPageData\",\n    value: function getFlatCurrentPageData() {\n      var childrenColumnName = this.props.childrenColumnName;\n      return flatArray(this.getCurrentPageData(), childrenColumnName);\n    }\n  }, {\n    key: \"getLocalData\",\n    value: function getLocalData(state) {\n      var _this3 = this;\n\n      var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var currentState = state || this.state;\n      var dataSource = this.props.dataSource;\n      var data = dataSource || []; // 优化本地排序\n\n      data = data.slice(0);\n      var sorterFn = this.getSorterFn(currentState);\n\n      if (sorterFn) {\n        data = this.recursiveSort(data, sorterFn);\n      } // 筛选\n\n\n      if (filter && currentState.filters) {\n        Object.keys(currentState.filters).forEach(function (columnKey) {\n          var col = _this3.findColumn(columnKey);\n\n          if (!col) {\n            return;\n          }\n\n          var values = currentState.filters[columnKey] || [];\n\n          if (values.length === 0) {\n            return;\n          }\n\n          var onFilter = col.onFilter;\n          data = onFilter ? data.filter(function (record) {\n            return values.some(function (v) {\n              return onFilter(v, record);\n            });\n          }) : data;\n        });\n      }\n\n      return data;\n    }\n  }, {\n    key: \"setSelectedRowKeys\",\n    value: function setSelectedRowKeys(selectedRowKeys, selectionInfo) {\n      var _this4 = this;\n\n      var selectWay = selectionInfo.selectWay,\n          record = selectionInfo.record,\n          checked = selectionInfo.checked,\n          changeRowKeys = selectionInfo.changeRowKeys,\n          nativeEvent = selectionInfo.nativeEvent;\n      var rowSelection = getRowSelection(this.props);\n\n      if (rowSelection && !('selectedRowKeys' in rowSelection)) {\n        this.store.setState({\n          selectedRowKeys: selectedRowKeys\n        });\n      }\n\n      var data = this.getFlatData();\n\n      if (!rowSelection.onChange && !rowSelection[selectWay]) {\n        return;\n      }\n\n      var selectedRows = data.filter(function (row, i) {\n        return selectedRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n      });\n\n      if (rowSelection.onChange) {\n        rowSelection.onChange(selectedRowKeys, selectedRows);\n      }\n\n      if (selectWay === 'onSelect' && rowSelection.onSelect) {\n        rowSelection.onSelect(record, checked, selectedRows, nativeEvent);\n      } else if (selectWay === 'onSelectMultiple' && rowSelection.onSelectMultiple) {\n        var changeRows = data.filter(function (row, i) {\n          return changeRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n        });\n        rowSelection.onSelectMultiple(checked, selectedRows, changeRows);\n      } else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\n        var _changeRows = data.filter(function (row, i) {\n          return changeRowKeys.indexOf(_this4.getRecordKey(row, i)) >= 0;\n        });\n\n        rowSelection.onSelectAll(checked, selectedRows, _changeRows);\n      } else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\n        rowSelection.onSelectInvert(selectedRowKeys);\n      }\n    }\n  }, {\n    key: \"toggleSortOrder\",\n    value: function toggleSortOrder(column) {\n      if (!column.sorter) {\n        return;\n      }\n\n      var pagination = _extends({}, this.state.pagination);\n\n      var sortDirections = column.sortDirections || this.props.sortDirections;\n      var _this$state = this.state,\n          sortOrder = _this$state.sortOrder,\n          sortColumn = _this$state.sortColumn; // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\n\n      var newSortOrder; // 切换另一列时，丢弃 sortOrder 的状态\n\n      if (isSameColumn(sortColumn, column) && sortOrder !== undefined) {\n        // 按照sortDirections的内容依次切换排序状态\n        var methodIndex = sortDirections.indexOf(sortOrder) + 1;\n        newSortOrder = methodIndex === sortDirections.length ? undefined : sortDirections[methodIndex];\n      } else {\n        newSortOrder = sortDirections[0];\n      }\n\n      if (this.props.pagination) {\n        // Reset current prop\n        pagination.current = 1;\n        pagination.onChange(pagination.current);\n      }\n\n      var newState = {\n        pagination: pagination,\n        sortOrder: newSortOrder,\n        sortColumn: newSortOrder ? column : null\n      }; // Controlled\n\n      if (this.getSortOrderColumns().length === 0) {\n        this.setState(newState);\n      }\n\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange.apply(null, this.prepareParamsArguments(_extends({}, this.state, newState)));\n      }\n    }\n  }, {\n    key: \"hasPagination\",\n    value: function hasPagination(props) {\n      return (props || this.props).pagination !== false;\n    }\n  }, {\n    key: \"isFiltersChanged\",\n    value: function isFiltersChanged(filters) {\n      var _this5 = this;\n\n      var filtersChanged = false;\n\n      if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {\n        filtersChanged = true;\n      } else {\n        Object.keys(filters).forEach(function (columnKey) {\n          if (filters[columnKey] !== _this5.state.filters[columnKey]) {\n            filtersChanged = true;\n          }\n        });\n      }\n\n      return filtersChanged;\n    }\n  }, {\n    key: \"isSortColumn\",\n    value: function isSortColumn(column) {\n      var sortColumn = this.state.sortColumn;\n\n      if (!column || !sortColumn) {\n        return false;\n      }\n\n      return getColumnKey(sortColumn) === getColumnKey(column);\n    } // Get pagination, filters, sorter\n\n  }, {\n    key: \"prepareParamsArguments\",\n    value: function prepareParamsArguments(state) {\n      var pagination = _extends({}, state.pagination); // remove useless handle function in Table.onChange\n\n\n      delete pagination.onChange;\n      delete pagination.onShowSizeChange;\n      var filters = state.filters;\n      var sorter = {};\n\n      if (state.sortColumn && state.sortOrder) {\n        sorter.column = state.sortColumn;\n        sorter.order = state.sortOrder;\n        sorter.field = state.sortColumn.dataIndex;\n        sorter.columnKey = getColumnKey(state.sortColumn);\n      }\n\n      var extra = {\n        currentDataSource: this.getLocalData(state)\n      };\n      return [pagination, filters, sorter, extra];\n    }\n  }, {\n    key: \"findColumn\",\n    value: function findColumn(myKey) {\n      var column;\n      treeMap(this.columns, function (c) {\n        if (getColumnKey(c) === myKey) {\n          column = c;\n        }\n      });\n      return column;\n    }\n  }, {\n    key: \"createComponents\",\n    value: function createComponents() {\n      var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var prevComponents = arguments.length > 1 ? arguments[1] : undefined;\n      var bodyRow = components && components.body && components.body.row;\n      var preBodyRow = prevComponents && prevComponents.body && prevComponents.body.row;\n\n      if (!this.row || bodyRow !== preBodyRow) {\n        this.row = createBodyRow(bodyRow);\n      }\n\n      this.components = _extends({}, components, {\n        body: _extends({}, components.body, {\n          row: this.row\n        })\n      });\n    }\n  }, {\n    key: \"recursiveSort\",\n    value: function recursiveSort(data, sorterFn) {\n      var _this6 = this;\n\n      var _this$props$childrenC = this.props.childrenColumnName,\n          childrenColumnName = _this$props$childrenC === void 0 ? 'children' : _this$props$childrenC;\n      return data.sort(sorterFn).map(function (item) {\n        return item[childrenColumnName] ? _extends({}, item, _defineProperty({}, childrenColumnName, _this6.recursiveSort(item[childrenColumnName], sorterFn))) : item;\n      });\n    }\n  }, {\n    key: \"renderPagination\",\n    value: function renderPagination(prefixCls, paginationPosition) {\n      // 强制不需要分页\n      if (!this.hasPagination()) {\n        return null;\n      }\n\n      var size = 'default';\n      var pagination = this.state.pagination;\n\n      if (pagination.size) {\n        size = pagination.size;\n      } else if (this.props.size === 'middle' || this.props.size === 'small') {\n        size = 'small';\n      }\n\n      var position = pagination.position || 'bottom';\n      var total = pagination.total || this.getLocalData().length;\n      return total > 0 && (position === paginationPosition || position === 'both') ? React.createElement(Pagination, _extends({\n        key: \"pagination-\".concat(paginationPosition)\n      }, pagination, {\n        className: classNames(pagination.className, \"\".concat(prefixCls, \"-pagination\")),\n        onChange: this.handlePageChange,\n        total: total,\n        size: size,\n        current: this.getMaxCurrent(total),\n        onShowSizeChange: this.handleShowSizeChange\n      })) : null;\n    }\n  }, {\n    key: \"renderRowSelection\",\n    value: function renderRowSelection(_ref6) {\n      var _this7 = this;\n\n      var prefixCls = _ref6.prefixCls,\n          locale = _ref6.locale,\n          getPopupContainer = _ref6.getPopupContainer;\n      var rowSelection = this.props.rowSelection;\n      var columns = this.columns.concat();\n\n      if (rowSelection) {\n        var data = this.getFlatCurrentPageData().filter(function (item, index) {\n          if (rowSelection.getCheckboxProps) {\n            return !_this7.getCheckboxPropsByItem(item, index).disabled;\n          }\n\n          return true;\n        });\n        var selectionColumnClass = classNames(\"\".concat(prefixCls, \"-selection-column\"), _defineProperty({}, \"\".concat(prefixCls, \"-selection-column-custom\"), rowSelection.selections));\n\n        var selectionColumn = _defineProperty({\n          key: 'selection-column',\n          render: this.renderSelectionBox(rowSelection.type),\n          className: selectionColumnClass,\n          fixed: rowSelection.fixed,\n          width: rowSelection.columnWidth,\n          title: rowSelection.columnTitle\n        }, INTERNAL_COL_DEFINE, {\n          className: \"\".concat(prefixCls, \"-selection-col\")\n        });\n\n        if (rowSelection.type !== 'radio') {\n          var checkboxAllDisabled = data.every(function (item, index) {\n            return _this7.getCheckboxPropsByItem(item, index).disabled;\n          });\n          selectionColumn.title = selectionColumn.title || React.createElement(SelectionCheckboxAll, {\n            store: this.store,\n            locale: locale,\n            data: data,\n            getCheckboxPropsByItem: this.getCheckboxPropsByItem,\n            getRecordKey: this.getRecordKey,\n            disabled: checkboxAllDisabled,\n            prefixCls: prefixCls,\n            onSelect: this.handleSelectRow,\n            selections: rowSelection.selections,\n            hideDefaultSelections: rowSelection.hideDefaultSelections,\n            getPopupContainer: this.generatePopupContainerFunc(getPopupContainer)\n          });\n        }\n\n        if ('fixed' in rowSelection) {\n          selectionColumn.fixed = rowSelection.fixed;\n        } else if (columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        })) {\n          selectionColumn.fixed = 'left';\n        }\n\n        if (columns[0] && columns[0].key === 'selection-column') {\n          columns[0] = selectionColumn;\n        } else {\n          columns.unshift(selectionColumn);\n        }\n      }\n\n      return columns;\n    }\n  }, {\n    key: \"renderColumnsDropdown\",\n    value: function renderColumnsDropdown(_ref7) {\n      var _this8 = this;\n\n      var prefixCls = _ref7.prefixCls,\n          dropdownPrefixCls = _ref7.dropdownPrefixCls,\n          columns = _ref7.columns,\n          locale = _ref7.locale,\n          getPopupContainer = _ref7.getPopupContainer;\n      var _this$state2 = this.state,\n          sortOrder = _this$state2.sortOrder,\n          filters = _this$state2.filters;\n      return treeMap(columns, function (column, i) {\n        var _classNames4;\n\n        var key = getColumnKey(column, i);\n        var filterDropdown;\n        var sortButton;\n        var onHeaderCell = column.onHeaderCell;\n\n        var isSortColumn = _this8.isSortColumn(column);\n\n        if (column.filters && column.filters.length > 0 || column.filterDropdown) {\n          var colFilters = key in filters ? filters[key] : [];\n          filterDropdown = React.createElement(FilterDropdown, {\n            locale: locale,\n            column: column,\n            selectedKeys: colFilters,\n            confirmFilter: _this8.handleFilter,\n            prefixCls: \"\".concat(prefixCls, \"-filter\"),\n            dropdownPrefixCls: dropdownPrefixCls || 'ant-dropdown',\n            getPopupContainer: _this8.generatePopupContainerFunc(getPopupContainer),\n            key: \"filter-dropdown\"\n          });\n        }\n\n        if (column.sorter) {\n          var sortDirections = column.sortDirections || _this8.props.sortDirections;\n          var isAscend = isSortColumn && sortOrder === 'ascend';\n          var isDescend = isSortColumn && sortOrder === 'descend';\n          var ascend = sortDirections.indexOf('ascend') !== -1 && React.createElement(Icon, {\n            className: \"\".concat(prefixCls, \"-column-sorter-up \").concat(isAscend ? 'on' : 'off'),\n            type: \"caret-up\",\n            theme: \"filled\"\n          });\n          var descend = sortDirections.indexOf('descend') !== -1 && React.createElement(Icon, {\n            className: \"\".concat(prefixCls, \"-column-sorter-down \").concat(isDescend ? 'on' : 'off'),\n            type: \"caret-down\",\n            theme: \"filled\"\n          });\n          sortButton = React.createElement(\"div\", {\n            title: locale.sortTitle,\n            className: classNames(\"\".concat(prefixCls, \"-column-sorter-inner\"), ascend && descend && \"\".concat(prefixCls, \"-column-sorter-inner-full\")),\n            key: \"sorter\"\n          }, ascend, descend);\n\n          onHeaderCell = function onHeaderCell(col) {\n            var colProps = {}; // Get original first\n\n            if (column.onHeaderCell) {\n              colProps = _extends({}, column.onHeaderCell(col));\n            } // Add sorter logic\n\n\n            var onHeaderCellClick = colProps.onClick;\n\n            colProps.onClick = function () {\n              _this8.toggleSortOrder(column);\n\n              if (onHeaderCellClick) {\n                onHeaderCellClick.apply(void 0, arguments);\n              }\n            };\n\n            return colProps;\n          };\n        }\n\n        return _extends({}, column, {\n          className: classNames(column.className, (_classNames4 = {}, _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-actions\"), sortButton || filterDropdown), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-filters\"), filterDropdown), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-has-sorters\"), sortButton), _defineProperty(_classNames4, \"\".concat(prefixCls, \"-column-sort\"), isSortColumn && sortOrder), _classNames4)),\n          title: [React.createElement(\"span\", {\n            key: \"title\",\n            className: \"\".concat(prefixCls, \"-header-column\")\n          }, React.createElement(\"div\", {\n            className: sortButton ? \"\".concat(prefixCls, \"-column-sorters\") : undefined\n          }, React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-column-title\")\n          }, _this8.renderColumnTitle(column.title)), React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-column-sorter\")\n          }, sortButton))), filterDropdown],\n          onHeaderCell: onHeaderCell\n        });\n      });\n    }\n  }, {\n    key: \"renderColumnTitle\",\n    value: function renderColumnTitle(title) {\n      var _this$state3 = this.state,\n          filters = _this$state3.filters,\n          sortOrder = _this$state3.sortOrder; // https://github.com/ant-design/ant-design/issues/11246#issuecomment-405009167\n\n      if (title instanceof Function) {\n        return title({\n          filters: filters,\n          sortOrder: sortOrder\n        });\n      }\n\n      return title;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderComponent);\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nexport { Table as default };\nTable.Column = Column;\nTable.ColumnGroup = ColumnGroup;\nTable.propTypes = {\n  dataSource: PropTypes.array,\n  columns: PropTypes.array,\n  prefixCls: PropTypes.string,\n  useFixedHeader: PropTypes.bool,\n  rowSelection: PropTypes.object,\n  className: PropTypes.string,\n  size: PropTypes.string,\n  loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  bordered: PropTypes.bool,\n  onChange: PropTypes.func,\n  locale: PropTypes.object,\n  dropdownPrefixCls: PropTypes.string,\n  sortDirections: PropTypes.array,\n  getPopupContainer: PropTypes.func\n};\nTable.defaultProps = {\n  dataSource: [],\n  useFixedHeader: false,\n  className: '',\n  size: 'default',\n  loading: false,\n  bordered: false,\n  indentSize: 20,\n  locale: {},\n  rowKey: 'key',\n  showHeader: true,\n  sortDirections: ['ascend', 'descend'],\n  childrenColumnName: 'children'\n};","map":{"version":3,"sources":["table/Table.jsx"],"names":["__rest","t","Object","e","s","i","p","props","column","a","b","shallowEqual","value","other","defaultPagination","onChange","onShowSizeChange","noop","emptyObject","Table","React","Component","rowSelection","getRowSelection","key","checkboxProps","warning","rowKey","recordKey","record","onRow","custom","prefixCls","store","scroll","ReactDOM","pagination","filters","getColumnKey","currentColumnKeys","treeMap","c","newState","filtersToSetState","columnKey","current","selectionDirty","checked","nativeEvent","defaultSelection","selectedRowKeys","pivot","rows","realIndex","changeRowKeys","direction","Math","dist","step","row","selectWay","data","changeableRowKeys","customSelectionStartIndex","index","onSelectFunc","otherArguments","nextPagination","pageSize","expandable","expanded","needIndentSpaced","onExpand","defaultLocale","classNames","locale","handleChange","type","stopPropagation","renderEmpty","dropdownPrefixCls","contextLocale","getPopupContainer","contextGetPopupContainer","showHeader","_a","restProps","expandIconAsCell","realGetPopupContainer","mergedLocale","classString","columnsWithRowSelection","columns","newColumn","expandIconColumnIndex","emptyText","getPrefixCls","customizePrefixCls","customizeDropdownPrefixCls","style","className","loading","spinning","table","paginationPatchClass","expandedRowRender","fixed","normalizeColumns","undefined","createStore","nextProps","newPagination","previousState","sortState","filteredValueColumns","filtersFromColumns","newFilters","flatFilter","colKey","col","definedSortState","defaultSortedColumn","sortColumn","sortOrder","defaultSortOrder","sortedColumn","total","state","result","Number","childrenColumnName","flatArray","filter","currentState","dataSource","sorterFn","values","onFilter","selectionInfo","selectedRows","changeRows","sortDirections","isSameColumn","methodIndex","newSortOrder","filtersChanged","sorter","extra","currentDataSource","myKey","components","prevComponents","bodyRow","preBodyRow","createBodyRow","body","item","paginationPosition","size","position","handleShowSizeChange","selectionColumnClass","selectionColumn","render","width","title","columnTitle","checkboxAllDisabled","onHeaderCell","isSortColumn","colFilters","filterDropdown","isAscend","isDescend","ascend","descend","sortButton","colProps","onHeaderCellClick","PropTypes","useFixedHeader","bordered","func","indentSize"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable prefer-spread */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport RcTable, { INTERNAL_COL_DEFINE } from 'rc-table';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport FilterDropdown from './filterDropdown';\nimport createStore from './createStore';\nimport SelectionBox from './SelectionBox';\nimport SelectionCheckboxAll from './SelectionCheckboxAll';\nimport Column from './Column';\nimport ColumnGroup from './ColumnGroup';\nimport createBodyRow from './createBodyRow';\nimport { flatArray, treeMap, flatFilter, normalizeColumns } from './util';\nimport Pagination from '../pagination';\nimport Icon from '../icon';\nimport Spin from '../spin';\nimport TransButton from '../_util/transButton';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nfunction noop() { }\nfunction stopPropagation(e) {\n    e.stopPropagation();\n    if (e.nativeEvent.stopImmediatePropagation) {\n        e.nativeEvent.stopImmediatePropagation();\n    }\n}\nfunction getRowSelection(props) {\n    return props.rowSelection || {};\n}\nfunction getColumnKey(column, index) {\n    return column.key || column.dataIndex || index;\n}\nfunction isSameColumn(a, b) {\n    if (a && b && a.key && a.key === b.key) {\n        return true;\n    }\n    return (a === b ||\n        shallowEqual(a, b, (value, other) => {\n            if (typeof value === 'function' && typeof other === 'function') {\n                return value === other || value.toString() === other.toString();\n            }\n        }));\n}\nconst defaultPagination = {\n    onChange: noop,\n    onShowSizeChange: noop,\n};\n/**\n * Avoid creating new object, so that parent component's shouldComponentUpdate\n * can works appropriately。\n */\nconst emptyObject = {};\nexport default class Table extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getCheckboxPropsByItem = (item, index) => {\n            const rowSelection = getRowSelection(this.props);\n            if (!rowSelection.getCheckboxProps) {\n                return {};\n            }\n            const key = this.getRecordKey(item, index);\n            // Cache checkboxProps\n            if (!this.CheckboxPropsCache[key]) {\n                this.CheckboxPropsCache[key] = rowSelection.getCheckboxProps(item) || {};\n                const checkboxProps = this.CheckboxPropsCache[key];\n                warning(!('checked' in checkboxProps) && !('defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n            }\n            return this.CheckboxPropsCache[key];\n        };\n        this.getRecordKey = (record, index) => {\n            const { rowKey } = this.props;\n            const recordKey = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];\n            warning(recordKey !== undefined, 'Table', 'Each record in dataSource of table should have a unique `key` prop, ' +\n                'or set `rowKey` of Table to an unique primary key, ' +\n                'see https://u.ant.design/table-row-key');\n            return recordKey === undefined ? index : recordKey;\n        };\n        this.onRow = (prefixCls, record, index) => {\n            const { onRow } = this.props;\n            const custom = onRow ? onRow(record, index) : {};\n            return Object.assign({}, custom, { prefixCls, store: this.store, rowKey: this.getRecordKey(record, index) });\n        };\n        this.generatePopupContainerFunc = (getPopupContainer) => {\n            const { scroll } = this.props;\n            if (getPopupContainer) {\n                return getPopupContainer;\n            }\n            // Use undefined to let rc component use default logic.\n            return scroll ? () => ReactDOM.findDOMNode(this) : undefined;\n        };\n        this.handleFilter = (column, nextFilters) => {\n            const props = this.props;\n            const pagination = Object.assign({}, this.state.pagination);\n            const filters = Object.assign({}, this.state.filters, { [getColumnKey(column)]: nextFilters });\n            // Remove filters not in current columns\n            const currentColumnKeys = [];\n            treeMap(this.columns, c => {\n                if (!c.children) {\n                    currentColumnKeys.push(getColumnKey(c));\n                }\n            });\n            Object.keys(filters).forEach(columnKey => {\n                if (currentColumnKeys.indexOf(columnKey) < 0) {\n                    delete filters[columnKey];\n                }\n            });\n            if (props.pagination) {\n                // Reset current prop\n                pagination.current = 1;\n                pagination.onChange(pagination.current);\n            }\n            const newState = {\n                pagination,\n                filters: {},\n            };\n            const filtersToSetState = Object.assign({}, filters);\n            // Remove filters which is controlled\n            this.getFilteredValueColumns().forEach((col) => {\n                const columnKey = getColumnKey(col);\n                if (columnKey) {\n                    delete filtersToSetState[columnKey];\n                }\n            });\n            if (Object.keys(filtersToSetState).length > 0) {\n                newState.filters = filtersToSetState;\n            }\n            // Controlled current prop will not respond user interaction\n            if (typeof props.pagination === 'object' && 'current' in props.pagination) {\n                newState.pagination = Object.assign({}, pagination, { current: this.state.pagination.current });\n            }\n            this.setState(newState, () => {\n                this.store.setState({\n                    selectionDirty: false,\n                });\n                const { onChange } = this.props;\n                if (onChange) {\n                    onChange.apply(null, this.prepareParamsArguments(Object.assign({}, this.state, { selectionDirty: false, filters,\n                        pagination })));\n                }\n            });\n        };\n        this.handleSelect = (record, rowIndex, e) => {\n            const checked = e.target.checked;\n            const nativeEvent = e.nativeEvent;\n            const defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();\n            let selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);\n            const key = this.getRecordKey(record, rowIndex);\n            const { pivot } = this.state;\n            const rows = this.getFlatCurrentPageData();\n            let realIndex = rowIndex;\n            if (this.props.expandedRowRender) {\n                realIndex = rows.findIndex(row => this.getRecordKey(row, rowIndex) === key);\n            }\n            if (nativeEvent.shiftKey && pivot !== undefined && realIndex !== pivot) {\n                const changeRowKeys = [];\n                const direction = Math.sign(pivot - realIndex);\n                const dist = Math.abs(pivot - realIndex);\n                let step = 0;\n                while (step <= dist) {\n                    const i = realIndex + step * direction;\n                    step += 1;\n                    const row = rows[i];\n                    const rowKey = this.getRecordKey(row, i);\n                    const checkboxProps = this.getCheckboxPropsByItem(row, i);\n                    if (!checkboxProps.disabled) {\n                        if (selectedRowKeys.includes(rowKey)) {\n                            if (!checked) {\n                                selectedRowKeys = selectedRowKeys.filter((j) => rowKey !== j);\n                                changeRowKeys.push(rowKey);\n                            }\n                        }\n                        else if (checked) {\n                            selectedRowKeys.push(rowKey);\n                            changeRowKeys.push(rowKey);\n                        }\n                    }\n                }\n                this.setState({ pivot: realIndex });\n                this.store.setState({\n                    selectionDirty: true,\n                });\n                this.setSelectedRowKeys(selectedRowKeys, {\n                    selectWay: 'onSelectMultiple',\n                    record,\n                    checked,\n                    changeRowKeys,\n                    nativeEvent,\n                });\n            }\n            else {\n                if (checked) {\n                    selectedRowKeys.push(this.getRecordKey(record, realIndex));\n                }\n                else {\n                    selectedRowKeys = selectedRowKeys.filter((i) => key !== i);\n                }\n                this.setState({ pivot: realIndex });\n                this.store.setState({\n                    selectionDirty: true,\n                });\n                this.setSelectedRowKeys(selectedRowKeys, {\n                    selectWay: 'onSelect',\n                    record,\n                    checked,\n                    changeRowKeys: undefined,\n                    nativeEvent,\n                });\n            }\n        };\n        this.handleRadioSelect = (record, rowIndex, e) => {\n            const checked = e.target.checked;\n            const nativeEvent = e.nativeEvent;\n            const key = this.getRecordKey(record, rowIndex);\n            const selectedRowKeys = [key];\n            this.store.setState({\n                selectionDirty: true,\n            });\n            this.setSelectedRowKeys(selectedRowKeys, {\n                selectWay: 'onSelect',\n                record,\n                checked,\n                changeRowKeys: undefined,\n                nativeEvent,\n            });\n        };\n        this.handleSelectRow = (selectionKey, index, onSelectFunc) => {\n            const data = this.getFlatCurrentPageData();\n            const defaultSelection = this.store.getState().selectionDirty ? [] : this.getDefaultSelection();\n            const selectedRowKeys = this.store.getState().selectedRowKeys.concat(defaultSelection);\n            const changeableRowKeys = data\n                .filter((item, i) => !this.getCheckboxPropsByItem(item, i).disabled)\n                .map((item, i) => this.getRecordKey(item, i));\n            const changeRowKeys = [];\n            let selectWay = 'onSelectAll';\n            let checked;\n            // handle default selection\n            switch (selectionKey) {\n                case 'all':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) < 0) {\n                            selectedRowKeys.push(key);\n                            changeRowKeys.push(key);\n                        }\n                    });\n                    selectWay = 'onSelectAll';\n                    checked = true;\n                    break;\n                case 'removeAll':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) >= 0) {\n                            selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n                            changeRowKeys.push(key);\n                        }\n                    });\n                    selectWay = 'onSelectAll';\n                    checked = false;\n                    break;\n                case 'invert':\n                    changeableRowKeys.forEach(key => {\n                        if (selectedRowKeys.indexOf(key) < 0) {\n                            selectedRowKeys.push(key);\n                        }\n                        else {\n                            selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1);\n                        }\n                        changeRowKeys.push(key);\n                        selectWay = 'onSelectInvert';\n                    });\n                    break;\n                default:\n                    break;\n            }\n            this.store.setState({\n                selectionDirty: true,\n            });\n            // when select custom selection, callback selections[n].onSelect\n            const { rowSelection } = this.props;\n            let customSelectionStartIndex = 2;\n            if (rowSelection && rowSelection.hideDefaultSelections) {\n                customSelectionStartIndex = 0;\n            }\n            if (index >= customSelectionStartIndex && typeof onSelectFunc === 'function') {\n                return onSelectFunc(changeableRowKeys);\n            }\n            this.setSelectedRowKeys(selectedRowKeys, {\n                selectWay,\n                checked,\n                changeRowKeys,\n            });\n        };\n        this.handlePageChange = (current, ...otherArguments) => {\n            const props = this.props;\n            const pagination = Object.assign({}, this.state.pagination);\n            if (current) {\n                pagination.current = current;\n            }\n            else {\n                pagination.current = pagination.current || 1;\n            }\n            pagination.onChange(pagination.current, ...otherArguments);\n            const newState = {\n                pagination,\n            };\n            // Controlled current prop will not respond user interaction\n            if (props.pagination && typeof props.pagination === 'object' && 'current' in props.pagination) {\n                newState.pagination = Object.assign({}, pagination, { current: this.state.pagination.current });\n            }\n            this.setState(newState);\n            this.store.setState({\n                selectionDirty: false,\n            });\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange.apply(null, this.prepareParamsArguments(Object.assign({}, this.state, { selectionDirty: false, pagination })));\n            }\n        };\n        this.handleShowSizeChange = (current, pageSize) => {\n            const { pagination } = this.state;\n            pagination.onShowSizeChange(current, pageSize);\n            const nextPagination = Object.assign({}, pagination, { pageSize,\n                current });\n            this.setState({ pagination: nextPagination });\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange.apply(null, this.prepareParamsArguments(Object.assign({}, this.state, { pagination: nextPagination })));\n            }\n        };\n        this.renderExpandIcon = (prefixCls) => ({ expandable, expanded, needIndentSpaced, record, onExpand, }) => {\n            if (expandable) {\n                return (<LocaleReceiver componentName=\"Table\" defaultLocale={defaultLocale.Table}>\n          {(locale) => (<TransButton className={classNames(`${prefixCls}-row-expand-icon`, {\n                    [`${prefixCls}-row-collapsed`]: !expanded,\n                    [`${prefixCls}-row-expanded`]: expanded,\n                })} onClick={event => {\n                    onExpand(record, event);\n                }} aria-label={expanded ? locale.collapse : locale.expand} noStyle/>)}\n        </LocaleReceiver>);\n            }\n            if (needIndentSpaced) {\n                return <span className={`${prefixCls}-row-expand-icon ${prefixCls}-row-spaced`}/>;\n            }\n            return null;\n        };\n        this.renderSelectionBox = (type) => {\n            return (_, record, index) => {\n                const rowKey = this.getRecordKey(record, index);\n                const props = this.getCheckboxPropsByItem(record, index);\n                const handleChange = (e) => type === 'radio'\n                    ? this.handleRadioSelect(record, index, e)\n                    : this.handleSelect(record, index, e);\n                return (<span onClick={stopPropagation}>\n          <SelectionBox type={type} store={this.store} rowIndex={rowKey} onChange={handleChange} defaultSelection={this.getDefaultSelection()} {...props}/>\n        </span>);\n            };\n        };\n        this.renderTable = ({ prefixCls, renderEmpty, dropdownPrefixCls, contextLocale, getPopupContainer: contextGetPopupContainer, }) => {\n            const _a = this.props, { showHeader, locale, getPopupContainer } = _a, restProps = __rest(_a, [\"showHeader\", \"locale\", \"getPopupContainer\"]);\n            const data = this.getCurrentPageData();\n            const expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;\n            // use props.getPopupContainer first\n            const realGetPopupContainer = getPopupContainer || contextGetPopupContainer;\n            // Merge too locales\n            const mergedLocale = Object.assign({}, contextLocale, locale);\n            if (!locale || !locale.emptyText) {\n                mergedLocale.emptyText = renderEmpty('Table');\n            }\n            const classString = classNames({\n                [`${prefixCls}-${this.props.size}`]: true,\n                [`${prefixCls}-bordered`]: this.props.bordered,\n                [`${prefixCls}-empty`]: !data.length,\n                [`${prefixCls}-without-column-header`]: !showHeader,\n            });\n            const columnsWithRowSelection = this.renderRowSelection({\n                prefixCls,\n                locale: mergedLocale,\n                getPopupContainer: realGetPopupContainer,\n            });\n            const columns = this.renderColumnsDropdown({\n                columns: columnsWithRowSelection,\n                prefixCls,\n                dropdownPrefixCls,\n                locale: mergedLocale,\n                getPopupContainer: realGetPopupContainer,\n            }).map((column, i) => {\n                const newColumn = Object.assign({}, column);\n                newColumn.key = getColumnKey(newColumn, i);\n                return newColumn;\n            });\n            let expandIconColumnIndex = columns[0] && columns[0].key === 'selection-column' ? 1 : 0;\n            if ('expandIconColumnIndex' in restProps) {\n                expandIconColumnIndex = restProps.expandIconColumnIndex;\n            }\n            return (<RcTable key=\"table\" expandIcon={this.renderExpandIcon(prefixCls)} {...restProps} onRow={(record, index) => this.onRow(prefixCls, record, index)} components={this.components} prefixCls={prefixCls} data={data} columns={columns} showHeader={showHeader} className={classString} expandIconColumnIndex={expandIconColumnIndex} expandIconAsCell={expandIconAsCell} emptyText={mergedLocale.emptyText}/>);\n        };\n        this.renderComponent = ({ getPrefixCls, renderEmpty, getPopupContainer }) => {\n            const { prefixCls: customizePrefixCls, dropdownPrefixCls: customizeDropdownPrefixCls, style, className, } = this.props;\n            const data = this.getCurrentPageData();\n            let loading = this.props.loading;\n            if (typeof loading === 'boolean') {\n                loading = {\n                    spinning: loading,\n                };\n            }\n            const prefixCls = getPrefixCls('table', customizePrefixCls);\n            const dropdownPrefixCls = getPrefixCls('dropdown', customizeDropdownPrefixCls);\n            const table = (<LocaleReceiver componentName=\"Table\" defaultLocale={defaultLocale.Table}>\n        {locale => this.renderTable({\n                prefixCls,\n                renderEmpty,\n                dropdownPrefixCls,\n                contextLocale: locale,\n                getPopupContainer,\n            })}\n      </LocaleReceiver>);\n            // if there is no pagination or no data,\n            // the height of spin should decrease by half of pagination\n            const paginationPatchClass = this.hasPagination() && data && data.length !== 0\n                ? `${prefixCls}-with-pagination`\n                : `${prefixCls}-without-pagination`;\n            return (<div className={classNames(`${prefixCls}-wrapper`, className)} style={style}>\n        <Spin {...loading} className={loading.spinning ? `${paginationPatchClass} ${prefixCls}-spin-holder` : ''}>\n          {this.renderPagination(prefixCls, 'top')}\n          {table}\n          {this.renderPagination(prefixCls, 'bottom')}\n        </Spin>\n      </div>);\n        };\n        const { expandedRowRender, columns = [] } = props;\n        warning(!('columnsPageRange' in props || 'columnsPageSize' in props), 'Table', '`columnsPageRange` and `columnsPageSize` are removed, please use ' +\n            'fixed columns instead, see: https://u.ant.design/fixed-columns.');\n        if (expandedRowRender && columns.some(({ fixed }) => !!fixed)) {\n            warning(false, 'Table', '`expandedRowRender` and `Column.fixed` are not compatible. Please use one of them at one time.');\n        }\n        this.columns = props.columns || normalizeColumns(props.children);\n        this.createComponents(props.components);\n        this.state = Object.assign({}, this.getDefaultSortOrder(this.columns), { \n            // 减少状态\n            filters: this.getFiltersFromColumns(), pagination: this.getDefaultPagination(props), pivot: undefined });\n        this.CheckboxPropsCache = {};\n        this.store = createStore({\n            selectedRowKeys: getRowSelection(props).selectedRowKeys || [],\n            selectionDirty: false,\n        });\n    }\n    componentWillReceiveProps(nextProps) {\n        this.columns = nextProps.columns || normalizeColumns(nextProps.children);\n        if ('pagination' in nextProps || 'pagination' in this.props) {\n            this.setState(previousState => {\n                const newPagination = Object.assign({}, defaultPagination, previousState.pagination, nextProps.pagination);\n                newPagination.current = newPagination.current || 1;\n                newPagination.pageSize = newPagination.pageSize || 10;\n                return { pagination: nextProps.pagination !== false ? newPagination : emptyObject };\n            });\n        }\n        if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {\n            this.store.setState({\n                selectedRowKeys: nextProps.rowSelection.selectedRowKeys || [],\n            });\n        }\n        else if (this.props.rowSelection && !nextProps.rowSelection) {\n            this.store.setState({\n                selectedRowKeys: [],\n            });\n        }\n        if ('dataSource' in nextProps && nextProps.dataSource !== this.props.dataSource) {\n            this.store.setState({\n                selectionDirty: false,\n            });\n        }\n        // https://github.com/ant-design/ant-design/issues/10133\n        this.CheckboxPropsCache = {};\n        if (this.getSortOrderColumns(this.columns).length > 0) {\n            const sortState = this.getSortStateFromColumns(this.columns);\n            if (sortState.sortColumn !== this.state.sortColumn ||\n                sortState.sortOrder !== this.state.sortOrder) {\n                this.setState(sortState);\n            }\n        }\n        const filteredValueColumns = this.getFilteredValueColumns(this.columns);\n        if (filteredValueColumns.length > 0) {\n            const filtersFromColumns = this.getFiltersFromColumns(this.columns);\n            const newFilters = Object.assign({}, this.state.filters);\n            Object.keys(filtersFromColumns).forEach(key => {\n                newFilters[key] = filtersFromColumns[key];\n            });\n            if (this.isFiltersChanged(newFilters)) {\n                this.setState({ filters: newFilters });\n            }\n        }\n        this.createComponents(nextProps.components, this.props.components);\n    }\n    getDefaultSelection() {\n        const rowSelection = getRowSelection(this.props);\n        if (!rowSelection.getCheckboxProps) {\n            return [];\n        }\n        return this.getFlatData()\n            .filter((item, rowIndex) => this.getCheckboxPropsByItem(item, rowIndex).defaultChecked)\n            .map((record, rowIndex) => this.getRecordKey(record, rowIndex));\n    }\n    getDefaultPagination(props) {\n        const pagination = typeof props.pagination === 'object' ? props.pagination : {};\n        let current;\n        if ('current' in pagination) {\n            current = pagination.current;\n        }\n        else if ('defaultCurrent' in pagination) {\n            current = pagination.defaultCurrent;\n        }\n        let pageSize;\n        if ('pageSize' in pagination) {\n            pageSize = pagination.pageSize;\n        }\n        else if ('defaultPageSize' in pagination) {\n            pageSize = pagination.defaultPageSize;\n        }\n        return this.hasPagination(props)\n            ? Object.assign({}, defaultPagination, pagination, { current: current || 1, pageSize: pageSize || 10 }) : {};\n    }\n    getSortOrderColumns(columns) {\n        return flatFilter(columns || this.columns || [], (column) => 'sortOrder' in column);\n    }\n    getFilteredValueColumns(columns) {\n        return flatFilter(columns || this.columns || [], (column) => typeof column.filteredValue !== 'undefined');\n    }\n    getFiltersFromColumns(columns) {\n        const filters = {};\n        this.getFilteredValueColumns(columns).forEach((col) => {\n            const colKey = getColumnKey(col);\n            filters[colKey] = col.filteredValue;\n        });\n        return filters;\n    }\n    getDefaultSortOrder(columns) {\n        const definedSortState = this.getSortStateFromColumns(columns);\n        const defaultSortedColumn = flatFilter(columns || [], (column) => column.defaultSortOrder != null)[0];\n        if (defaultSortedColumn && !definedSortState.sortColumn) {\n            return {\n                sortColumn: defaultSortedColumn,\n                sortOrder: defaultSortedColumn.defaultSortOrder,\n            };\n        }\n        return definedSortState;\n    }\n    getSortStateFromColumns(columns) {\n        // return first column which sortOrder is not falsy\n        const sortedColumn = this.getSortOrderColumns(columns).filter((col) => col.sortOrder)[0];\n        if (sortedColumn) {\n            return {\n                sortColumn: sortedColumn,\n                sortOrder: sortedColumn.sortOrder,\n            };\n        }\n        return {\n            sortColumn: null,\n            sortOrder: null,\n        };\n    }\n    getMaxCurrent(total) {\n        const { pagination: { current, pageSize }, } = this.state;\n        if ((current - 1) * pageSize >= total) {\n            return Math.floor((total - 1) / pageSize) + 1;\n        }\n        return current;\n    }\n    getSorterFn(state) {\n        const { sortOrder, sortColumn } = state || this.state;\n        if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== 'function') {\n            return;\n        }\n        return (a, b) => {\n            const result = sortColumn.sorter(a, b, sortOrder);\n            if (result !== 0) {\n                return sortOrder === 'descend' ? -result : result;\n            }\n            return 0;\n        };\n    }\n    getCurrentPageData() {\n        let data = this.getLocalData();\n        let current;\n        let pageSize;\n        const state = this.state;\n        // 如果没有分页的话，默认全部展示\n        if (!this.hasPagination()) {\n            pageSize = Number.MAX_VALUE;\n            current = 1;\n        }\n        else {\n            pageSize = state.pagination.pageSize;\n            current = this.getMaxCurrent(state.pagination.total || data.length);\n        }\n        // 分页\n        // ---\n        // 当数据量少于等于每页数量时，直接设置数据\n        // 否则进行读取分页数据\n        if (data.length > pageSize || pageSize === Number.MAX_VALUE) {\n            data = data.filter((_, i) => {\n                return i >= (current - 1) * pageSize && i < current * pageSize;\n            });\n        }\n        return data;\n    }\n    getFlatData() {\n        const { childrenColumnName } = this.props;\n        return flatArray(this.getLocalData(null, false), childrenColumnName);\n    }\n    getFlatCurrentPageData() {\n        const { childrenColumnName } = this.props;\n        return flatArray(this.getCurrentPageData(), childrenColumnName);\n    }\n    getLocalData(state, filter = true) {\n        const currentState = state || this.state;\n        const { dataSource } = this.props;\n        let data = dataSource || [];\n        // 优化本地排序\n        data = data.slice(0);\n        const sorterFn = this.getSorterFn(currentState);\n        if (sorterFn) {\n            data = this.recursiveSort(data, sorterFn);\n        }\n        // 筛选\n        if (filter && currentState.filters) {\n            Object.keys(currentState.filters).forEach(columnKey => {\n                const col = this.findColumn(columnKey);\n                if (!col) {\n                    return;\n                }\n                const values = currentState.filters[columnKey] || [];\n                if (values.length === 0) {\n                    return;\n                }\n                const onFilter = col.onFilter;\n                data = onFilter\n                    ? data.filter(record => {\n                        return values.some(v => onFilter(v, record));\n                    })\n                    : data;\n            });\n        }\n        return data;\n    }\n    setSelectedRowKeys(selectedRowKeys, selectionInfo) {\n        const { selectWay, record, checked, changeRowKeys, nativeEvent } = selectionInfo;\n        const rowSelection = getRowSelection(this.props);\n        if (rowSelection && !('selectedRowKeys' in rowSelection)) {\n            this.store.setState({ selectedRowKeys });\n        }\n        const data = this.getFlatData();\n        if (!rowSelection.onChange && !rowSelection[selectWay]) {\n            return;\n        }\n        const selectedRows = data.filter((row, i) => selectedRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n        if (rowSelection.onChange) {\n            rowSelection.onChange(selectedRowKeys, selectedRows);\n        }\n        if (selectWay === 'onSelect' && rowSelection.onSelect) {\n            rowSelection.onSelect(record, checked, selectedRows, nativeEvent);\n        }\n        else if (selectWay === 'onSelectMultiple' && rowSelection.onSelectMultiple) {\n            const changeRows = data.filter((row, i) => changeRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n            rowSelection.onSelectMultiple(checked, selectedRows, changeRows);\n        }\n        else if (selectWay === 'onSelectAll' && rowSelection.onSelectAll) {\n            const changeRows = data.filter((row, i) => changeRowKeys.indexOf(this.getRecordKey(row, i)) >= 0);\n            rowSelection.onSelectAll(checked, selectedRows, changeRows);\n        }\n        else if (selectWay === 'onSelectInvert' && rowSelection.onSelectInvert) {\n            rowSelection.onSelectInvert(selectedRowKeys);\n        }\n    }\n    toggleSortOrder(column) {\n        if (!column.sorter) {\n            return;\n        }\n        const pagination = Object.assign({}, this.state.pagination);\n        const sortDirections = column.sortDirections || this.props.sortDirections;\n        const { sortOrder, sortColumn } = this.state;\n        // 只同时允许一列进行排序，否则会导致排序顺序的逻辑问题\n        let newSortOrder;\n        // 切换另一列时，丢弃 sortOrder 的状态\n        if (isSameColumn(sortColumn, column) && sortOrder !== undefined) {\n            // 按照sortDirections的内容依次切换排序状态\n            const methodIndex = sortDirections.indexOf(sortOrder) + 1;\n            newSortOrder =\n                methodIndex === sortDirections.length ? undefined : sortDirections[methodIndex];\n        }\n        else {\n            newSortOrder = sortDirections[0];\n        }\n        if (this.props.pagination) {\n            // Reset current prop\n            pagination.current = 1;\n            pagination.onChange(pagination.current);\n        }\n        const newState = {\n            pagination,\n            sortOrder: newSortOrder,\n            sortColumn: newSortOrder ? column : null,\n        };\n        // Controlled\n        if (this.getSortOrderColumns().length === 0) {\n            this.setState(newState);\n        }\n        const { onChange } = this.props;\n        if (onChange) {\n            onChange.apply(null, this.prepareParamsArguments(Object.assign({}, this.state, newState)));\n        }\n    }\n    hasPagination(props) {\n        return (props || this.props).pagination !== false;\n    }\n    isFiltersChanged(filters) {\n        let filtersChanged = false;\n        if (Object.keys(filters).length !== Object.keys(this.state.filters).length) {\n            filtersChanged = true;\n        }\n        else {\n            Object.keys(filters).forEach(columnKey => {\n                if (filters[columnKey] !== this.state.filters[columnKey]) {\n                    filtersChanged = true;\n                }\n            });\n        }\n        return filtersChanged;\n    }\n    isSortColumn(column) {\n        const { sortColumn } = this.state;\n        if (!column || !sortColumn) {\n            return false;\n        }\n        return getColumnKey(sortColumn) === getColumnKey(column);\n    }\n    // Get pagination, filters, sorter\n    prepareParamsArguments(state) {\n        const pagination = Object.assign({}, state.pagination);\n        // remove useless handle function in Table.onChange\n        delete pagination.onChange;\n        delete pagination.onShowSizeChange;\n        const filters = state.filters;\n        const sorter = {};\n        if (state.sortColumn && state.sortOrder) {\n            sorter.column = state.sortColumn;\n            sorter.order = state.sortOrder;\n            sorter.field = state.sortColumn.dataIndex;\n            sorter.columnKey = getColumnKey(state.sortColumn);\n        }\n        const extra = {\n            currentDataSource: this.getLocalData(state),\n        };\n        return [pagination, filters, sorter, extra];\n    }\n    findColumn(myKey) {\n        let column;\n        treeMap(this.columns, c => {\n            if (getColumnKey(c) === myKey) {\n                column = c;\n            }\n        });\n        return column;\n    }\n    createComponents(components = {}, prevComponents) {\n        const bodyRow = components && components.body && components.body.row;\n        const preBodyRow = prevComponents && prevComponents.body && prevComponents.body.row;\n        if (!this.row || bodyRow !== preBodyRow) {\n            this.row = createBodyRow(bodyRow);\n        }\n        this.components = Object.assign({}, components, { body: Object.assign({}, components.body, { row: this.row }) });\n    }\n    recursiveSort(data, sorterFn) {\n        const { childrenColumnName = 'children' } = this.props;\n        return data.sort(sorterFn).map((item) => item[childrenColumnName]\n            ? Object.assign({}, item, { [childrenColumnName]: this.recursiveSort(item[childrenColumnName], sorterFn) }) : item);\n    }\n    renderPagination(prefixCls, paginationPosition) {\n        // 强制不需要分页\n        if (!this.hasPagination()) {\n            return null;\n        }\n        let size = 'default';\n        const { pagination } = this.state;\n        if (pagination.size) {\n            size = pagination.size;\n        }\n        else if (this.props.size === 'middle' || this.props.size === 'small') {\n            size = 'small';\n        }\n        const position = pagination.position || 'bottom';\n        const total = pagination.total || this.getLocalData().length;\n        return total > 0 && (position === paginationPosition || position === 'both') ? (<Pagination key={`pagination-${paginationPosition}`} {...pagination} className={classNames(pagination.className, `${prefixCls}-pagination`)} onChange={this.handlePageChange} total={total} size={size} current={this.getMaxCurrent(total)} onShowSizeChange={this.handleShowSizeChange}/>) : null;\n    }\n    renderRowSelection({ prefixCls, locale, getPopupContainer, }) {\n        const { rowSelection } = this.props;\n        const columns = this.columns.concat();\n        if (rowSelection) {\n            const data = this.getFlatCurrentPageData().filter((item, index) => {\n                if (rowSelection.getCheckboxProps) {\n                    return !this.getCheckboxPropsByItem(item, index).disabled;\n                }\n                return true;\n            });\n            const selectionColumnClass = classNames(`${prefixCls}-selection-column`, {\n                [`${prefixCls}-selection-column-custom`]: rowSelection.selections,\n            });\n            const selectionColumn = {\n                key: 'selection-column',\n                render: this.renderSelectionBox(rowSelection.type),\n                className: selectionColumnClass,\n                fixed: rowSelection.fixed,\n                width: rowSelection.columnWidth,\n                title: rowSelection.columnTitle,\n                [INTERNAL_COL_DEFINE]: {\n                    className: `${prefixCls}-selection-col`,\n                },\n            };\n            if (rowSelection.type !== 'radio') {\n                const checkboxAllDisabled = data.every((item, index) => this.getCheckboxPropsByItem(item, index).disabled);\n                selectionColumn.title = selectionColumn.title || (<SelectionCheckboxAll store={this.store} locale={locale} data={data} getCheckboxPropsByItem={this.getCheckboxPropsByItem} getRecordKey={this.getRecordKey} disabled={checkboxAllDisabled} prefixCls={prefixCls} onSelect={this.handleSelectRow} selections={rowSelection.selections} hideDefaultSelections={rowSelection.hideDefaultSelections} getPopupContainer={this.generatePopupContainerFunc(getPopupContainer)}/>);\n            }\n            if ('fixed' in rowSelection) {\n                selectionColumn.fixed = rowSelection.fixed;\n            }\n            else if (columns.some(column => column.fixed === 'left' || column.fixed === true)) {\n                selectionColumn.fixed = 'left';\n            }\n            if (columns[0] && columns[0].key === 'selection-column') {\n                columns[0] = selectionColumn;\n            }\n            else {\n                columns.unshift(selectionColumn);\n            }\n        }\n        return columns;\n    }\n    renderColumnsDropdown({ prefixCls, dropdownPrefixCls, columns, locale, getPopupContainer, }) {\n        const { sortOrder, filters } = this.state;\n        return treeMap(columns, (column, i) => {\n            const key = getColumnKey(column, i);\n            let filterDropdown;\n            let sortButton;\n            let onHeaderCell = column.onHeaderCell;\n            const isSortColumn = this.isSortColumn(column);\n            if ((column.filters && column.filters.length > 0) || column.filterDropdown) {\n                const colFilters = key in filters ? filters[key] : [];\n                filterDropdown = (<FilterDropdown locale={locale} column={column} selectedKeys={colFilters} confirmFilter={this.handleFilter} prefixCls={`${prefixCls}-filter`} dropdownPrefixCls={dropdownPrefixCls || 'ant-dropdown'} getPopupContainer={this.generatePopupContainerFunc(getPopupContainer)} key=\"filter-dropdown\"/>);\n            }\n            if (column.sorter) {\n                const sortDirections = column.sortDirections || this.props.sortDirections;\n                const isAscend = isSortColumn && sortOrder === 'ascend';\n                const isDescend = isSortColumn && sortOrder === 'descend';\n                const ascend = sortDirections.indexOf('ascend') !== -1 && (<Icon className={`${prefixCls}-column-sorter-up ${isAscend ? 'on' : 'off'}`} type=\"caret-up\" theme=\"filled\"/>);\n                const descend = sortDirections.indexOf('descend') !== -1 && (<Icon className={`${prefixCls}-column-sorter-down ${isDescend ? 'on' : 'off'}`} type=\"caret-down\" theme=\"filled\"/>);\n                sortButton = (<div title={locale.sortTitle} className={classNames(`${prefixCls}-column-sorter-inner`, ascend && descend && `${prefixCls}-column-sorter-inner-full`)} key=\"sorter\">\n            {ascend}\n            {descend}\n          </div>);\n                onHeaderCell = (col) => {\n                    let colProps = {};\n                    // Get original first\n                    if (column.onHeaderCell) {\n                        colProps = Object.assign({}, column.onHeaderCell(col));\n                    }\n                    // Add sorter logic\n                    const onHeaderCellClick = colProps.onClick;\n                    colProps.onClick = (...args) => {\n                        this.toggleSortOrder(column);\n                        if (onHeaderCellClick) {\n                            onHeaderCellClick(...args);\n                        }\n                    };\n                    return colProps;\n                };\n            }\n            return Object.assign({}, column, { className: classNames(column.className, {\n                    [`${prefixCls}-column-has-actions`]: sortButton || filterDropdown,\n                    [`${prefixCls}-column-has-filters`]: filterDropdown,\n                    [`${prefixCls}-column-has-sorters`]: sortButton,\n                    [`${prefixCls}-column-sort`]: isSortColumn && sortOrder,\n                }), title: [\n                    <span key=\"title\" className={`${prefixCls}-header-column`}>\n            <div className={sortButton ? `${prefixCls}-column-sorters` : undefined}>\n              <span className={`${prefixCls}-column-title`}>\n                {this.renderColumnTitle(column.title)}\n              </span>\n              <span className={`${prefixCls}-column-sorter`}>{sortButton}</span>\n            </div>\n          </span>,\n                    filterDropdown,\n                ], onHeaderCell });\n        });\n    }\n    renderColumnTitle(title) {\n        const { filters, sortOrder } = this.state;\n        // https://github.com/ant-design/ant-design/issues/11246#issuecomment-405009167\n        if (title instanceof Function) {\n            return title({\n                filters,\n                sortOrder,\n            });\n        }\n        return title;\n    }\n    render() {\n        return <ConfigConsumer>{this.renderComponent}</ConfigConsumer>;\n    }\n}\nTable.Column = Column;\nTable.ColumnGroup = ColumnGroup;\nTable.propTypes = {\n    dataSource: PropTypes.array,\n    columns: PropTypes.array,\n    prefixCls: PropTypes.string,\n    useFixedHeader: PropTypes.bool,\n    rowSelection: PropTypes.object,\n    className: PropTypes.string,\n    size: PropTypes.string,\n    loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    bordered: PropTypes.bool,\n    onChange: PropTypes.func,\n    locale: PropTypes.object,\n    dropdownPrefixCls: PropTypes.string,\n    sortDirections: PropTypes.array,\n    getPopupContainer: PropTypes.func,\n};\nTable.defaultProps = {\n    dataSource: [],\n    useFixedHeader: false,\n    className: '',\n    size: 'default',\n    loading: false,\n    bordered: false,\n    indentSize: 20,\n    locale: {},\n    rowKey: 'key',\n    showHeader: true,\n    sortDirections: ['ascend', 'descend'],\n    childrenColumnName: 'children',\n};\n"]},"metadata":{},"sourceType":"module"}