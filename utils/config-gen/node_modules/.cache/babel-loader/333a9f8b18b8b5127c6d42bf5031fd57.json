{"ast":null,"code":"var _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourcesCatalogue/sourcesConfigure/index.tsx\";\nimport { ButtonPrimary } from '@components/common/button';\nimport SourceIcon from '@components/icons/sourceIcon';\nimport * as React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Link } from 'react-router-dom';\nimport theme from '@css/theme';\nimport { Flex } from '../../common/misc';\nimport { Header } from '../../common/typography'; // @ts-ignore\n\nexport const markdown = {\n  Android: \"## Android\\n\\nWith RudderStack\\u2019s Android SDK, you can track and collect event data from your Android application seamlessly. After integrating the SDK, you will also be able to send this event data to a multitude of destination platforms for analytics. \\n\\nIf you want to know more about the architecture of the Android SDK or simply want to get up and running with it, make sure you check out our GitHub codebase.\\n\\n[Documentation][]  \\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[documentation]: https://docs.rudderstack.com/sdk-integration-guide/getting-started-with-android-sdk\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-android\\n\",\n  iOS: \"## iOS\\n\\nRudderStack\\u2019s iOS SDK allows you to integrate RudderStack with your iOS application, to track and collect event data in near real-time. With this SDK, you can also send the event data to your preferred analytics destination platforms such as Google Analytics, Amplitude, Mixpanel, and more.\\n\\nTo know more about the iOS SDK and its architecture, make sure you check out the codebase on our GitHub.\\n\\n[Documentation][]  \\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[documentation]: https://docs.rudderstack.com/sdk-integration-guide/getting-started-with-ios-sdk\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-ios\\n\",\n  Javascript: \"## JavaScript\\n\\nRudderStack\\u2019s JavaScript SDK utilizes our rudderanalytics.js library to send event data from your website to RudderStack as well as many other destinations of your choice, without implementing a new API every time. As rudderanalytics.js loads asynchronously on your web pages, you don\\u2019t have to worry about the page loading speed getting affected.\\n\\nThe JavaScript SDK also supports a feature called Autotrack. When enabled, it automatically tracks and captures important user activities such as clicks, form value changes and submit actions.\\n\\nTo know more about the SDK or to quickly get up and running with it, follow our Quick Start Guide.\\n\\n\\n[Documentation][]  \\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[documentation]: https://docs.rudderstack.com/sdk-integration-guide/getting-started-with-javascript-sdk\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-js\\n\",\n  Unity: \"## Unity\\n\\nRudderStack\\u2019s Unity SDK allows you to track and collect your customer event data in games. The Unity SDK is basically a wrapper that works on top of our Android or iOS SDK. Once integrated, you will be able to send the game-related event data to your preferred destination platforms for analytics or processing.\\n\\nMake sure you check our documentation and the GitHub codebase to get an in-depth understanding of the Unity SDK.\\n\\n[Documentation][]  \\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[documentation]: https://docs.rudderstack.com/sdk-integration-guide/getting-started-with-unity-sdk\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-unity\\n\",\n  Go: \"## Go\\n\\nWith RudderStack\\u2019s Go SDK, you can track your customer event data from your Go application. Once enabled, the event requests hit the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nTo get started with installing and using the RudderStack\\u2019s Go SDK, check out the GitHub repository. For more information related to the Ruby client and the various supported API, please check out the Segment documentation.\\n\\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[view on github]: https://github.com/rudderlabs/analytics-go\\n\",\n  Node: \"## Node JS\\n\\nRudderStack\\u2019s Node.js client allows you to track event data from your Node.js application. Once enabled, the event requests hit the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nTo get started with installing and using the RudderStack Node.js client, check out the GitHub repository. For more information related to the Ruby client and the various supported API, please check out the Segment documentation.\\n\\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-node\\n\",\n  Ruby: \"## Ruby\\n\\nRudderStack\\u2019s Ruby library allows you to track event data from your Ruby code. Once enabled, the event requests are received by the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nTo get started with installing and using the RudderStack Ruby client, check out the GitHub repository. For more information related to the Ruby client and the various supported API, please check out the Segment documentation.\\n\\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-ruby\\n\",\n  ReactNative: \" ## React Native\\n\\nWith RudderStack\\u2019s React Native SDK, you can track your customer event data from your React Native apps with ease. Once integrated, you can use the SDK to send your event data to the destination platform of your choice.\\n\\nCheck out our documentation and the GitHub codebase to get started. Also, make sure you have the React Native Development Environment set up on your system.\\n\\n[Documentation][]  \\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[documentation]: https://docs.rudderstack.com/sdk-integration-guide/getting-started-with-react-native-sdk\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-react-native\\n\",\n  Python: \" ## Python\\n\\nRudderStack\\u2019s Python SDK allows you to track your customer event data from your Python code. Once enabled, the event requests hit the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nTo get started with installing and using the RudderStack\\u2019s Go SDK, check out the GitHub repository. For more information related to the Ruby client and the various supported API, please check out the Segment documentation.\\n\\n[View on Github][]\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n[view on github]: https://github.com/rudderlabs/rudder-sdk-python\\n\",\n  HTTP: \"## HTTP API\\n\\nWith RudderStack\\u2019s HTTP endpoints, you can track your customer event data. Once enabled, the event requests hit the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nPlease check the [HTTP API Specification](https://docs.rudderstack.com/getting-started/http-api-specification)\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n\\n\",\n  AMP: \"## AMP Component\\n\\nWith RudderStack\\u2019s AMP analytics component, you can track your customer event data from your AMP pages. Once enabled, the event requests hit the RudderStack servers, which then route the events to the specified destination platforms as configured by you.\\n\\nPlease check the [AMP Specification](https://docs.rudderstack.com/getting-started/http-api-specification)\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n\\n\",\n  LOOKER: \"## Looker ActionHub\\n\\n\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n\\n\",\n  JAVA: \"## JAVA\\n\\n\\n[//]: # \\\"These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax\\\"\\n\\n\"\n};\nexport default class SourceConfigure extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: ''\n    };\n  }\n\n  render() {\n    const {\n      sourceDef\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"p-l-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      className: \"m-b-lg p-b-md b-b-grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(SourceIcon, {\n      source: sourceDef.name,\n      height: theme.iconSize.large,\n      width: theme.iconSize.large,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"m-l-md\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Header, {\n      color: theme.color.black,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, sourceDef.name))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/sources/setup?sourceDefId=${sourceDef.id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(ButtonPrimary, {\n      className: \"m-b-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Configure\")), React.createElement(ReactMarkdown, {\n      source: markdown[sourceDef.name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourcesCatalogue/sourcesConfigure/index.tsx"],"names":["ButtonPrimary","SourceIcon","React","ReactMarkdown","Link","theme","Flex","Header","markdown","Android","iOS","Javascript","Unity","Go","Node","Ruby","ReactNative","Python","HTTP","AMP","LOOKER","JAVA","SourceConfigure","Component","constructor","props","state","render","sourceDef","name","iconSize","large","color","black","id"],"mappings":";AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,MAAT,QAAgC,yBAAhC,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,OAAO,65BADe;AAEtBC,EAAAA,GAAG,+4BAFmB;AAGtBC,EAAAA,UAAU,0pCAHY;AAItBC,EAAAA,KAAK,k7BAJiB;AAKtBC,EAAAA,EAAE,g2BALoB;AAMtBC,EAAAA,IAAI,w2BANkB;AAOtBC,EAAAA,IAAI,k2BAPkB;AAQtBC,EAAAA,WAAW,w5BARW;AAStBC,EAAAA,MAAM,22BATgB;AAUtBC,EAAAA,IAAI,8oBAVkB;AAWtBC,EAAAA,GAAG,2qBAXmB;AAYtBC,EAAAA,MAAM,8TAZgB;AAatBC,EAAAA,IAAI;AAbkB,CAAjB;AAuBP,eAAe,MAAMC,eAAN,SAA8BpB,KAAK,CAACqB,SAApC,CAGb;AACAC,EAAAA,WAAW,CAACC,KAAD,EAA+B;AACxC,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXlB,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEMmB,EAAAA,MAAP,GAAgB;AACd,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKH,KAA3B;AACA,WACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEG,SAAS,CAAEC,IADrB;AAEE,MAAA,MAAM,EAAExB,KAAK,CAACyB,QAAN,CAAeC,KAFzB;AAGE,MAAA,KAAK,EAAE1B,KAAK,CAACyB,QAAN,CAAeC,KAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE1B,KAAK,CAAC2B,KAAN,CAAYC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCL,SAAS,CAAEC,IAA9C,CADF,CANF,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG,8BAA6BD,SAAS,CAAEM,EAAG,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIE,oBAAC,aAAD;AAAe,MAAA,MAAM,EAAG1B,QAAD,CAAkBoB,SAAS,CAAEC,IAA7B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAXF,CADF;AAoBD;;AA9BD","sourcesContent":["import { ButtonPrimary } from '@components/common/button';\nimport SourceIcon from '@components/icons/sourceIcon';\nimport { ISourceDefintion } from '@stores/sourceDefinitionsList';\n\n// @ts-ignore\nimport raw from 'raw.macro';\nimport * as React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Link } from 'react-router-dom';\n\nimport theme from '@css/theme';\nimport { Flex } from '../../common/misc';\nimport { Header, TextDiv } from '../../common/typography';\n\n// @ts-ignore\nexport const markdown = {\n  Android: raw('./Android.md'),\n  iOS: raw('./iOS.md'),\n  Javascript: raw('./Javascript.md'),\n  Unity: raw('./Unity.md'),\n  Go: raw('./Go.md'),\n  Node: raw('./Node.md'),\n  Ruby: raw('./Ruby.md'),\n  ReactNative: raw('./ReactNative.md'),\n  Python: raw('./Python.md'),\n  HTTP: raw('./HTTP.md'),\n  AMP: raw('./AMP.md'),\n  LOOKER: raw('./LOOKER.md'),\n  JAVA: raw('./JAVA.md'),\n};\n\nexport interface ISourceConfigureProps {\n  sourceDef?: ISourceDefintion;\n}\nexport interface ISourceConfigureState {\n  markdown: string;\n}\n\nexport default class SourceConfigure extends React.Component<\n  ISourceConfigureProps,\n  ISourceConfigureState\n> {\n  constructor(props: ISourceConfigureProps) {\n    super(props);\n    this.state = {\n      markdown: '',\n    };\n  }\n\n  public render() {\n    const { sourceDef } = this.props;\n    return (\n      <div className=\"p-l-lg\">\n        <Flex className=\"m-b-lg p-b-md b-b-grey\">\n          <SourceIcon\n            source={sourceDef!.name}\n            height={theme.iconSize.large}\n            width={theme.iconSize.large}\n          ></SourceIcon>\n          <div className=\"m-l-md\">\n            <Header color={theme.color.black}>{sourceDef!.name}</Header>\n          </div>\n        </Flex>\n        <div>\n          <Link to={`/sources/setup?sourceDefId=${sourceDef!.id}`}>\n            <ButtonPrimary className=\"m-b-lg\">Configure</ButtonPrimary>\n          </Link>\n          <ReactMarkdown source={(markdown as any)[sourceDef!.name]} />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}