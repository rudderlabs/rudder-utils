{"ast":null,"code":"import _initializerDefineProperty from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { action, observable, autorun, toJS } from 'mobx';\nimport { DestinationStore } from './destination';\nimport KSUID from 'ksuid';\n\nfunction autoSave(store, save) {\n  let firstRun = true;\n  autorun(() => {\n    const destinationsListStore = toJS(store);\n    delete destinationsListStore.rootStore;\n    destinationsListStore.destinations.forEach(destination => {\n      delete destination.rootStore;\n    });\n    const json = JSON.stringify(destinationsListStore);\n\n    if (!firstRun) {\n      save(json);\n    }\n\n    firstRun = false;\n  });\n}\n\nexport let DestinationsListStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, (_class = (_temp = class DestinationsListStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"destinations\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"rootStore\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"firstLoad\", _descriptor3, this);\n\n    this.rootStore = rootStore;\n  }\n\n  setDestinations(destinations) {\n    this.destinations = destinations;\n  }\n\n  loadAndSave() {\n    this.load();\n    autoSave(this, this.save.bind(this));\n  }\n\n  returnWithoutRootStore() {\n    const destinationsListStore = toJS(this);\n    delete destinationsListStore.rootStore;\n    destinationsListStore.destinations.forEach(destination => {\n      delete destination.rootStore;\n    });\n    return destinationsListStore;\n  }\n\n  load() {\n    const destinationsListStore = localStorage.getItem('destinationsListStore');\n\n    if (destinationsListStore) {\n      const store = JSON.parse(destinationsListStore);\n      this.destinations = store.destinations.map(destination => new DestinationStore(destination, this.rootStore));\n    }\n  }\n\n  loadImportedFile(destinations) {\n    this.destinations = destinations.map(destination => new DestinationStore(destination, this.rootStore));\n  }\n\n  save(json) {\n    localStorage.setItem('destinationsListStore', json);\n  }\n\n  async getDestinations() {\n    this.destinations = [];\n    this.firstLoad = true;\n  }\n\n  async createDestination(dest) {\n    dest = {\n      config: dest.config,\n      name: dest.name,\n      enabled: true,\n      destinationDefinition: this.rootStore.destinationDefsListStore.getDestinationDef(dest.destinationDefinitionId),\n      id: KSUID.randomSync().string,\n      createdAt: Date(),\n      updatedAt: Date(),\n      deleted: false\n    };\n    this.destinations.push(new DestinationStore(dest, this.rootStore));\n    return dest;\n  }\n\n  async createDestinationConnections(dest, sourceIds) {\n    // update connections store\n    sourceIds.map((source, key) => {\n      if (!this.rootStore.connectionsStore.connections[sourceIds[key]]) {\n        this.rootStore.connectionsStore.connections[sourceIds[key]] = [];\n      }\n\n      this.rootStore.connectionsStore.connections[sourceIds[key]].push(dest.id);\n    });\n  }\n\n  async deleteDestination(destination) {\n    this.destinations = this.destinations.filter(existingDest => {\n      return existingDest.id != destination.id;\n    });\n    return true;\n  }\n\n  async deleteConnection(destination, source) {}\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"destinations\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"rootStore\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"firstLoad\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setDestinations\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setDestinations\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getDestinations\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"getDestinations\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"createDestination\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"createDestination\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"createDestinationConnections\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"createDestinationConnections\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteDestination\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteDestination\"), _class.prototype)), _class));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/stores/destinationsList.ts"],"names":["action","observable","autorun","toJS","DestinationStore","KSUID","autoSave","store","save","firstRun","destinationsListStore","rootStore","destinations","forEach","destination","json","JSON","stringify","DestinationsListStore","bound","constructor","setDestinations","loadAndSave","load","bind","returnWithoutRootStore","localStorage","getItem","parse","map","loadImportedFile","setItem","getDestinations","firstLoad","createDestination","dest","config","name","enabled","destinationDefinition","destinationDefsListStore","getDestinationDef","destinationDefinitionId","id","randomSync","string","createdAt","Date","updatedAt","deleted","push","createDestinationConnections","sourceIds","source","key","connectionsStore","connections","deleteDestination","filter","existingDest","deleteConnection"],"mappings":"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","sourcesContent":["import { action, observable, autorun, toJS, set } from 'mobx';\n\nimport { IRootStore } from '.';\nimport { DestinationStore, IDestinationStore } from './destination';\nimport { ISourceStore } from './source';\nimport KSUID from 'ksuid';\nimport { RootStore } from './index';\n\nexport interface IDestinationsListStore {\n  destinations: IDestinationStore[];\n  firstLoad: boolean;\n  rootStore: IRootStore;\n  setDestinations(destinations: IDestinationStore[]): void;\n  getDestinations(): void;\n  createDestination(dest: any): any;\n  createDestinationConnections(dest: any, ids: string[]): any;\n  deleteDestination(dest: any): any;\n  loadAndSave(): any;\n  loadImportedFile(sources: any): any;\n  returnWithoutRootStore(): any;\n}\n\nfunction autoSave(store: any, save: any) {\n  let firstRun = true;\n  autorun(() => {\n    const destinationsListStore = toJS(store);\n    delete destinationsListStore.rootStore;\n    destinationsListStore.destinations.forEach(\n      (destination: IDestinationStore) => {\n        delete destination.rootStore;\n      },\n    );\n    const json = JSON.stringify(destinationsListStore);\n    if (!firstRun) {\n      save(json);\n    }\n    firstRun = false;\n  });\n}\n\nexport class DestinationsListStore implements IDestinationsListStore {\n  @observable public destinations: IDestinationStore[] = [];\n  @observable public rootStore: IRootStore;\n  @observable public firstLoad: boolean = false;\n\n  constructor(rootStore: IRootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @action.bound\n  public setDestinations(destinations: IDestinationStore[]): void {\n    this.destinations = destinations;\n  }\n\n  public loadAndSave() {\n    this.load();\n    autoSave(this, this.save.bind(this));\n  }\n\n  public returnWithoutRootStore() {\n    const destinationsListStore = toJS(this);\n    delete destinationsListStore.rootStore;\n    destinationsListStore.destinations.forEach(\n      (destination: IDestinationStore) => {\n        delete destination.rootStore;\n      },\n    );\n    return destinationsListStore;\n  }\n\n  public load() {\n    const destinationsListStore = localStorage.getItem('destinationsListStore');\n    if (destinationsListStore) {\n      const store: IDestinationsListStore = JSON.parse(destinationsListStore);\n      this.destinations = store.destinations.map(\n        destination => new DestinationStore(destination, this.rootStore),\n      );\n    }\n  }\n  public loadImportedFile(destinations: any) {\n    this.destinations = destinations.map(\n      (destination: any) => new DestinationStore(destination, this.rootStore),\n    );\n  }\n\n  public save(json: string) {\n    localStorage.setItem('destinationsListStore', json);\n  }\n\n  @action.bound\n  public async getDestinations() {\n    this.destinations = [];\n    this.firstLoad = true;\n  }\n\n  @action.bound\n  public async createDestination(dest: any) {\n    dest = {\n      config: dest.config,\n      name: dest.name,\n      enabled: true,\n      destinationDefinition: this.rootStore.destinationDefsListStore.getDestinationDef(\n        dest.destinationDefinitionId,\n      ),\n      id: KSUID.randomSync().string,\n      createdAt: Date(),\n      updatedAt: Date(),\n      deleted: false,\n    };\n\n    this.destinations.push(new DestinationStore(dest, this.rootStore));\n    return dest;\n  }\n\n  @action.bound\n  public async createDestinationConnections(dest: any, sourceIds: string[]) {\n    // update connections store\n    sourceIds.map((source, key) => {\n      if (!this.rootStore.connectionsStore.connections[sourceIds[key]]) {\n        this.rootStore.connectionsStore.connections[sourceIds[key]] = [];\n      }\n      this.rootStore.connectionsStore.connections[sourceIds[key]].push(dest.id);\n    });\n  }\n\n  @action.bound\n  public async deleteDestination(destination: IDestinationStore) {\n    this.destinations = this.destinations.filter(existingDest => {\n      return existingDest.id != destination.id;\n    });\n\n    return true;\n  }\n\n  public async deleteConnection(\n    destination: IDestinationStore,\n    source: ISourceStore,\n  ) {}\n}\n"]},"metadata":{},"sourceType":"module"}