{"ast":null,"code":"import _initializerDefineProperty from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _temp;\n\nimport { action, observable } from 'mobx';\nimport { apiCaller } from '@services/apiCaller';\nimport { markdown } from '@components/sourcesCatalogue/sourcesConfigure';\nexport let SourceDefinitionsListStore = (_dec = action.bound, _dec2 = action.bound, (_class = (_temp = class SourceDefinitionsListStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"sourceDefinitions\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"rootStore\", _descriptor2, this);\n\n    this.rootStore = rootStore;\n  }\n\n  async getSourceDefinitions() {\n    const res = await apiCaller().get(`/open-source-definitions`);\n    this.sourceDefinitions = res.data;\n  }\n\n  async getFilteredSourceDefinitions() {\n    const filteredSourcesArr = [];\n    const acceptedSources = Object.keys(markdown);\n    this.sourceDefinitions.map(source => {\n      if (acceptedSources.includes(source.name)) {\n        filteredSourcesArr.push(source);\n      }\n    });\n    return filteredSourcesArr;\n  }\n\n  getSourceDef(id) {\n    return this.sourceDefinitions.filter(def => def.id === id)[0];\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"sourceDefinitions\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"rootStore\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"getSourceDefinitions\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"getSourceDefinitions\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getFilteredSourceDefinitions\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"getFilteredSourceDefinitions\"), _class.prototype)), _class));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/stores/sourceDefinitionsList.ts"],"names":["action","observable","apiCaller","markdown","SourceDefinitionsListStore","bound","constructor","rootStore","getSourceDefinitions","res","get","sourceDefinitions","data","getFilteredSourceDefinitions","filteredSourcesArr","acceptedSources","Object","keys","map","source","includes","name","push","getSourceDef","id","filter","def"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,SAASC,QAAT,QAAyB,+CAAzB;AAgBA,WAAaC,0BAAb,WAQGJ,MAAM,CAACK,KARV,UAcGL,MAAM,CAACK,KAdV,qBAAO,MAAMD,0BAAN,CAAwE;AAI7EE,EAAAA,WAAW,CAACC,SAAD,EAAwB;AAAA;;AAAA;;AACjC,SAAKA,SAAL,GAAiBA,SAAjB;AACD;;AAED,QACaC,oBADb,GACoC;AAClC,UAAMC,GAAG,GAAG,MAAMP,SAAS,GAAGQ,GAAZ,CAAiB,0BAAjB,CAAlB;AACA,SAAKC,iBAAL,GAAyBF,GAAG,CAACG,IAA7B;AACD;;AAED,QACaC,4BADb,GAC4C;AAC1C,UAAMC,kBAAkB,GAAG,EAA3B;AACA,UAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYd,QAAZ,CAAxB;AACA,SAAKQ,iBAAL,CAAuBO,GAAvB,CAA4BC,MAAD,IAAiB;AAC1C,UAAIJ,eAAe,CAACK,QAAhB,CAAyBD,MAAM,CAACE,IAAhC,CAAJ,EAA2C;AACzCP,QAAAA,kBAAkB,CAACQ,IAAnB,CAAwBH,MAAxB;AACD;AACF,KAJD;AAKA,WAAOL,kBAAP;AACD;;AAEMS,EAAAA,YAAP,CAAoBC,EAApB,EAAgC;AAC9B,WAAO,KAAKb,iBAAL,CAAuBc,MAAvB,CACJC,GAAD,IAA2BA,GAAG,CAACF,EAAJ,KAAWA,EADjC,EAEL,CAFK,CAAP;AAGD;;AA9B4E,CAA/E,2FACGvB,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,WAC6D,EAD7D;AAAA;AAAA,6EAEGA,UAFH;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { action, observable } from 'mobx';\nimport { apiCaller } from '@services/apiCaller';\nimport { IRootStore } from '.';\nimport { markdown } from '@components/sourcesCatalogue/sourcesConfigure';\n\nexport interface ISourceDefinitionsListStore {\n  sourceDefinitions: ISourceDefintion[];\n  rootStore: IRootStore;\n  getSourceDefinitions(): void;\n  getSourceDef(id: string): ISourceDefintion;\n  getFilteredSourceDefinitions(): any;\n}\n\nexport interface ISourceDefintion {\n  id: string;\n  displayName: string;\n  name: string;\n}\n\nexport class SourceDefinitionsListStore implements ISourceDefinitionsListStore {\n  @observable public sourceDefinitions: ISourceDefintion[] = [];\n  @observable public rootStore: IRootStore;\n\n  constructor(rootStore: IRootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @action.bound\n  public async getSourceDefinitions() {\n    const res = await apiCaller().get(`/open-source-definitions`);\n    this.sourceDefinitions = res.data;\n  }\n\n  @action.bound\n  public async getFilteredSourceDefinitions() {\n    const filteredSourcesArr = [] as Array<object>;\n    const acceptedSources = Object.keys(markdown);\n    this.sourceDefinitions.map((source: any) => {\n      if (acceptedSources.includes(source.name)) {\n        filteredSourcesArr.push(source)\n      }\n    })\n    return filteredSourcesArr;\n  }\n\n  public getSourceDef(id: string) {\n    return this.sourceDefinitions.filter(\n      (def: ISourceDefintion) => def.id === id,\n    )[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}