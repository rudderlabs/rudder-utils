{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _resizeObserverPolyfill = _interopRequireDefault(require(\"resize-observer-polyfill\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar ReactResizeObserver =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReactResizeObserver, _React$Component);\n\n  function ReactResizeObserver() {\n    var _this;\n\n    _classCallCheck(this, ReactResizeObserver);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactResizeObserver).apply(this, arguments));\n    _this.resizeObserver = null;\n    _this.state = {\n      width: 0,\n      height: 0\n    };\n\n    _this.onResize = function (entries) {\n      var onResize = _this.props.onResize;\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (_this.state.width !== fixedWidth || _this.state.height !== fixedHeight) {\n        _this.setState({\n          width: fixedWidth,\n          height: fixedHeight\n        });\n\n        if (onResize) {\n          onResize();\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ReactResizeObserver, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.onComponentUpdated();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyObserver();\n    }\n  }, {\n    key: \"onComponentUpdated\",\n    value: function onComponentUpdated() {\n      var disabled = this.props.disabled;\n      var element = (0, _reactDom.findDOMNode)(this);\n\n      if (!this.resizeObserver && !disabled && element) {\n        // Add resize observer\n        this.resizeObserver = new _resizeObserverPolyfill[\"default\"](this.onResize);\n        this.resizeObserver.observe(element);\n      } else if (disabled) {\n        // Remove resize observer\n        this.destroyObserver();\n      }\n    }\n  }, {\n    key: \"destroyObserver\",\n    value: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$children = this.props.children,\n          children = _this$props$children === void 0 ? null : _this$props$children;\n      return children;\n    }\n  }]);\n\n  return ReactResizeObserver;\n}(React.Component);\n\nvar _default = ReactResizeObserver;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["_util/resizeObserver.jsx"],"names":["ReactResizeObserver","React","Component","width","height","onResize","target","entries","fixedWidth","Math","fixedHeight","disabled","element","ResizeObserver","children"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACMA,mB;;;;;AACF,WAAA,mBAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA;;AACV,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,mBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTG,MAAAA,KAAK,EADI,CAAA;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;;AAIA,IAAA,KAAA,CAAA,QAAA,GAAgB,UAAA,OAAA,EAAa;AAAA,UACjBC,QADiB,GACJ,KAAA,CADI,KACJ,CADI,QAAA;AAAA,UAEjBC,MAFiB,GAENC,OAAO,CAFD,CAEC,CAAPA,CAFM,MAAA;;AAAA,UAAA,qBAAA,GAGCD,MAAM,CAHP,qBAGCA,EAHD;AAAA,UAGjBH,KAHiB,GAAA,qBAAA,CAAA,KAAA;AAAA,UAGVC,MAHU,GAAA,qBAAA,CAAA,MAAA;AAIzB;;;;;;;AAKA,UAAMI,UAAU,GAAGC,IAAI,CAAJA,KAAAA,CAAnB,KAAmBA,CAAnB;AACA,UAAMC,WAAW,GAAGD,IAAI,CAAJA,KAAAA,CAApB,MAAoBA,CAApB;;AACA,UAAI,KAAA,CAAA,KAAA,CAAA,KAAA,KAAA,UAAA,IAAmC,KAAA,CAAA,KAAA,CAAA,MAAA,KAAvC,WAAA,EAA0E;AACtE,QAAA,KAAA,CAAA,QAAA,CAAc;AACVN,UAAAA,KAAK,EADK,UAAA;AAEVC,UAAAA,MAAM,EAAEM;AAFE,SAAd;;AAIA,YAAA,QAAA,EAAc;AACVL,UAAAA,QAAQ;AACX;AACJ;AAnBL,KAAA;;AAPU,WAAA,KAAA;AA4Bb;;;;wCACmB;AAChB,WAAA,kBAAA;AACH;;;yCACoB;AACjB,WAAA,kBAAA;AACH;;;2CACsB;AACnB,WAAA,eAAA;AACH;;;yCACoB;AAAA,UACTM,QADS,GACI,KADJ,KACI,CADJ,QAAA;AAEjB,UAAMC,OAAO,GAAG,CAAA,GAAA,SAAA,CAAA,WAAA,EAAhB,IAAgB,CAAhB;;AACA,UAAI,CAAC,KAAD,cAAA,IAAwB,CAAxB,QAAA,IAAJ,OAAA,EAAkD;AAC9C;AACA,aAAA,cAAA,GAAsB,IAAIC,uBAAAA,CAAJ,SAAIA,CAAJ,CAAmB,KAAzC,QAAsB,CAAtB;AACA,aAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAHJ,OAAA,MAKK,IAAA,QAAA,EAAc;AACf;AACA,aAAA,eAAA;AACH;AACJ;;;sCACiB;AACd,UAAI,KAAJ,cAAA,EAAyB;AACrB,aAAA,cAAA,CAAA,UAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACH;AACJ;;;6BACQ;AAAA,UAAA,oBAAA,GACuB,KADvB,KACuB,CADvB,QAAA;AAAA,UACGC,QADH,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,oBAAA;AAEL,aAAA,QAAA;AACH;;;;EA7D6Bb,KAAK,CAACC,S;;eA+DzBF,mB","sourcesContent":["import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ResizeObserver from 'resize-observer-polyfill';\nclass ReactResizeObserver extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.resizeObserver = null;\n        this.state = {\n            width: 0,\n            height: 0,\n        };\n        this.onResize = (entries) => {\n            const { onResize } = this.props;\n            const { target } = entries[0];\n            const { width, height } = target.getBoundingClientRect();\n            /**\n             * Resize observer trigger when content size changed.\n             * In most case we just care about element size,\n             * let's use `boundary` instead of `contentRect` here to avoid shaking.\n             */\n            const fixedWidth = Math.floor(width);\n            const fixedHeight = Math.floor(height);\n            if (this.state.width !== fixedWidth || this.state.height !== fixedHeight) {\n                this.setState({\n                    width: fixedWidth,\n                    height: fixedHeight,\n                });\n                if (onResize) {\n                    onResize();\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        this.onComponentUpdated();\n    }\n    componentDidUpdate() {\n        this.onComponentUpdated();\n    }\n    componentWillUnmount() {\n        this.destroyObserver();\n    }\n    onComponentUpdated() {\n        const { disabled } = this.props;\n        const element = findDOMNode(this);\n        if (!this.resizeObserver && !disabled && element) {\n            // Add resize observer\n            this.resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver.observe(element);\n        }\n        else if (disabled) {\n            // Remove resize observer\n            this.destroyObserver();\n        }\n    }\n    destroyObserver() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    render() {\n        const { children = null } = this.props;\n        return children;\n    }\n}\nexport default ReactResizeObserver;\n"]},"metadata":{},"sourceType":"script"}