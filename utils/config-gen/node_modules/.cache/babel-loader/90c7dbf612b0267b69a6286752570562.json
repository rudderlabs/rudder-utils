{"ast":null,"code":"var _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/common/formGroup.tsx\";\nimport * as React from 'react';\nimport { withTheme } from 'styled-components';\nimport TextInputField from './textInput';\nimport { SubHeaderDiv } from './typography';\nimport SwitchInput from './switchInput';\nimport DynamicForm from './dynamicForm';\nimport { toJS } from 'mobx';\nimport ErrorLabel from '../common/errorLabel';\n\nclass FormGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (label, value) => {\n      const {\n        onStateChange\n      } = this.props;\n      this.setState(prevState => ({\n        formData: { ...prevState.formData,\n          [label]: value\n        }\n      }), () => onStateChange(this.state.formData));\n    };\n\n    this.onBlur = regexJSON => {\n      const {\n        formData,\n        blurCount\n      } = this.state;\n      let key = formData[Object.keys(formData)[0]];\n      var regex = RegExp(regexJSON);\n\n      if (blurCount === 0) {\n        this.setState({\n          blurCount: blurCount + 1\n        });\n      } else {\n        this.setState({\n          error: !regex.test(key),\n          blurCount: blurCount + 1\n        });\n      }\n    };\n\n    this.renderField = field => {\n      const {\n        initialSettings,\n        title\n      } = this.props;\n\n      if (initialSettings && initialSettings[field.value] !== undefined) {\n        field.default = toJS(initialSettings[field.value]);\n      }\n\n      switch (field.type) {\n        case 'textInput':\n        case 'textareaInput':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            onBlur: () => {\n              this.onBlur(field.regex);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(TextInputField, {\n            field: field,\n            onChange: this.onChange,\n            type: field.type == 'textInput' ? 'input' : 'textarea',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }), this.state.error ? React.createElement(ErrorLabel, {\n            error: this.state.error,\n            errorMessage: this.state.errorMessage,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }) : null), field.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }, field.footerNote));\n\n        case 'checkbox':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, React.createElement(SwitchInput, {\n            field: field,\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }), field.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, field.footerNote));\n\n        case 'dynamicForm':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, React.createElement(DynamicForm, {\n            field: field,\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }), field.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }, field.footerNote));\n\n        default:\n          break;\n      }\n    };\n\n    this.state = {\n      formData: {},\n      error: false,\n      blurCount: 0,\n      errorMessage: 'Wrong format'\n    };\n  }\n\n  render() {\n    const {\n      title,\n      fields,\n      theme\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"p-b-md p-t-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(SubHeaderDiv, {\n      color: theme.color.black,\n      className: \"p-b-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, title), fields.map(field => this.renderField(field)));\n  }\n\n}\n\nexport default withTheme(FormGroup);","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/common/formGroup.tsx"],"names":["React","withTheme","TextInputField","SubHeaderDiv","SwitchInput","DynamicForm","toJS","ErrorLabel","FormGroup","Component","constructor","props","onChange","label","value","onStateChange","setState","prevState","formData","state","onBlur","regexJSON","blurCount","key","Object","keys","regex","RegExp","error","test","renderField","field","initialSettings","title","undefined","default","type","errorMessage","footerNote","render","fields","theme","color","black","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { withTheme } from 'styled-components';\n\nimport TextInputField from './textInput';\nimport { SubHeaderDiv } from './typography';\nimport SwitchInput from './switchInput';\nimport DynamicForm from './dynamicForm';\nimport { toJS } from 'mobx';\nimport ErrorLabel from '../common/errorLabel';\n\nexport interface IFormGroupProps {\n  title: string;\n  fields: any;\n  theme: any;\n  onStateChange: any;\n  initialSettings?: any;\n}\n\nexport interface IFormGroupState {\n  formData: any;\n  error: boolean;\n  blurCount: number;\n  errorMessage: string;\n}\n\nclass FormGroup extends React.Component<IFormGroupProps, IFormGroupState> {\n  constructor(props: IFormGroupProps) {\n    super(props);\n    this.state = {\n      formData: {},\n      error: false,\n      blurCount: 0,\n      errorMessage: 'Wrong format',\n    };\n  }\n  public onChange = (label: string, value: string) => {\n    const { onStateChange } = this.props;\n    this.setState(\n      (prevState: any) => ({\n        formData: {\n          ...prevState.formData,\n          [label]: value,\n        },\n      }),\n      () => onStateChange(this.state.formData),\n    );\n  };\n\n  public onBlur = (regexJSON: any) => {\n    const { formData, blurCount } = this.state;\n    let key = formData[Object.keys(formData)[0]];\n    var regex = RegExp(regexJSON);\n    if (blurCount === 0) {\n      this.setState({ blurCount: blurCount + 1 });\n    } else {\n      this.setState({ error: !regex.test(key), blurCount: blurCount + 1 });\n    }\n  };\n\n  public renderField = (field: any) => {\n    const { initialSettings, title } = this.props;\n    if (initialSettings && initialSettings[field.value] !== undefined) {\n      field.default = toJS(initialSettings[field.value]);\n    }\n    switch (field.type) {\n      case 'textInput':\n      case 'textareaInput':\n        return (\n          <div className=\"p-b-sm\">\n            <div\n              onBlur={() => {\n                this.onBlur(field.regex);\n              }}\n            >\n              <TextInputField\n                field={field}\n                onChange={this.onChange}\n                type={field.type == 'textInput' ? 'input' : 'textarea'}\n              ></TextInputField>\n              {this.state.error ? (\n                <ErrorLabel\n                  error={this.state.error}\n                  errorMessage={this.state.errorMessage}\n                />\n              ) : null}\n            </div>\n            {field.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{field.footerNote}</div>\n            )}\n          </div>\n        );\n      case 'checkbox':\n        return (\n          <div className=\"p-b-sm\">\n            <SwitchInput field={field} onChange={this.onChange}></SwitchInput>\n            {field.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{field.footerNote}</div>\n            )}\n          </div>\n        );\n      case 'dynamicForm':\n        return (\n          <div className=\"p-b-sm\">\n            <DynamicForm field={field} onChange={this.onChange}></DynamicForm>\n            {field.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{field.footerNote}</div>\n            )}\n          </div>\n        );\n      default:\n        break;\n    }\n  };\n  public render() {\n    const { title, fields, theme } = this.props;\n    return (\n      <div className=\"p-b-md p-t-sm\">\n        <SubHeaderDiv color={theme.color.black} className=\"p-b-sm\">\n          {title}\n        </SubHeaderDiv>\n        {fields.map((field: any) => this.renderField(field))}\n      </div>\n    );\n  }\n}\n\nexport default withTheme(FormGroup);\n"]},"metadata":{},"sourceType":"module"}