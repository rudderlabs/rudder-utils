{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/connectSources/index.tsx\";\n\nimport { DottedCircle, IconCircle } from '@components/common/dottedCircle';\nimport { Flex } from '@components/common/misc';\nimport { HeaderDiv } from '@components/common/typography';\nimport IconCardList from '@components/iconCardList';\nimport EmptySourceCard from '@components/sourceCard/emptySourceCard';\nimport Svg from '@svg/index';\nimport { inject, observer } from 'mobx-react';\nimport * as React from 'react';\nimport { withRouter } from 'react-router';\nimport { withTheme } from 'styled-components';\nimport { AddDestDialogBody, IconCardListContainer, StyledContainer, BorderLine } from './styles';\nimport { ButtonSecondary } from '@components/common/button';\nlet ConnectSources = (_dec = inject('destinationsListStore', 'sourcesListStore'), _dec(_class = observer(_class = (_temp = class ConnectSources extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSourceSelection = selectedMap => {\n      let sourceIds = Object.keys(selectedMap).filter(k => selectedMap[k]);\n\n      if (sourceIds.length < 1) {\n        return this.setState({\n          enableNextButton: false,\n          selectedSources: []\n        });\n      }\n\n      this.setState({\n        selectedSources: this.props.sourcesListStore.sources.filter(source => sourceIds.indexOf(source.id) > -1)\n      });\n    };\n\n    this.handleCancel = () => {\n      if (this.props.history.length > 2) {\n        this.props.history.goBack();\n      } else {\n        this.props.history.push('/connections');\n      }\n    };\n\n    this.handleSubmit = async () => {\n      const {\n        destination,\n        selectedSources\n      } = this.state;\n      let destinationId = destination.id;\n      const {\n        destinationsListStore\n      } = this.props;\n\n      if (selectedSources.length > 0) {\n        let selectedDestination = destinationsListStore.destinations.find(destination => destination.id === destinationId);\n\n        if (selectedDestination) {\n          selectedDestination.sources.push(selectedSources);\n        }\n\n        await this.props.destinationsListStore.createDestinationConnections(selectedDestination, selectedSources.map(source => source.id));\n        this.props.history.push(`/`);\n      }\n    };\n\n    this.renderIconCardListContainer = () => {\n      const {\n        selectedSources,\n        destination,\n        refinedSourceList\n      } = this.state;\n\n      if (refinedSourceList.length > 0) {\n        return React.createElement(IconCardListContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, this.props.sourcesListStore.sources.length === 0 ? React.createElement(Flex, {\n          justifyContentCenter: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(EmptySourceCard, {\n          destinationId: destination.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        })) : React.createElement(IconCardList, {\n          type: \"source\",\n          selectionMode: \"multi\",\n          destinationDefConfig: destination.destinationDefinition.config.sourceType,\n          icons: refinedSourceList.map(source => ({\n            id: source.id,\n            type: source.sourceDef.name,\n            title: source.name,\n            selected: selectedSources.length > 0 ? source.id === selectedSources[0].id ? true : false : false\n          })),\n          onSelectionChange: this.handleSourceSelection,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(IconCardListContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Flex, {\n        justifyContentCenter: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(EmptySourceCard, {\n        destinationId: destination.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })));\n    };\n\n    this.renderModalFooter = () => {\n      const {\n        selectedSources,\n        destination,\n        refinedSourceList\n      } = this.state;\n\n      if (refinedSourceList.length > 0) {\n        return React.createElement(React.Fragment, null, React.createElement(BorderLine, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }), React.createElement(Flex, {\n          flexDirection: \"row\",\n          spaceBetween: true,\n          className: \"p-h-md p-v-xs\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(ButtonSecondary, {\n          onClick: this.handleCancel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, \"Cancel\"), React.createElement(ButtonSecondary, {\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, \"Submit\")));\n      }\n    };\n\n    const propsDestinationId = props.match.params.id;\n    let _destination = undefined;\n\n    if (propsDestinationId) {\n      var _selectedDestination = props.destinationsListStore.destinations.find(destination => destination.id === propsDestinationId);\n\n      if (_selectedDestination) {\n        _destination = _selectedDestination;\n      }\n    }\n\n    this.state = {\n      selectedSources: [],\n      destination: _destination,\n      refinedSourceList: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      sourcesListStore\n    } = this.props;\n    const {\n      refinedSourceList,\n      destination\n    } = this.state;\n    const destinationId = destination.id;\n    const sourcesList = sourcesListStore.sources;\n\n    for (let sourceCount = 0; sourceCount < sourcesList.length; sourceCount++) {\n      var check = true;\n\n      for (let i = 0; i < sourcesList[sourceCount].destinations.length; i++) {\n        if (sourcesList[sourceCount].destinations[i].id === destinationId) {\n          check = false;\n        }\n      }\n\n      if (check === true) {\n        refinedSourceList.push(sourcesList[sourceCount]);\n      }\n    }\n\n    this.setState({\n      refinedSourceList\n    });\n  }\n\n  render() {\n    const {\n      selectedSources,\n      destination,\n      refinedSourceList\n    } = this.state;\n    return React.createElement(StyledContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(HeaderDiv, {\n      className: \"p-b-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(AddDestDialogBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      justifyContentCenter: true,\n      className: \"p-t-lg\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(DottedCircle, {\n      solid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(Flex, {\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.selectedSources.map((source, index) => {\n      return React.createElement(IconCircle, {\n        name: source.sourceDef.name,\n        listIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"p-l-sm p-r-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      name: \"forward-thick\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(IconCircle, {\n      name: destination.destinationDefinition.name,\n      destination: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(HeaderDiv, {\n      className: \"text-center p-t-md\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Connect Sources\"), this.renderIconCardListContainer(), this.renderModalFooter()));\n  }\n\n}, _temp)) || _class) || _class);\nexport default withTheme(withRouter(ConnectSources));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/connectSources/index.tsx"],"names":["DottedCircle","IconCircle","Flex","HeaderDiv","IconCardList","EmptySourceCard","Svg","inject","observer","React","withRouter","withTheme","AddDestDialogBody","IconCardListContainer","StyledContainer","BorderLine","ButtonSecondary","ConnectSources","Component","constructor","props","handleSourceSelection","selectedMap","sourceIds","Object","keys","filter","k","length","setState","enableNextButton","selectedSources","sourcesListStore","sources","source","indexOf","id","handleCancel","history","goBack","push","handleSubmit","destination","state","destinationId","destinationsListStore","selectedDestination","destinations","find","createDestinationConnections","map","renderIconCardListContainer","refinedSourceList","destinationDefinition","config","sourceType","type","sourceDef","name","title","selected","renderModalFooter","propsDestinationId","match","params","undefined","componentDidMount","sourcesList","sourceCount","check","i","render","index"],"mappings":"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","sourcesContent":["import { DottedCircle, IconCircle } from '@components/common/dottedCircle';\nimport { Flex } from '@components/common/misc';\nimport { HeaderDiv, TextDiv } from '@components/common/typography';\nimport IconCardList from '@components/iconCardList';\nimport EmptySourceCard from '@components/sourceCard/emptySourceCard';\nimport { IDestinationsListStore } from '@stores/destinationsList';\nimport { ISourceStore } from '@stores/source';\nimport { ISourcesListStore } from '@stores/sourcesList';\nimport Svg from '@svg/index';\nimport { inject, observer } from 'mobx-react';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { withTheme } from 'styled-components';\n\nimport {\n  AddDestDialogBody,\n  IconCardListContainer,\n  StyledContainer,\n  BorderLine,\n} from './styles';\nimport { ButtonSecondary } from '@components/common/button';\n\nexport interface IConnectSourcesProps extends RouteComponentProps<any> {\n  destinationsListStore: IDestinationsListStore;\n  sourcesListStore: ISourcesListStore;\n  destinationDefId?: string;\n  theme: any;\n}\n\n@inject('destinationsListStore', 'sourcesListStore')\n@observer\nclass ConnectSources extends React.Component<IConnectSourcesProps, any> {\n  constructor(props: IConnectSourcesProps) {\n    super(props);\n    const propsDestinationId = props.match.params.id;\n\n    let destination: any = undefined;\n    if (propsDestinationId) {\n      var selectedDestination = props.destinationsListStore.destinations.find(\n        destination => destination.id === propsDestinationId,\n      );\n      if (selectedDestination) {\n        destination = selectedDestination;\n      }\n    }\n    this.state = {\n      selectedSources: [],\n      destination,\n      refinedSourceList: [],\n    };\n  }\n\n  public componentDidMount() {\n    const { sourcesListStore } = this.props;\n    const { refinedSourceList, destination } = this.state;\n    const destinationId = destination.id;\n    const sourcesList = sourcesListStore.sources;\n\n    for (let sourceCount = 0; sourceCount < sourcesList.length; sourceCount++) {\n      var check = true;\n      for (let i = 0; i < sourcesList[sourceCount].destinations.length; i++) {\n        if (sourcesList[sourceCount].destinations[i].id === destinationId) {\n          check = false;\n        }\n      }\n      if (check === true) {\n        refinedSourceList.push(sourcesList[sourceCount]);\n      }\n    }\n    this.setState({ refinedSourceList });\n  }\n\n  public handleSourceSelection = (selectedMap: any) => {\n    let sourceIds = Object.keys(selectedMap).filter(k => selectedMap[k]);\n    if (sourceIds.length < 1) {\n      return this.setState({ enableNextButton: false, selectedSources: [] });\n    }\n    this.setState({\n      selectedSources: this.props.sourcesListStore.sources.filter(\n        source => sourceIds.indexOf(source.id) > -1,\n      ),\n    });\n  };\n\n  public handleCancel = () => {\n    if (this.props.history.length > 2) {\n      this.props.history.goBack();\n    } else {\n      this.props.history.push('/connections');\n    }\n  };\n\n  public handleSubmit = async () => {\n    const { destination, selectedSources } = this.state;\n    let destinationId = destination.id;\n    const { destinationsListStore } = this.props;\n    if (selectedSources.length > 0) {\n      let selectedDestination = destinationsListStore.destinations.find(\n        destination => destination.id === destinationId,\n      );\n      if (selectedDestination) {\n        selectedDestination.sources.push(selectedSources);\n      }\n      await this.props.destinationsListStore.createDestinationConnections(\n        selectedDestination,\n        selectedSources.map((source: any) => source.id),\n      );\n      this.props.history.push(`/`);\n    }\n  };\n\n\n  renderIconCardListContainer = () => {\n    const { selectedSources, destination, refinedSourceList } = this.state;\n    if (refinedSourceList.length > 0) {\n      return (\n        <IconCardListContainer>\n          {this.props.sourcesListStore.sources.length === 0 ? (\n            <Flex justifyContentCenter>\n              <EmptySourceCard destinationId={destination.id} />\n            </Flex>\n          ) : (\n            <IconCardList\n              type=\"source\"\n              selectionMode=\"multi\"\n              destinationDefConfig={\n                destination.destinationDefinition.config.sourceType\n              }\n              icons={refinedSourceList.map((source: any) => ({\n                  id: source.id,\n                  type: source.sourceDef.name,\n                  title: source.name,\n                  selected:\n                    selectedSources.length > 0\n                      ? source.id === selectedSources[0].id\n                        ? true\n                        : false\n                      : false,\n                }))}\n              onSelectionChange={this.handleSourceSelection}\n            />\n          )}\n        </IconCardListContainer>\n      );\n    }\n    return (\n      <IconCardListContainer>\n        <Flex justifyContentCenter>\n          <EmptySourceCard destinationId={destination.id} />\n        </Flex>\n      </IconCardListContainer>\n    );\n  };\n\n  renderModalFooter = () => {\n    const { selectedSources, destination, refinedSourceList } = this.state;\n    if (refinedSourceList.length > 0) {\n      return (\n        <>\n          <BorderLine />\n          <Flex flexDirection=\"row\" spaceBetween className=\"p-h-md p-v-xs\">\n            <ButtonSecondary onClick={this.handleCancel}>\n              Cancel\n            </ButtonSecondary>\n            <ButtonSecondary onClick={this.handleSubmit}>\n              Submit\n            </ButtonSecondary>\n          </Flex>\n        </>\n      );\n    }\n  };\n\n  public render() {\n    const { selectedSources, destination, refinedSourceList } = this.state;\n    return (\n      <StyledContainer>\n        <HeaderDiv className=\"p-b-lg\"></HeaderDiv>\n        <AddDestDialogBody>\n          <Flex justifyContentCenter className=\"p-t-lg\" alignItems=\"center\">\n            <DottedCircle solid />\n            <Flex alignItems=\"center\">\n              {this.state.selectedSources.map(\n                (source: ISourceStore, index: number) => {\n                  return (\n                    <IconCircle\n                      name={source.sourceDef.name}\n                      listIndex={index}\n                    />\n                  );\n                },\n              )}\n            </Flex>\n            <div className=\"p-l-sm p-r-sm\">\n              <Svg name=\"forward-thick\" />\n            </div>\n            <IconCircle\n              name={destination.destinationDefinition.name}\n              destination\n            />\n          </Flex>\n          <HeaderDiv className=\"text-center p-t-md\">Connect Sources</HeaderDiv>\n          {this.renderIconCardListContainer()}\n          {this.renderModalFooter()}\n        </AddDestDialogBody>\n      </StyledContainer>\n    );\n  }\n}\n\nexport default withTheme(withRouter(ConnectSources));\n"]},"metadata":{},"sourceType":"module"}