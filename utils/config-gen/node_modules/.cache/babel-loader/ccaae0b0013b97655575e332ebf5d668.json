{"ast":null,"code":"/*!\n * set-value <https://github.com/jonschlinkert/set-value>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nconst isPlain = require('is-plain-object');\n\nfunction set(target, path, value, options) {\n  if (!isObject(target)) {\n    return target;\n  }\n\n  let opts = options || {};\n  const isArray = Array.isArray(path);\n\n  if (!isArray && typeof path !== 'string') {\n    return target;\n  }\n\n  let merge = opts.merge;\n\n  if (merge && typeof merge !== 'function') {\n    merge = Object.assign;\n  }\n\n  const keys = (isArray ? path : split(path, opts)).filter(isValidKey);\n  const len = keys.length;\n  const orig = target;\n\n  if (!options && keys.length === 1) {\n    result(target, keys[0], value, merge);\n    return target;\n  }\n\n  for (let i = 0; i < len; i++) {\n    let prop = keys[i];\n\n    if (!isObject(target[prop])) {\n      target[prop] = {};\n    }\n\n    if (i === len - 1) {\n      result(target, prop, value, merge);\n      break;\n    }\n\n    target = target[prop];\n  }\n\n  return orig;\n}\n\nfunction result(target, path, value, merge) {\n  if (merge && isPlain(target[path]) && isPlain(value)) {\n    target[path] = merge({}, target[path], value);\n  } else {\n    target[path] = value;\n  }\n}\n\nfunction split(path, options) {\n  const id = createKey(path, options);\n  if (set.memo[id]) return set.memo[id];\n  const char = options && options.separator ? options.separator : '.';\n  let keys = [];\n  let res = [];\n\n  if (options && typeof options.split === 'function') {\n    keys = options.split(path);\n  } else {\n    keys = path.split(char);\n  }\n\n  for (let i = 0; i < keys.length; i++) {\n    let prop = keys[i];\n\n    while (prop && prop.slice(-1) === '\\\\' && keys[i + 1]) {\n      prop = prop.slice(0, -1) + char + keys[++i];\n    }\n\n    res.push(prop);\n  }\n\n  set.memo[id] = res;\n  return res;\n}\n\nfunction createKey(pattern, options) {\n  let id = pattern;\n\n  if (typeof options === 'undefined') {\n    return id + '';\n  }\n\n  const keys = Object.keys(options);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    id += ';' + key + '=' + String(options[key]);\n  }\n\n  return id;\n}\n\nfunction isValidKey(key) {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}\n\nfunction isObject(val) {\n  return val !== null && (typeof val === 'object' || typeof val === 'function');\n}\n\nset.memo = {};\nmodule.exports = set;","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/set-value/index.js"],"names":["isPlain","require","set","target","path","value","options","isObject","opts","isArray","Array","merge","Object","assign","keys","split","filter","isValidKey","len","length","orig","result","i","prop","id","createKey","memo","char","separator","res","slice","push","pattern","key","String","val","module","exports"],"mappings":"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","sourcesContent":["/*!\n * set-value <https://github.com/jonschlinkert/set-value>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst isPlain = require('is-plain-object');\n\nfunction set(target, path, value, options) {\n  if (!isObject(target)) {\n    return target;\n  }\n\n  let opts = options || {};\n  const isArray = Array.isArray(path);\n  if (!isArray && typeof path !== 'string') {\n    return target;\n  }\n\n  let merge = opts.merge;\n  if (merge && typeof merge !== 'function') {\n    merge = Object.assign;\n  }\n\n  const keys = (isArray ? path : split(path, opts)).filter(isValidKey);\n  const len = keys.length;\n  const orig = target;\n\n  if (!options && keys.length === 1) {\n    result(target, keys[0], value, merge);\n    return target;\n  }\n\n  for (let i = 0; i < len; i++) {\n    let prop = keys[i];\n\n    if (!isObject(target[prop])) {\n      target[prop] = {};\n    }\n\n    if (i === len - 1) {\n      result(target, prop, value, merge);\n      break;\n    }\n\n    target = target[prop];\n  }\n\n  return orig;\n}\n\nfunction result(target, path, value, merge) {\n  if (merge && isPlain(target[path]) && isPlain(value)) {\n    target[path] = merge({}, target[path], value);\n  } else {\n    target[path] = value;\n  }\n}\n\nfunction split(path, options) {\n  const id = createKey(path, options);\n  if (set.memo[id]) return set.memo[id];\n\n  const char = (options && options.separator) ? options.separator : '.';\n  let keys = [];\n  let res = [];\n\n  if (options && typeof options.split === 'function') {\n    keys = options.split(path);\n  } else {\n    keys = path.split(char);\n  }\n\n  for (let i = 0; i < keys.length; i++) {\n    let prop = keys[i];\n    while (prop && prop.slice(-1) === '\\\\' && keys[i + 1]) {\n      prop = prop.slice(0, -1) + char + keys[++i];\n    }\n    res.push(prop);\n  }\n  set.memo[id] = res;\n  return res;\n}\n\nfunction createKey(pattern, options) {\n  let id = pattern;\n  if (typeof options === 'undefined') {\n    return id + '';\n  }\n  const keys = Object.keys(options);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    id += ';' + key + '=' + String(options[key]);\n  }\n  return id;\n}\n\nfunction isValidKey(key) {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}\n\nfunction isObject(val) {\n  return val !== null && (typeof val === 'object' || typeof val === 'function');\n}\n\nset.memo = {};\nmodule.exports = set;\n"]},"metadata":{},"sourceType":"script"}