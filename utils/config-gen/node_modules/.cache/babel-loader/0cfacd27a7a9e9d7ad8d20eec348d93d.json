{"ast":null,"code":"import \"antd/es/popover/style\";\nimport _Popover from \"antd/es/popover\";\nimport \"antd/es/switch/style\";\nimport _Switch from \"antd/es/switch\";\nimport \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationDetails/destinationView/index.tsx\",\n    _class,\n    _class2,\n    _temp;\n\nimport { Button, ButtonSmall } from '@components/common/button';\nimport Svg from '@svg/index';\nimport { observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { DestinationContent, DestinationDetails, DestinationDetailsContentText, DestinationDetailsSourceId, DestinationDetailsTitleText, DestinationEnabled, DestinationHeading, DestinationModalView, DestinationNameBody, DestinationNameText, DestinationNameTitle, IconColumn, Settings, TextView } from './styles';\nimport EditDestination from '../editDestination';\nimport DestinationIcon from '@components/icons/destinationIcon';\nimport { Flex } from '@components/common/misc';\nimport { computed } from 'mobx';\nimport ModalEl from '@components/common/modal';\nconst hoverTitle = 'INFO';\nconst hoverBody = React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, \"Destination has \", React.createElement(\"b\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, \"active sources\"), \", \", React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), \"delete the connections before deleting this destination\");\nconst modalTitle = 'CONFIRM DELETION';\n\nlet DestinationView = observer(_class = (_class2 = (_temp = class DestinationView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteDestination = destination => {\n      console.log('destination is to be deleted');\n      console.log(destination.name);\n      this.setState({\n        isDeleteModalVisible: true\n      });\n    };\n\n    this.handleOnChange = (checked, event) => {\n      this.props.destination.toggleEnabled();\n    };\n\n    this.openSettingsDrawer = () => {\n      this.setState({\n        isSettingsDrawerVisible: true\n      });\n    };\n\n    this.handleDrawerCancel = () => {\n      this.setState({\n        isSettingsDrawerVisible: false\n      });\n    };\n\n    this.renderDestinationDetails = () => {\n      const {\n        destination\n      } = this.props;\n      const detailsObj = {\n        'DESTINATION ID': destination.id\n      };\n      return React.createElement(DestinationDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, Object.keys(detailsObj).map(item => {\n        return React.createElement(DestinationDetailsSourceId, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(DestinationDetailsTitleText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, item), React.createElement(DestinationDetailsContentText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, detailsObj[item]));\n      }));\n    };\n\n    this.handleModalOk = () => {\n      this.setState({\n        isDeleteModalVisible: false\n      });\n      this.props.deleteDestination(this.props.destination);\n    };\n\n    this.handleModalCancel = () => {\n      this.setState({\n        isDeleteModalVisible: false\n      });\n    };\n\n    this.state = {\n      isSettingsDrawerVisible: false,\n      isDeleteModalVisible: false\n    };\n  }\n\n  get isDestinationConnected() {\n    return this.props.destination.sources.length > 0;\n  }\n\n  getModalText() {\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '10vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Are you sure to delete destination \\xA0\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.props.destination.name), \"?\", ' '));\n  }\n\n  render() {\n    const {\n      destination\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(ModalEl, {\n      title: modalTitle,\n      showModal: this.state.isDeleteModalVisible,\n      handleOk: this.handleModalOk,\n      handleCancel: this.handleModalCancel,\n      okText: 'Confirm',\n      element: this.getModalText(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(DestinationModalView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(_Drawer, {\n      visible: this.state.isSettingsDrawerVisible,\n      onClose: this.handleDrawerCancel,\n      width: 'fit-content',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(EditDestination, {\n      destination: destination,\n      onSaveClicked: this.handleDrawerCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), React.createElement(DestinationContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(IconColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(DestinationIcon, {\n      destination: destination.destinationDefinition.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })), React.createElement(TextView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(DestinationHeading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(DestinationNameTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"ANALYTICS\"), React.createElement(Flex, {\n      flexDirection: \"row\",\n      margin: \"0, 0, 15px, 0\",\n      spaceBetween: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(DestinationNameBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(DestinationNameText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, destination.name), React.createElement(DestinationEnabled, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      defaultChecked: destination.enabled,\n      onChange: this.handleOnChange,\n      checked: destination.enabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.renderDestinationDetails()))), React.createElement(Settings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      spaceBetween: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.isDestinationConnected ? React.createElement(_Popover, {\n      content: hoverBody,\n      title: hoverTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(ButtonSmall, {\n      disabled: this.isDestinationConnected,\n      onClick: () => this.deleteDestination(destination),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Delete Destination\")) : React.createElement(ButtonSmall, {\n      disabled: this.isDestinationConnected,\n      onClick: () => this.deleteDestination(destination),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Delete Destination\"), React.createElement(Button, {\n      onClick: this.openSettingsDrawer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      name: \"settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), \"SETTINGS\")))));\n  }\n\n}, _temp), (_applyDecoratedDescriptor(_class2.prototype, \"isDestinationConnected\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"isDestinationConnected\"), _class2.prototype)), _class2)) || _class;\n\nexport { DestinationView as default };","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationDetails/destinationView/index.tsx"],"names":["Button","ButtonSmall","Svg","observer","React","Component","DestinationContent","DestinationDetails","DestinationDetailsContentText","DestinationDetailsSourceId","DestinationDetailsTitleText","DestinationEnabled","DestinationHeading","DestinationModalView","DestinationNameBody","DestinationNameText","DestinationNameTitle","IconColumn","Settings","TextView","EditDestination","DestinationIcon","Flex","computed","ModalEl","hoverTitle","hoverBody","modalTitle","DestinationView","constructor","props","deleteDestination","destination","console","log","name","setState","isDeleteModalVisible","handleOnChange","checked","event","toggleEnabled","openSettingsDrawer","isSettingsDrawerVisible","handleDrawerCancel","renderDestinationDetails","detailsObj","id","Object","keys","map","item","handleModalOk","handleModalCancel","state","isDestinationConnected","sources","length","getModalText","display","justifyContent","alignItems","height","render","destinationDefinition","enabled"],"mappings":"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","sourcesContent":["import { Button, ButtonSmall } from '@components/common/button';\nimport { IDestinationStore } from '@stores/destination';\nimport Svg from '@svg/index';\nimport { Switch, Drawer, Popover } from 'antd';\nimport { observer } from 'mobx-react';\nimport React, { Component } from 'react';\n\nimport {\n  DestinationContent,\n  DestinationDetails,\n  DestinationDetailsContentText,\n  DestinationDetailsSourceId,\n  DestinationDetailsTitleText,\n  DestinationEnabled,\n  DestinationHeading,\n  DestinationModalView,\n  DestinationNameBody,\n  DestinationNameText,\n  DestinationNameTitle,\n  IconColumn,\n  IconSpacing,\n  Settings,\n  TextView,\n} from './styles';\nimport EditDestination from '../editDestination';\nimport DestinationIcon from '@components/icons/destinationIcon';\nimport { Flex } from '@components/common/misc';\nimport { computed } from 'mobx';\nimport ModalEl from '@components/common/modal';\n\ninterface IDestiantionViewProps {\n  destination?: IDestinationStore;\n  deleteDestination?: (destination: IDestinationStore) => any;\n}\ninterface IDestiantionViewState {\n  isSettingsDrawerVisible: boolean;\n  isDeleteModalVisible: boolean;\n}\n\nconst hoverTitle = 'INFO';\nconst hoverBody = (\n  <p>\n    Destination has <b>active sources</b>, <br />\n    delete the connections before deleting this destination\n  </p>\n);\n\nconst modalTitle = 'CONFIRM DELETION';\n\n@observer\nexport default class DestinationView extends Component<\n  IDestiantionViewProps,\n  IDestiantionViewState\n> {\n  constructor(props: IDestiantionViewProps) {\n    super(props);\n    this.state = {\n      isSettingsDrawerVisible: false,\n      isDeleteModalVisible: false,\n    };\n  }\n\n  @computed get isDestinationConnected() {\n    return this.props.destination!.sources.length > 0;\n  }\n\n  deleteDestination = (destination: IDestinationStore) => {\n    console.log('destination is to be deleted');\n    console.log(destination.name);\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  handleOnChange = (checked: boolean, event: Event) => {\n    this.props.destination!.toggleEnabled();\n  };\n\n  openSettingsDrawer = () => {\n    this.setState({ isSettingsDrawerVisible: true });\n  };\n\n  handleDrawerCancel = () => {\n    this.setState({ isSettingsDrawerVisible: false });\n  };\n\n  renderDestinationDetails = () => {\n    const { destination } = this.props;\n    const detailsObj: any = {\n      'DESTINATION ID': destination!.id,\n    };\n    return (\n      <DestinationDetails>\n        {Object.keys(detailsObj).map(item => {\n          return (\n            <DestinationDetailsSourceId>\n              <DestinationDetailsTitleText>{item}</DestinationDetailsTitleText>\n              <DestinationDetailsContentText>\n                {detailsObj[item]}\n              </DestinationDetailsContentText>\n            </DestinationDetailsSourceId>\n          );\n        })}\n      </DestinationDetails>\n    );\n  };\n\n  handleModalOk = () => {\n    this.setState({ isDeleteModalVisible: false });\n    this.props.deleteDestination!(this.props.destination!);\n  };\n\n  handleModalCancel = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  getModalText() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '10vh',\n        }}\n      >\n        <p>\n          Are you sure to delete destination &nbsp;\n          <b>{this.props.destination!.name}</b>?{' '}\n        </p>\n      </div>\n    );\n  }\n\n  public render() {\n    const { destination } = this.props;\n    return (\n      <div>\n        <ModalEl\n          title={modalTitle}\n          showModal={this.state.isDeleteModalVisible}\n          handleOk={this.handleModalOk}\n          handleCancel={this.handleModalCancel}\n          okText={'Confirm'}\n          element={this.getModalText()}\n        />\n        <DestinationModalView>\n          <Drawer\n            visible={this.state.isSettingsDrawerVisible}\n            onClose={this.handleDrawerCancel}\n            width={'fit-content'}\n          >\n            <EditDestination\n              destination={destination}\n              onSaveClicked={this.handleDrawerCancel}\n            ></EditDestination>\n          </Drawer>\n          <DestinationContent>\n            <IconColumn>\n              <DestinationIcon\n                destination={destination!.destinationDefinition.name}\n              />\n            </IconColumn>\n\n            <TextView>\n              <DestinationHeading>\n                <DestinationNameTitle>ANALYTICS</DestinationNameTitle>\n                <Flex flexDirection=\"row\" margin=\"0, 0, 15px, 0\" spaceBetween>\n                  <DestinationNameBody>\n                    <DestinationNameText>\n                      {destination!.name}\n                    </DestinationNameText>\n                    <DestinationEnabled>\n                      <Switch\n                        defaultChecked={destination!.enabled}\n                        onChange={this.handleOnChange}\n                        checked={destination!.enabled}\n                      />\n                    </DestinationEnabled>\n                  </DestinationNameBody>\n                </Flex>\n              </DestinationHeading>\n\n              <div>{this.renderDestinationDetails()}</div>\n            </TextView>\n          </DestinationContent>\n\n          <Settings>\n            <Flex flexDirection=\"row\" alignItems=\"center\" spaceBetween>\n              {this.isDestinationConnected ? (\n                <Popover content={hoverBody} title={hoverTitle}>\n                  <ButtonSmall\n                    disabled={this.isDestinationConnected}\n                    onClick={() => this.deleteDestination(destination!)}\n                  >\n                    Delete Destination\n                  </ButtonSmall>\n                </Popover>\n              ) : (\n                <ButtonSmall\n                  disabled={this.isDestinationConnected}\n                  onClick={() => this.deleteDestination(destination!)}\n                >\n                  Delete Destination\n                </ButtonSmall>\n              )}\n              <Button onClick={this.openSettingsDrawer}>\n                <Svg name=\"settings\" />\n                SETTINGS\n              </Button>\n            </Flex>\n          </Settings>\n        </DestinationModalView>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}