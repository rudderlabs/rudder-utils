{"ast":null,"code":"import _initializerDefineProperty from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { action, observable } from 'mobx';\nexport let MessagesStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, _dec6 = action.bound, _dec7 = action.bound, (_class = (_temp = class MessagesStore {\n  constructor() {\n    _initializerDefineProperty(this, \"isError\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"isSuccess\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"infoString\", _descriptor3, this);\n\n    this.isError = false;\n    this.isSuccess = false;\n    this.infoString = '';\n  }\n\n  setError(value) {\n    this.isError = value;\n  }\n\n  setSuccess(value) {\n    this.isSuccess = value;\n  }\n\n  setInfoString(value) {\n    this.infoString = value;\n  }\n\n  showSuccessMessage(infoString) {\n    this.setInfoString(infoString);\n    this.setSuccess(true);\n    setTimeout(() => {\n      if (this.isSuccess === true) {\n        this.setInfoString('');\n        this.setSuccess(false);\n      }\n    }, 3000);\n  }\n\n  removeSuccessMessage() {\n    this.setSuccess(false);\n  }\n\n  showErrorMessage(infoString) {\n    this.setInfoString(infoString);\n    this.setError(true);\n    setTimeout(() => {\n      if (this.isError === true) {\n        this.setInfoString('');\n        this.setError(false);\n      }\n    }, 3000);\n  }\n\n  removeErrorMessage() {\n    this.setError(false);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"isSuccess\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"infoString\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"setError\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setError\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSuccess\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"setSuccess\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setInfoString\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"setInfoString\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"showSuccessMessage\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"showSuccessMessage\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeSuccessMessage\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \"removeSuccessMessage\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"showErrorMessage\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \"showErrorMessage\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeErrorMessage\", [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, \"removeErrorMessage\"), _class.prototype)), _class));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/stores/messages.ts"],"names":["action","observable","MessagesStore","bound","constructor","isError","isSuccess","infoString","setError","value","setSuccess","setInfoString","showSuccessMessage","setTimeout","removeSuccessMessage","showErrorMessage","removeErrorMessage"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAA2BC,UAA3B,QAA8D,MAA9D;AAeA,WAAaC,aAAb,WAWGF,MAAM,CAACG,KAXV,UAgBGH,MAAM,CAACG,KAhBV,UAqBGH,MAAM,CAACG,KArBV,UA0BGH,MAAM,CAACG,KA1BV,UAsCGH,MAAM,CAACG,KAtCV,UA2CGH,MAAM,CAACG,KA3CV,UAuDGH,MAAM,CAACG,KAvDV,qBAAO,MAAMD,aAAN,CAA6C;AAKlDE,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AACZ,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAGMC,EAAAA,QADP,CACgBC,KADhB,EACsC;AACpC,SAAKJ,OAAL,GAAeI,KAAf;AACD;;AAGMC,EAAAA,UADP,CACkBD,KADlB,EACwC;AACtC,SAAKH,SAAL,GAAiBG,KAAjB;AACD;;AAGME,EAAAA,aADP,CACqBF,KADrB,EAC0C;AACxC,SAAKF,UAAL,GAAkBE,KAAlB;AACD;;AAGMG,EAAAA,kBADP,CAC0BL,UAD1B,EAC8C;AAC5C,SAAKI,aAAL,CAAmBJ,UAAnB;AACA,SAAKG,UAAL,CAAgB,IAAhB;AACAG,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,KAAKP,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,aAAKK,aAAL,CAAmB,EAAnB;AACA,aAAKD,UAAL,CAAgB,KAAhB;AACD;AACF,KALS,EAKP,IALO,CAAV;AAMD;;AAGMI,EAAAA,oBADP,GAC8B;AAC5B,SAAKJ,UAAL,CAAgB,KAAhB;AACD;;AAGMK,EAAAA,gBADP,CACwBR,UADxB,EAC4C;AAC1C,SAAKI,aAAL,CAAmBJ,UAAnB;AACA,SAAKC,QAAL,CAAc,IAAd;AACAK,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,KAAKR,OAAL,KAAiB,IAArB,EAA2B;AACzB,aAAKM,aAAL,CAAmB,EAAnB;AACA,aAAKH,QAAL,CAAc,KAAd;AACD;AACF,KALS,EAKP,IALO,CAAV;AAMD;;AAGMQ,EAAAA,kBADP,GAC4B;AAC1B,SAAKR,QAAL,CAAc,KAAd;AACD;;AA1DiD,CAApD,iFACGP,UADH;AAAA;AAAA;AAAA;AAAA;AAAA,6EAEGA,UAFH;AAAA;AAAA;AAAA;AAAA;AAAA,8EAGGA,UAHH;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { action, computed, observable, reaction, trace } from 'mobx';\n\nexport interface IMessageStore {\n  isError: boolean;\n  isSuccess: boolean;\n  infoString: string;\n  setError(value: boolean): void;\n  setSuccess(value: boolean): void;\n  setInfoString(value: string): void;\n  showSuccessMessage(value: string): void;\n  showErrorMessage(value: string): void;\n  removeSuccessMessage(): void;\n  removeErrorMessage(): void;\n}\n\nexport class MessagesStore implements IMessageStore {\n  @observable public isError: boolean;\n  @observable public isSuccess: boolean;\n  @observable public infoString: string;\n\n  constructor() {\n    this.isError = false;\n    this.isSuccess = false;\n    this.infoString = '';\n  }\n\n  @action.bound\n  public setError(value: boolean): void {\n    this.isError = value;\n  }\n\n  @action.bound\n  public setSuccess(value: boolean): void {\n    this.isSuccess = value;\n  }\n\n  @action.bound\n  public setInfoString(value: string): void {\n    this.infoString = value;\n  }\n\n  @action.bound\n  public showSuccessMessage(infoString: string) {\n    this.setInfoString(infoString);\n    this.setSuccess(true);\n    setTimeout(() => {\n      if (this.isSuccess === true) {\n        this.setInfoString('');\n        this.setSuccess(false);\n      }\n    }, 3000);\n  }\n\n  @action.bound\n  public removeSuccessMessage() {\n    this.setSuccess(false);\n  }\n\n  @action.bound\n  public showErrorMessage(infoString: string) {\n    this.setInfoString(infoString);\n    this.setError(true);\n    setTimeout(() => {\n      if (this.isError === true) {\n        this.setInfoString('');\n        this.setError(false);\n      }\n    }, 3000);\n  }\n\n  @action.bound\n  public removeErrorMessage() {\n    this.setError(false);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}