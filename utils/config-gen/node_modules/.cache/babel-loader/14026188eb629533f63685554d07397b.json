{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/connections/index.tsx\";\n\nimport { HeaderDiv } from '@components/common/typography';\nimport DestinationsList from '@components/destinationsList';\nimport SourcesList from '@components/sourcesList';\nimport theme from '@css/theme';\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { BodyContainer, Container, Heading, ImportConfigContainer, ImportInputButton } from './styles';\nimport { Flex } from '@components/common/misc';\nimport { ButtonPrimary } from '../common/button';\nimport { version } from '@services/version';\n\nvar fileDownload = require('js-file-download');\n\nlet Connections = (_dec = inject('sourcesListStore', 'destinationsListStore', 'sourceDefinitionsListStore', 'destinationDefsListStore', 'connectionsStore'), _dec(_class = observer(_class = (_temp = class Connections extends Component {\n  constructor(props) {\n    super(props);\n    this.linesMap = void 0;\n\n    this.drawSourceConnectionLines = () => {\n      let existingCombos = Object.keys(this.linesMap);\n      let combos = [];\n      this.props.sourcesListStore.sources.forEach(source => {\n        source.destinations.forEach(dest => combos.push(`${source.id}-${dest.id}`));\n      });\n      existingCombos.forEach(c => {\n        if (!combos.includes(c)) {\n          this.linesMap[c].remove();\n        }\n      });\n      combos.forEach(c => {\n        if (!existingCombos.includes(c)) {\n          let line = new LeaderLine(document.getElementById(`fake-source-${c.split('-')[0]}`), document.getElementById(`fake-destination-${c.split('-')[1]}`), {\n            endPlug: 'behind',\n            color: theme.color.grey100,\n            size: 4\n          });\n          this.linesMap[c] = line;\n        }\n      });\n    };\n\n    this.removeSourceConnectionLines = () => {\n      Object.values(this.linesMap).forEach(l => l.remove());\n    };\n\n    this.handleExportWorkspaceConfig = () => {\n      const workspaceConfig = {\n        sources: [],\n        metadata: {\n          sourceListStore: this.props.sourcesListStore.returnWithoutRootStore(),\n          destinationListStore: this.props.destinationsListStore.returnWithoutRootStore(),\n          connectionsStore: this.props.connectionsStore.returnWithoutRootStore(),\n          version\n        }\n      };\n      this.props.sourcesListStore.sources.forEach(source => {\n        let obj = {\n          config: source.config,\n          id: source.id,\n          name: source.name,\n          writeKey: source.writeKey,\n          enabled: source.enabled,\n          sourceDefinitionId: source.sourceDefinitionId,\n          deleted: false,\n          createdAt: Date(),\n          updatedAt: Date(),\n          sourceDefinition: source.sourceDef,\n          destinations: source.destinations.map(dest => {\n            return { ...dest,\n              isProcessorEnabled: dest.enabled && source.enabled && !dest.config.useNativeSDK && !dest.destinationDefinition.config.deviceModeOnly,\n              rootStore: null\n            };\n          })\n        };\n        workspaceConfig.sources.push(obj);\n      });\n      fileDownload(JSON.stringify(workspaceConfig, null, 2), 'workspaceConfig.json');\n    };\n\n    this.handleFileChosen = event => {\n      const file = event.target.files[0];\n      let fileReader = new FileReader();\n\n      fileReader.onloadend = e => {\n        const content = fileReader.result;\n        this.setupWorkspace(content);\n      };\n\n      fileReader.readAsText(file);\n    };\n\n    this.setupWorkspace = jsonContent => {\n      const content = JSON.parse(jsonContent);\n      this.props.sourcesListStore.loadImportedFile(content.metadata.sourceListStore.sources);\n      this.props.destinationsListStore.loadImportedFile(content.metadata.destinationListStore.destinations);\n      this.props.connectionsStore.loadImportedFile(content.metadata.connectionsStore.connections);\n      this.props.connectionsStore.setConnections(content.sources);\n    };\n\n    this.linesMap = {};\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.drawSourceConnectionLines();\n  }\n\n  componentWillUnmount() {\n    this.removeSourceConnectionLines();\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Heading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"row\",\n      spaceBetween: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(HeaderDiv, {\n      color: theme.color.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Connections\"), React.createElement(Flex, {\n      flexDirection: \"row\",\n      style: {\n        justifyContent: 'space-around'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(ButtonPrimary, {\n      onClick: this.handleExportWorkspaceConfig,\n      style: {\n        height: '40px',\n        fontSize: theme.fontSize.sm\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Export\"), React.createElement(ImportInputButton, {\n      type: \"file\",\n      name: \"file\",\n      onChange: this.handleFileChosen,\n      id: \"myuniqueid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(ImportConfigContainer, {\n      htmlFor: \"myuniqueid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"IMPORT\")))), React.createElement(BodyContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(SourcesList, {\n      linesMap: this.linesMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(DestinationsList, {\n      linesMap: this.linesMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))));\n  }\n\n}, _temp)) || _class) || _class);\nexport default Connections;","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/connections/index.tsx"],"names":["HeaderDiv","DestinationsList","SourcesList","theme","inject","observer","React","Component","BodyContainer","Container","Heading","ImportConfigContainer","ImportInputButton","Flex","ButtonPrimary","version","fileDownload","require","Connections","constructor","props","linesMap","drawSourceConnectionLines","existingCombos","Object","keys","combos","sourcesListStore","sources","forEach","source","destinations","dest","push","id","c","includes","remove","line","LeaderLine","document","getElementById","split","endPlug","color","grey100","size","removeSourceConnectionLines","values","l","handleExportWorkspaceConfig","workspaceConfig","metadata","sourceListStore","returnWithoutRootStore","destinationListStore","destinationsListStore","connectionsStore","obj","config","name","writeKey","enabled","sourceDefinitionId","deleted","createdAt","Date","updatedAt","sourceDefinition","sourceDef","map","isProcessorEnabled","useNativeSDK","destinationDefinition","deviceModeOnly","rootStore","JSON","stringify","handleFileChosen","event","file","target","files","fileReader","FileReader","onloadend","e","content","result","setupWorkspace","readAsText","jsonContent","parse","loadImportedFile","connections","setConnections","state","componentDidMount","componentWillUnmount","render","primary","justifyContent","height","fontSize","sm"],"mappings":"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","sourcesContent":["import { HeaderDiv, LabelSmall, Text } from '@components/common/typography';\nimport DestinationsList from '@components/destinationsList';\nimport SourcesList from '@components/sourcesList';\nimport theme from '@css/theme';\nimport { IDestinationsListStore } from '@stores/destinationsList';\nimport { ISourceDefinitionsListStore } from '@stores/sourceDefinitionsList';\nimport { ISourcesListStore } from '@stores/sourcesList';\nimport { IConnectionsStore } from '@stores/connections';\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\n\nimport {\n  BodyContainer,\n  Container,\n  Heading,\n  ImportConfigContainer,\n  ImportInputButton,\n} from './styles';\nimport { Flex } from '@components/common/misc';\nimport { ButtonSmall } from '@components/common/button';\nimport { IDestinationDefsListStore } from '../../stores/destinationDefsList';\nimport { ButtonPrimary } from '../common/button';\nimport { version } from '@services/version';\nvar fileDownload = require('js-file-download');\n\ndeclare var LeaderLine: any;\n\ninterface IConnectionsProps {\n  sourcesListStore: ISourcesListStore;\n  destinationsListStore: IDestinationsListStore;\n  sourceDefinitionsListStore: ISourceDefinitionsListStore;\n  destinationDefsListStore: IDestinationDefsListStore;\n  connectionsStore: IConnectionsStore;\n}\n\n@inject(\n  'sourcesListStore',\n  'destinationsListStore',\n  'sourceDefinitionsListStore',\n  'destinationDefsListStore',\n  'connectionsStore',\n)\n@observer\nclass Connections extends Component<IConnectionsProps, any> {\n  linesMap: any;\n\n  constructor(props: IConnectionsProps) {\n    super(props);\n    this.linesMap = {};\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.drawSourceConnectionLines();\n  }\n\n  componentWillUnmount() {\n    this.removeSourceConnectionLines();\n  }\n\n  drawSourceConnectionLines = () => {\n    let existingCombos = Object.keys(this.linesMap);\n    let combos: string[] = [];\n    this.props.sourcesListStore!.sources.forEach(source => {\n      source.destinations.forEach(dest =>\n        combos.push(`${source.id}-${dest.id}`),\n      );\n    });\n    existingCombos.forEach(c => {\n      if (!combos.includes(c)) {\n        this.linesMap[c].remove();\n      }\n    });\n    combos.forEach(c => {\n      if (!existingCombos.includes(c)) {\n        let line = new LeaderLine(\n          document.getElementById(`fake-source-${c.split('-')[0]}`),\n          document.getElementById(`fake-destination-${c.split('-')[1]}`),\n          { endPlug: 'behind', color: theme.color.grey100, size: 4 },\n        );\n        this.linesMap[c] = line;\n      }\n    });\n  };\n\n  removeSourceConnectionLines = () => {\n    Object.values(this.linesMap).forEach((l: any) => l.remove());\n  };\n\n  handleExportWorkspaceConfig = () => {\n    const workspaceConfig = {\n      sources: [] as any,\n      metadata: {\n        sourceListStore: this.props.sourcesListStore.returnWithoutRootStore(),\n        destinationListStore: this.props.destinationsListStore.returnWithoutRootStore(),\n        connectionsStore: this.props.connectionsStore.returnWithoutRootStore(),\n        version,\n      },\n    };\n\n    this.props.sourcesListStore!.sources.forEach(source => {\n      let obj = {\n        config: source.config,\n        id: source.id,\n        name: source.name,\n        writeKey: source.writeKey,\n        enabled: source.enabled,\n        sourceDefinitionId: source.sourceDefinitionId,\n        deleted: false,\n        createdAt: Date(),\n        updatedAt: Date(),\n        sourceDefinition: source.sourceDef,\n        destinations: source.destinations.map(dest => {\n          return {\n            ...dest,\n            isProcessorEnabled:\n              dest.enabled &&\n              source.enabled &&\n              !dest.config.useNativeSDK &&\n              !dest.destinationDefinition.config.deviceModeOnly,\n            rootStore: null,\n          };\n        }),\n      };\n      workspaceConfig.sources.push(obj);\n    });\n    fileDownload(\n      JSON.stringify(workspaceConfig, null, 2),\n      'workspaceConfig.json',\n    );\n  };\n\n  handleFileChosen = (event: any) => {\n    const file = event.target.files[0];\n    let fileReader = new FileReader();\n    fileReader.onloadend = e => {\n      const content = fileReader.result;\n      this.setupWorkspace(content);\n    };\n    fileReader.readAsText(file);\n  };\n\n  setupWorkspace = (jsonContent: any) => {\n    const content = JSON.parse(jsonContent);\n    this.props.sourcesListStore!.loadImportedFile(\n      content.metadata.sourceListStore.sources,\n    );\n    this.props.destinationsListStore!.loadImportedFile(\n      content.metadata.destinationListStore.destinations,\n    );\n    this.props.connectionsStore!.loadImportedFile(\n      content.metadata.connectionsStore.connections,\n    );\n    this.props.connectionsStore!.setConnections(content.sources);\n  };\n\n  public render() {\n    return (\n      <Container>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            <Flex flexDirection=\"row\" spaceBetween>\n              <HeaderDiv color={theme.color.primary}>Connections</HeaderDiv>\n              <Flex\n                flexDirection=\"row\"\n                style={{ justifyContent: 'space-around' }}\n              >\n                <ButtonPrimary\n                  onClick={this.handleExportWorkspaceConfig}\n                  style={{ height: '40px', fontSize: theme.fontSize.sm }}\n                >\n                  Export\n                </ButtonPrimary>\n\n                <ImportInputButton\n                  type=\"file\"\n                  name=\"file\"\n                  onChange={this.handleFileChosen}\n                  id=\"myuniqueid\"\n                />\n                <ImportConfigContainer htmlFor=\"myuniqueid\">\n                  IMPORT\n                </ImportConfigContainer>\n              </Flex>\n            </Flex>\n          </Heading>\n          <BodyContainer>\n            <SourcesList linesMap={this.linesMap} />\n            <DestinationsList linesMap={this.linesMap} />\n          </BodyContainer>\n        </Flex>\n      </Container>\n    );\n  }\n}\n\nexport default Connections;\n"]},"metadata":{},"sourceType":"module"}