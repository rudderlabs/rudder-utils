{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationDetails/index.tsx\";\n\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport DestinationView from './destinationView/index';\nimport SourceView from './sourcesView/index';\nimport { CardsView, Container, PageTitle, Spacing } from './styles';\nlet DestinationDetails = (_dec = inject('sourcesListStore', 'destinationsListStore', 'messagesStore'), _dec(_class = observer(_class = (_temp = class DestinationDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteConnection = async (source, destination) => {\n      const {\n        destinationsListStore,\n        messagesStore\n      } = this.props;\n\n      try {\n        await destinationsListStore.rootStore.connectionsStore.removeConnections(source, destination);\n        messagesStore.showSuccessMessage('Connection deletion successful');\n      } catch (error) {\n        messagesStore.showErrorMessage('Failed to delete connection');\n      }\n    };\n\n    this.deleteDestination = async destination => {\n      const {\n        destinationsListStore,\n        messagesStore\n      } = this.props;\n\n      try {\n        const isSuccess = await destinationsListStore.deleteDestination(destination);\n        console.log('isSuccess', isSuccess);\n\n        if (!isSuccess) {\n          throw Error('not successful');\n        }\n\n        messagesStore.showSuccessMessage('Delete destination successful');\n        this.props.history.push(`/home`);\n      } catch (error) {\n        messagesStore.showErrorMessage('Failed to delete destination');\n      }\n    };\n\n    this.state = {\n      destinationId: props.match && props.match.params.id\n    };\n  }\n\n  render() {\n    const {\n      destinationId\n    } = this.state;\n    const {\n      destinationsListStore\n    } = this.props;\n    const {\n      destinations\n    } = destinationsListStore;\n    const destination = destinations.find(destination => destination.id === destinationId);\n\n    if (destination) {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(PageTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Destination Details\"), React.createElement(CardsView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Spacing, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(DestinationView, {\n        destination: destination,\n        deleteDestination: this.deleteDestination,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(Spacing, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(SourceView, {\n        sources: destination.sources,\n        destination: destination,\n        deleteConnection: this.deleteConnection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(Spacing, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })));\n    }\n\n    return null;\n  }\n\n}, _temp)) || _class) || _class);\nexport default withRouter(DestinationDetails);","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationDetails/index.tsx"],"names":["inject","observer","React","Component","withRouter","DestinationView","SourceView","CardsView","Container","PageTitle","Spacing","DestinationDetails","constructor","props","deleteConnection","source","destination","destinationsListStore","messagesStore","rootStore","connectionsStore","removeConnections","showSuccessMessage","error","showErrorMessage","deleteDestination","isSuccess","console","log","Error","history","push","state","destinationId","match","params","id","render","destinations","find","sources"],"mappings":"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","sourcesContent":["import { IDestinationsListStore } from '@stores/destinationsList';\nimport { ISourcesListStore } from '@stores/sourcesList';\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\nimport DestinationView from './destinationView/index';\nimport SourceView from './sourcesView/index';\nimport { CardsView, Container, PageTitle, Spacing } from './styles';\nimport { ISourceStore } from '@stores/source';\nimport { IDestinationStore } from '@stores/destination';\nimport { IMessageStore } from '@stores/messages';\n\ninterface IConfiguredDestinationsProps extends RouteComponentProps<any> {\n  sourcesListStore: ISourcesListStore;\n  destinationsListStore: IDestinationsListStore;\n  messagesStore: IMessageStore;\n}\n\n@inject('sourcesListStore', 'destinationsListStore', 'messagesStore')\n@observer\nclass DestinationDetails extends Component<IConfiguredDestinationsProps, any> {\n  constructor(props: IConfiguredDestinationsProps) {\n    super(props);\n    this.state = {\n      destinationId: props.match && props.match.params.id,\n    };\n  }\n\n  deleteConnection = async (\n    source: ISourceStore,\n    destination: IDestinationStore,\n  ) => {\n    const { destinationsListStore, messagesStore } = this.props;\n    try {\n      await destinationsListStore.rootStore.connectionsStore.removeConnections(\n        source,\n        destination,\n      );\n      messagesStore.showSuccessMessage('Connection deletion successful');\n    } catch (error) {\n      messagesStore.showErrorMessage('Failed to delete connection');\n    }\n  };\n\n  deleteDestination = async (destination: IDestinationStore) => {\n    const { destinationsListStore, messagesStore } = this.props;\n    try {\n      const isSuccess = await destinationsListStore.deleteDestination(\n        destination,\n      );\n      console.log('isSuccess', isSuccess);\n      if (!isSuccess) {\n        throw Error('not successful');\n      }\n      messagesStore.showSuccessMessage('Delete destination successful');\n      this.props.history.push(`/home`);\n    } catch (error) {\n      messagesStore.showErrorMessage('Failed to delete destination');\n    }\n  };\n\n  public render() {\n    const { destinationId } = this.state;\n    const { destinationsListStore } = this.props;\n    const { destinations } = destinationsListStore;\n    const destination = destinations.find(\n      destination => destination.id === destinationId,\n    );\n    if (destination) {\n      return (\n        <Container>\n          <PageTitle>Destination Details</PageTitle>\n          <CardsView>\n            <Spacing>\n              <DestinationView\n                destination={destination}\n                deleteDestination={this.deleteDestination}\n              />\n            </Spacing>\n            <Spacing>\n              <SourceView\n                sources={destination!.sources}\n                destination={destination}\n                deleteConnection={this.deleteConnection}\n              />\n            </Spacing>\n            <Spacing></Spacing>\n          </CardsView>\n        </Container>\n      );\n    }\n    return null;\n  }\n}\n\nexport default withRouter(DestinationDetails);\n"]},"metadata":{},"sourceType":"module"}