{"ast":null,"code":"import _initializerDefineProperty from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;\n\nimport { action, computed, observable } from 'mobx';\n\nconst get = require('get-value');\n\nconst set = require('set-value');\n\nconst unset = require('unset-value');\n\nexport let DestinationStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, (_class = (_temp = class DestinationStore {\n  constructor(destination, rootStore) {\n    _initializerDefineProperty(this, \"id\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"name\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"enabled\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"config\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"destinationDefinition\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"rootStore\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"state\", _descriptor7, this);\n\n    this.id = destination.id;\n    this.name = destination.name;\n    this.enabled = destination.enabled;\n    this.config = destination.config;\n    this.state = destination.state;\n    this.destinationDefinition = destination.destinationDefinition;\n    this.rootStore = rootStore;\n  }\n\n  setName(name) {\n    this.name = name;\n  }\n\n  get sources() {\n    let sourceIds = [];\n\n    for (var key in this.rootStore.connectionsStore.connections) {\n      if (this.rootStore.connectionsStore.connections[key].indexOf(this.id) > -1) {\n        sourceIds.push(key);\n      }\n    }\n\n    return this.rootStore.sourcesListStore.sources.filter(source => {\n      return sourceIds.indexOf(source.id) > -1;\n    });\n  }\n\n  async toggleEnabled() {\n    if (this.enabled == false && (!this.config || Object.keys(this.config).length === 0)) {\n      alert('Please update your destination settings to enable');\n      return;\n    }\n\n    this.enabled = !this.enabled;\n  }\n\n  async updateConfig(config) {\n    this.config = config;\n  } // Filters based on includeKeys and excludeKeys\n\n\n  filteredConfig() {\n    let filteredConfig = {};\n    const originalConfig = this.config;\n\n    if (!originalConfig) {\n      return;\n    }\n\n    const destinationDefinitionConfig = this.destinationDefinition.config;\n\n    if (destinationDefinitionConfig) {\n      const includeKeysForDestination = destinationDefinitionConfig['includeKeys'];\n\n      for (var j in includeKeysForDestination) {\n        set(filteredConfig, includeKeysForDestination[j], get(originalConfig, includeKeysForDestination[j]));\n      }\n\n      const excludeKeysForDestination = destinationDefinitionConfig['excludeKeys'];\n\n      for (var j in excludeKeysForDestination) {\n        unset(filteredConfig, excludeKeysForDestination[j]);\n      }\n    }\n\n    return filteredConfig;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"id\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"name\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"enabled\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"config\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"destinationDefinition\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"rootStore\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"state\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"setName\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"sources\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"sources\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"toggleEnabled\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleEnabled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateConfig\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"updateConfig\"), _class.prototype)), _class));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/stores/destination.ts"],"names":["action","computed","observable","get","require","set","unset","DestinationStore","bound","constructor","destination","rootStore","id","name","enabled","config","state","destinationDefinition","setName","sources","sourceIds","key","connectionsStore","connections","indexOf","push","sourcesListStore","filter","source","toggleEnabled","Object","keys","length","alert","updateConfig","filteredConfig","originalConfig","destinationDefinitionConfig","includeKeysForDestination","j","excludeKeysForDestination"],"mappings":"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","sourcesContent":["import { action, computed, observable, trace } from 'mobx';\n\nimport { IRootStore } from './index';\nimport { ISourceStore } from './source';\n\nconst get = require('get-value');\nconst set = require('set-value');\nconst unset = require('unset-value');\n\nexport interface IDestinationStore {\n  id: string;\n  name: string;\n  enabled: boolean;\n  config: any;\n  filteredConfig(): any;\n  destinationDefinition: any;\n  sources: ISourceStore[];\n  rootStore: IRootStore;\n  state: string;\n  setName(name: string): void;\n  toggleEnabled(): void;\n  updateConfig(config: any): void;\n}\n\nexport interface IDestinationConfig {\n  trackingId?: string; // For GA\n  apiKey?: string; // For Amplitude\n}\n\nexport class DestinationStore implements IDestinationStore {\n  @observable public id: string;\n  @observable public name: string;\n  @observable public enabled: boolean;\n  @observable public config: any;\n  @observable public destinationDefinition: any;\n  @observable public rootStore: IRootStore;\n  @observable public state: string;\n\n  constructor(destination: IDestinationStore, rootStore: IRootStore) {\n    this.id = destination.id;\n    this.name = destination.name;\n    this.enabled = destination.enabled;\n    this.config = destination.config;\n    this.state = destination.state;\n    this.destinationDefinition = destination.destinationDefinition;\n    this.rootStore = rootStore;\n  }\n\n  @action.bound\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  @computed get sources() {\n    let sourceIds: string[] = [];\n    for (var key in this.rootStore.connectionsStore.connections) {\n      if (\n        this.rootStore.connectionsStore.connections[key].indexOf(this.id) > -1\n      ) {\n        sourceIds.push(key);\n      }\n    }\n    return this.rootStore.sourcesListStore.sources.filter(source => {\n      return sourceIds.indexOf(source.id) > -1;\n    });\n  }\n\n  @action.bound\n  /**\n   * toggleEnabled\n   */\n  public async toggleEnabled() {\n    if (\n      this.enabled == false &&\n      (!this.config || Object.keys(this.config).length === 0)\n    ) {\n      alert('Please update your destination settings to enable');\n      return;\n    }\n    this.enabled = !this.enabled;\n  }\n\n  @action.bound\n  /**\n   * updateConfig\n   */\n  public async updateConfig(config: any) {\n    this.config = config;\n  }\n\n  // Filters based on includeKeys and excludeKeys\n  filteredConfig() {\n    let filteredConfig: any = {};\n    const originalConfig = this.config;\n\n    if (!originalConfig) {\n      return;\n    }\n\n    const destinationDefinitionConfig = this.destinationDefinition.config;\n\n    if (destinationDefinitionConfig) {\n      const includeKeysForDestination =\n        destinationDefinitionConfig['includeKeys'];\n      for (var j in includeKeysForDestination) {\n        set(\n          filteredConfig,\n          includeKeysForDestination[j],\n          get(originalConfig, includeKeysForDestination[j]),\n        );\n      }\n\n      const excludeKeysForDestination =\n        destinationDefinitionConfig['excludeKeys'];\n      for (var j in excludeKeysForDestination) {\n        unset(filteredConfig, excludeKeysForDestination[j]);\n      }\n    }\n\n    return filteredConfig;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}