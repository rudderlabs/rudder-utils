{"ast":null,"code":"import \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationsCatalogue/index.tsx\";\n\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Heading } from '@components/connections/styles';\nimport { HeaderDiv, LabelMedium } from '@components/common/typography';\nimport theme from '@css/theme';\nimport IconCardList from '@components/iconCardList';\nimport DestinationConfigure from './destinationsConfigure/index';\nimport formTemplatesMap from '../destination/destinationSettings/destinationSettings.json';\nlet DestinationsCatalogue = (_dec = inject('destinationDefsListStore'), _dec(_class = observer(_class = (_temp = class DestinationsCatalogue extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCancel = () => {\n      this.setState({\n        modalVisible: false\n      });\n    };\n\n    this.onClick = destinationDef => {\n      // Add a modal and open it on click.\n      this.setState({\n        modalVisible: true,\n        selected: destinationDef\n      });\n    };\n\n    this.state = {\n      modalVisible: false,\n      filteredDestinationDefs: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      destinationDefsListStore\n    } = this.props;\n\n    if (destinationDefsListStore) {\n      const destinationDefs = destinationDefsListStore.destinationDefs;\n      const destinationSettingsArr = Object.keys(formTemplatesMap);\n      const filteredArr = [];\n      destinationDefs.map(def => {\n        if (destinationSettingsArr.includes(def.name)) {\n          filteredArr.push(def);\n        }\n      });\n      this.setState({\n        filteredDestinationDefs: filteredArr\n      });\n    }\n  }\n\n  render() {\n    const {\n      destinationDefsListStore\n    } = this.props;\n    const {\n      selected,\n      filteredDestinationDefs\n    } = this.state;\n\n    if (destinationDefsListStore && filteredDestinationDefs) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(_Drawer, {\n        visible: this.state.modalVisible,\n        onClose: this.handleCancel,\n        width: '40%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(DestinationConfigure, {\n        destinationDef: selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(HeaderDiv, {\n        color: theme.color.primary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Destinations\"), React.createElement(LabelMedium, {\n        color: theme.color.grey300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, destinationDefsListStore.destinationDefs.filter(dest => !dest.config.preview).length, \"\\xA0Available\")), React.createElement(IconCardList, {\n        type: \"destination\",\n        selectionMode: \"none\",\n        icons: filteredDestinationDefs.map(destinationDef => ({\n          id: destinationDef.id,\n          type: destinationDef.name,\n          title: destinationDef.displayName,\n          onClick: () => this.onClick(destinationDef)\n        })),\n        onSelectionChange: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }\n\n}, _temp)) || _class) || _class);\nexport { DestinationsCatalogue as default };","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/destinationsCatalogue/index.tsx"],"names":["React","inject","observer","Heading","HeaderDiv","LabelMedium","theme","IconCardList","DestinationConfigure","formTemplatesMap","DestinationsCatalogue","Component","constructor","props","handleCancel","setState","modalVisible","onClick","destinationDef","selected","state","filteredDestinationDefs","componentDidMount","destinationDefsListStore","destinationDefs","destinationSettingsArr","Object","keys","filteredArr","map","def","includes","name","push","render","color","primary","grey300","filter","dest","config","preview","length","id","type","title","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  IDestinationDefsListStore,\n  IDestinationDef,\n} from '../../stores/destinationDefsList';\nimport { inject, observer } from 'mobx-react';\nimport { Heading } from '@components/connections/styles';\nimport { HeaderDiv, LabelMedium } from '@components/common/typography';\nimport theme from '@css/theme';\nimport IconCardList from '@components/iconCardList';\nimport { Drawer } from 'antd';\nimport DestinationConfigure from './destinationsConfigure/index';\nimport formTemplatesMap from '../destination/destinationSettings/destinationSettings.json';\n\nexport interface IDestinationsCatalogueProps {\n  destinationDefsListStore?: IDestinationDefsListStore;\n}\n\nexport interface IDestinationsCatalogueState {\n  modalVisible: boolean;\n  selected?: IDestinationDef;\n  filteredDestinationDefs?: Array<object>;\n}\n\n@inject('destinationDefsListStore')\n@observer\nexport default class DestinationsCatalogue extends React.Component<\n  IDestinationsCatalogueProps,\n  IDestinationsCatalogueState\n> {\n  constructor(props: IDestinationsCatalogueProps) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      filteredDestinationDefs: [],\n    };\n  }\n  handleCancel = () => {\n    this.setState({ modalVisible: false });\n  };\n  onClick = (destinationDef: any) => {\n    // Add a modal and open it on click.\n    this.setState({ modalVisible: true, selected: destinationDef });\n  };\n\n  componentDidMount() {\n    const { destinationDefsListStore } = this.props;\n\n    if (destinationDefsListStore) {\n      const destinationDefs = destinationDefsListStore!.destinationDefs;\n      const destinationSettingsArr = Object.keys(formTemplatesMap);\n      const filteredArr = [] as Array<object>;\n      destinationDefs.map(def => {\n        if (destinationSettingsArr.includes(def.name)) {\n          filteredArr.push(def);\n        }\n      });\n      this.setState({ filteredDestinationDefs: filteredArr });\n    }\n  }\n\n  public render() {\n    const { destinationDefsListStore } = this.props;\n    const { selected, filteredDestinationDefs } = this.state;\n    if (destinationDefsListStore && filteredDestinationDefs) {\n      return (\n        <div>\n          <Drawer\n            visible={this.state.modalVisible}\n            onClose={this.handleCancel}\n            width={'40%'}\n          >\n            <DestinationConfigure destinationDef={selected} />\n          </Drawer>\n          <Heading>\n            <HeaderDiv color={theme.color.primary}>Destinations</HeaderDiv>\n            <LabelMedium color={theme.color.grey300}>\n              {destinationDefsListStore!.destinationDefs.filter(dest => !dest.config.preview).length}\n              &nbsp;Available\n            </LabelMedium>\n          </Heading>\n          <IconCardList\n            type=\"destination\"\n            selectionMode=\"none\"\n            icons={filteredDestinationDefs.map((destinationDef: any) => ({\n              id: destinationDef.id,\n              type: destinationDef.name,\n              title: destinationDef.displayName,\n              onClick: () => this.onClick(destinationDef),\n            }))}\n            onSelectionChange={() => {}}\n          />\n        </div>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}