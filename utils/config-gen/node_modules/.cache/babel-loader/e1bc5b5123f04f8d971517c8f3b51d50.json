{"ast":null,"code":"import \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourcesCatalogue/index.tsx\";\n\nimport * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Heading } from '@components/connections/styles';\nimport { HeaderDiv, LabelMedium } from '@components/common/typography';\nimport theme from '@css/theme';\nimport IconCardList from '@components/iconCardList';\nimport SourceConfigure from './sourcesConfigure/index';\nlet SourcesCatalogue = (_dec = inject('sourceDefinitionsListStore'), _dec(_class = observer(_class = (_temp = class SourcesCatalogue extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCancel = () => {\n      this.setState({\n        modalVisible: false\n      });\n    };\n\n    this.onClick = sourceDef => {\n      // Add a modal and open it on click.\n      this.setState({\n        modalVisible: true,\n        selected: sourceDef\n      });\n    };\n\n    this.state = {\n      modalVisible: false\n    };\n  }\n\n  render() {\n    const {\n      sourceDefinitionsListStore\n    } = this.props;\n    const {\n      selected\n    } = this.state;\n    if (sourceDefinitionsListStore) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(_Drawer, {\n      visible: this.state.modalVisible,\n      onClose: this.handleCancel,\n      width: '40%',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(SourceConfigure, {\n      sourceDef: selected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(Heading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(HeaderDiv, {\n      color: theme.color.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Sources\"), React.createElement(LabelMedium, {\n      color: theme.color.grey300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, sourceDefinitionsListStore.sourceDefinitions.length, \"\\xA0Available\")), React.createElement(IconCardList, {\n      type: \"source\",\n      selectionMode: \"none\",\n      icons: sourceDefinitionsListStore.sourceDefinitions.map(sourceDef => ({\n        id: sourceDef.id,\n        type: sourceDef.name,\n        title: sourceDef.name,\n        onClick: () => this.onClick(sourceDef)\n      })),\n      onSelectionChange: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nexport { SourcesCatalogue as default };","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourcesCatalogue/index.tsx"],"names":["React","inject","observer","Heading","HeaderDiv","LabelMedium","theme","IconCardList","SourceConfigure","SourcesCatalogue","Component","constructor","props","handleCancel","setState","modalVisible","onClick","sourceDef","selected","state","render","sourceDefinitionsListStore","color","primary","grey300","sourceDefinitions","length","map","id","type","name","title"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAKA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,+BAAvC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;IAaqBC,gB,WAFpBR,MAAM,CAAC,4BAAD,C,gBACNC,Q,mBADD,MAEqBO,gBAFrB,SAE8CT,KAAK,CAACU,SAFpD,CAKE;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAgC;AACzC,UAAMA,KAAN;;AADyC,SAM3CC,YAN2C,GAM5B,MAAM;AACnB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACD,KAR0C;;AAAA,SAS3CC,OAT2C,GAShCC,SAAD,IAAoB;AAC5B;AACA,WAAKH,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE,IAAhB;AAAsBG,QAAAA,QAAQ,EAAED;AAAhC,OAAd;AACD,KAZ0C;;AAEzC,SAAKE,KAAL,GAAa;AACXJ,MAAAA,YAAY,EAAE;AADH,KAAb;AAGD;;AASMK,EAAAA,MAAP,GAAgB;AACd,UAAM;AAAEC,MAAAA;AAAF,QAAiC,KAAKT,KAA5C;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,QAAIE,0BAAJ,EACE,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWJ,YADtB;AAEE,MAAA,OAAO,EAAE,KAAKF,YAFhB;AAGE,MAAA,KAAK,EAAE,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAEK,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF,EAQE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEZ,KAAK,CAACgB,KAAN,CAAYC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAEjB,KAAK,CAACgB,KAAN,CAAYE,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,0BAA0B,CAAEI,iBAA5B,CAA8CC,MADjD,kBAFF,CARF,EAeE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,aAAa,EAAC,MAFhB;AAGE,MAAA,KAAK,EAAEL,0BAA0B,CAACI,iBAA3B,CAA6CE,GAA7C,CACLV,SAAS,KAAK;AACZW,QAAAA,EAAE,EAAEX,SAAS,CAACW,EADF;AAEZC,QAAAA,IAAI,EAAEZ,SAAS,CAACa,IAFJ;AAGZC,QAAAA,KAAK,EAAEd,SAAS,CAACa,IAHL;AAIZd,QAAAA,OAAO,EAAE,MAAM,KAAKA,OAAL,CAAaC,SAAb;AAJH,OAAL,CADJ,CAHT;AAWE,MAAA,iBAAiB,EAAE,MAAM,CAAE,CAX7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADF;AA+BH;;AAlDD,C;SAHmBR,gB","sourcesContent":["import * as React from 'react';\nimport {\n  ISourceDefinitionsListStore,\n  ISourceDefintion,\n} from '../../stores/sourceDefinitionsList';\nimport { inject, observer } from 'mobx-react';\nimport { Heading } from '@components/connections/styles';\nimport { HeaderDiv, LabelMedium } from '@components/common/typography';\nimport theme from '@css/theme';\nimport IconCardList from '@components/iconCardList';\nimport { Drawer } from 'antd';\nimport SourceConfigure from './sourcesConfigure/index';\n\nexport interface ISourcesCatalogueProps {\n  sourceDefinitionsListStore?: ISourceDefinitionsListStore;\n}\n\nexport interface ISourcesCatalogueState {\n  modalVisible: boolean;\n  selected?: ISourceDefintion;\n}\n\n@inject('sourceDefinitionsListStore')\n@observer\nexport default class SourcesCatalogue extends React.Component<\n  ISourcesCatalogueProps,\n  ISourcesCatalogueState\n> {\n  constructor(props: ISourcesCatalogueProps) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n    };\n  }\n  handleCancel = () => {\n    this.setState({ modalVisible: false });\n  };\n  onClick = (sourceDef: any) => {\n    // Add a modal and open it on click.\n    this.setState({ modalVisible: true, selected: sourceDef });\n  };\n\n  public render() {\n    const { sourceDefinitionsListStore } = this.props;\n    const { selected } = this.state;\n    if (sourceDefinitionsListStore)\n      return (\n        <div>\n          <Drawer\n            visible={this.state.modalVisible}\n            onClose={this.handleCancel}\n            width={'40%'}\n          >\n            <SourceConfigure sourceDef={selected} />\n          </Drawer>\n          <Heading>\n            <HeaderDiv color={theme.color.primary}>Sources</HeaderDiv>\n            <LabelMedium color={theme.color.grey300}>\n              {sourceDefinitionsListStore!.sourceDefinitions.length}\n              &nbsp;Available\n            </LabelMedium>\n          </Heading>\n          <IconCardList\n            type=\"source\"\n            selectionMode=\"none\"\n            icons={sourceDefinitionsListStore.sourceDefinitions.map(\n              sourceDef => ({\n                id: sourceDef.id,\n                type: sourceDef.name,\n                title: sourceDef.name,\n                onClick: () => this.onClick(sourceDef),\n              }),\n            )}\n            onSelectionChange={() => {}}\n          />\n        </div>\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}