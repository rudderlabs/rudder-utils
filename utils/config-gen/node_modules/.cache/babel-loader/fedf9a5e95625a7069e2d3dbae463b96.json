{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\n\nvar _class,\n    _temp,\n    _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourceDetails/destinationsView/index.tsx\";\n\nimport { Button, ButtonSmall } from '@components/common/button';\nimport { Flex } from '@components/common/misc';\nimport { Label } from '@components/common/typography';\nimport DestinationIcon from '@components/icons/destinationIcon';\nimport Svg from '@svg/index';\nimport { observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DestinationsView, DetailsText, HeaderView, Heading, TableViewContainer, TitleText } from './styles';\nimport ModalEl from '@components/common/modal';\nconst modalTitle = 'CONFIRM DELETION';\nconst columns = [{\n  dataIndex: 'destIcon',\n  key: 'destIcon'\n}, {\n  dataIndex: 'name',\n  key: 'name',\n  width: '45%'\n}, {\n  dataIndex: 'status',\n  key: 'status',\n  width: '45%'\n}, {\n  dataIndex: 'delete',\n  key: 'delete',\n  width: '10%'\n}];\n\nlet DestinationView = observer(_class = (_temp = class DestinationView extends Component {\n  constructor(props) {\n    super(props);\n    this.destinationToBeDeleted = void 0;\n\n    this.handleClickEvent = () => {\n      const {\n        history,\n        sourceId\n      } = this.props;\n      history.push(`/destinations/setup?sourceId=${sourceId}`);\n    };\n\n    this.locale = {\n      emptyText: React.createElement(Flex, {\n        flexDirection: \"column\",\n        justifyContentCenter: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'm-t-md m-b-md',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Svg, {\n        name: \"ed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(Label, {\n        className: 'm-t-xs m-b-xs',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Where do you want to see the data?\"), React.createElement(\"div\", {\n        className: 'm-t-xs m-b-xs',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Add a destination for this source\")))\n    };\n\n    this.handleRowClick = (record, Index) => {\n      const {\n        history\n      } = this.props;\n      history.push(`/destinations/${record.id}`);\n    };\n\n    this.deleteConnection = (e, destination) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.destinationToBeDeleted = destination;\n      this.setState({\n        isDeleteModalVisible: true\n      });\n    };\n\n    this.handleModalOk = () => {\n      this.setState({\n        isDeleteModalVisible: false\n      });\n      this.props.deleteConnection(this.props.source, this.destinationToBeDeleted);\n    };\n\n    this.handleModalCancel = () => {\n      this.setState({\n        isDeleteModalVisible: false\n      });\n    };\n\n    this.state = {\n      dataSource: [],\n      isDeleteModalVisible: false\n    }; //initial config\n\n    this.destinationToBeDeleted = {\n      name: ''\n    };\n  }\n\n  modifyStateAndTable(destinations) {\n    const dataSource = destinations.map(destination => ({ ...destination,\n      destIcon: React.createElement(DestinationIcon, {\n        destination: destination.destinationDefinition.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      delete: React.createElement(ButtonSmall, {\n        onClick: event => this.deleteConnection(event, destination),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Disconnect\"),\n      status: destination.enabled ? 'Enabled' : 'Disabled',\n      sideIcon: React.createElement(Svg, {\n        name: \"side-arrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })\n    }));\n    this.setState({\n      dataSource\n    });\n  }\n\n  componentDidMount() {\n    const {\n      destinations\n    } = this.props;\n    this.modifyStateAndTable(destinations);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      destinations\n    } = nextProps;\n    this.modifyStateAndTable(destinations);\n  }\n\n  getModalText() {\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '10vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Are you sure to delete the connection \\xA0\", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.props.source.name, \" \\xA0\", '<--->', \" \\xA0\", this.destinationToBeDeleted.name), \"?\"));\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const {\n      destinations\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(ModalEl, {\n      title: modalTitle,\n      showModal: this.state.isDeleteModalVisible,\n      handleOk: this.handleModalOk,\n      handleCancel: this.handleModalCancel,\n      okText: 'Confirm',\n      element: this.getModalText(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(DestinationsView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(TableViewContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(HeaderView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Heading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(TitleText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Destinations\"), React.createElement(DetailsText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, destinations.filter(destination => destination.enabled).length, ' ', \"Enabled\")), React.createElement(Button, {\n      onClick: this.handleClickEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      name: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), \"ADD DESTINATION\")), React.createElement(_Table, {\n      locale: this.locale,\n      dataSource: dataSource,\n      columns: columns,\n      pagination: false,\n      showHeader: false,\n      onRow: (record, Index) => ({\n        onClick: () => this.handleRowClick(record, Index)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }))));\n  }\n\n}, _temp)) || _class;\n\nexport default withRouter(DestinationView);","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/sourceDetails/destinationsView/index.tsx"],"names":["Button","ButtonSmall","Flex","Label","DestinationIcon","Svg","observer","React","Component","withRouter","DestinationsView","DetailsText","HeaderView","Heading","TableViewContainer","TitleText","ModalEl","modalTitle","columns","dataIndex","key","width","DestinationView","constructor","props","destinationToBeDeleted","handleClickEvent","history","sourceId","push","locale","emptyText","handleRowClick","record","Index","id","deleteConnection","e","destination","preventDefault","stopPropagation","setState","isDeleteModalVisible","handleModalOk","source","handleModalCancel","state","dataSource","name","modifyStateAndTable","destinations","map","destIcon","destinationDefinition","delete","event","status","enabled","sideIcon","componentDidMount","componentWillReceiveProps","nextProps","getModalText","display","justifyContent","alignItems","height","render","filter","length","onClick"],"mappings":"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","sourcesContent":["import { Button, ButtonSmall } from '@components/common/button';\nimport { Flex } from '@components/common/misc';\nimport { Label } from '@components/common/typography';\nimport DestinationIcon from '@components/icons/destinationIcon';\nimport { IDestinationStore } from '@stores/destination';\nimport { ReactComponent as Delete } from '@svg/delete.svg';\nimport Svg from '@svg/index';\nimport { Table } from 'antd';\nimport { observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport {\n  DestinationsView,\n  DetailsText,\n  HeaderView,\n  Heading,\n  TableViewContainer,\n  TitleText,\n} from './styles';\nimport theme from '@css/theme';\nimport { ISourceStore } from '@stores/source';\nimport { IconColumn } from '@components/destinationDetails/destinationView/styles';\nimport ModalEl from '@components/common/modal';\n\ninterface IConfiguredSourcesProps extends RouteComponentProps<any> {\n  history: any;\n  destinations?: IDestinationStore[];\n  sourceId: string;\n  source?: ISourceStore;\n  deleteConnection?: (\n    source: ISourceStore,\n    destination: IDestinationStore,\n  ) => any;\n}\n\nconst modalTitle = 'CONFIRM DELETION';\nconst columns = [\n  { dataIndex: 'destIcon', key: 'destIcon' },\n  {\n    dataIndex: 'name',\n    key: 'name',\n    width: '45%',\n  },\n  {\n    dataIndex: 'status',\n    key: 'status',\n    width: '45%',\n  },\n  {\n    dataIndex: 'delete',\n    key: 'delete',\n    width: '10%',\n  },\n];\n@observer\nclass DestinationView extends Component<IConfiguredSourcesProps, any> {\n  destinationToBeDeleted: any;\n  constructor(props: IConfiguredSourcesProps) {\n    super(props);\n    this.state = {\n      dataSource: [],\n      isDeleteModalVisible: false,\n    };\n    //initial config\n    this.destinationToBeDeleted = { name: '' };\n  }\n  handleClickEvent = () => {\n    const { history, sourceId } = this.props;\n    history.push(`/destinations/setup?sourceId=${sourceId}`);\n  };\n\n  modifyStateAndTable(destinations: any) {\n    const dataSource = destinations!.map((destination: any) => ({\n      ...destination,\n      destIcon: (\n        <DestinationIcon destination={destination.destinationDefinition.name} />\n      ),\n      delete: (\n        <ButtonSmall\n          onClick={(event: any) => this.deleteConnection(event, destination)}\n        >\n          Disconnect\n        </ButtonSmall>\n      ),\n      status: destination.enabled ? 'Enabled' : 'Disabled',\n      sideIcon: <Svg name=\"side-arrow\" />,\n    }));\n    this.setState({ dataSource });\n  }\n\n  componentDidMount() {\n    const { destinations } = this.props;\n    this.modifyStateAndTable(destinations);\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    const { destinations } = nextProps;\n    this.modifyStateAndTable(destinations);\n  }\n  locale = {\n    emptyText: (\n      <Flex flexDirection=\"column\" justifyContentCenter>\n        <div className={'m-t-md m-b-md'}>\n          <Svg name=\"ed\" />\n        </div>\n        <Label className={'m-t-xs m-b-xs'}>\n          Where do you want to see the data?\n        </Label>\n        <div className={'m-t-xs m-b-xs'}>\n          <p>Add a destination for this source</p>\n        </div>\n      </Flex>\n    ),\n  };\n\n  handleRowClick = (record: any, Index: Number) => {\n    const { history } = this.props;\n    history!.push(`/destinations/${record.id}`);\n  };\n\n  deleteConnection = (e: any, destination: IDestinationStore) => {\n    e.preventDefault();\n    e.stopPropagation();\n    this.destinationToBeDeleted = destination;\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  handleModalOk = () => {\n    this.setState({ isDeleteModalVisible: false });\n    this.props.deleteConnection!(\n      this.props.source!,\n      this.destinationToBeDeleted,\n    );\n  };\n\n  handleModalCancel = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  getModalText() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '10vh',\n        }}\n      >\n        <p>\n          Are you sure to delete the connection &nbsp;\n          <b>\n            {this.props.source!.name} &nbsp;\n            {'<--->'} &nbsp;\n            {this.destinationToBeDeleted!.name}\n          </b>\n          ?\n        </p>\n      </div>\n    );\n  }\n\n  public render() {\n    const { dataSource } = this.state;\n    const { destinations } = this.props;\n    return (\n      <div>\n        <ModalEl\n          title={modalTitle}\n          showModal={this.state.isDeleteModalVisible}\n          handleOk={this.handleModalOk}\n          handleCancel={this.handleModalCancel}\n          okText={'Confirm'}\n          element={this.getModalText()}\n        />\n        <DestinationsView>\n          <TableViewContainer>\n            <HeaderView>\n              <Heading>\n                <TitleText>Destinations</TitleText>\n                <DetailsText>\n                  {\n                    destinations!.filter(\n                      (destination: any) => destination.enabled,\n                    ).length\n                  }{' '}\n                  Enabled\n                </DetailsText>\n              </Heading>\n              <Button onClick={this.handleClickEvent}>\n                <Svg name=\"plus\" />\n                ADD DESTINATION\n              </Button>\n            </HeaderView>\n            <Table\n              locale={this.locale}\n              dataSource={dataSource}\n              columns={columns}\n              pagination={false}\n              showHeader={false}\n              onRow={(record, Index) => ({\n                onClick: () => this.handleRowClick(record, Index),\n              })}\n            />\n          </TableViewContainer>\n        </DestinationsView>\n      </div>\n    );\n  }\n}\n\nexport default withRouter<IConfiguredSourcesProps, any>(DestinationView);\n"]},"metadata":{},"sourceType":"module"}