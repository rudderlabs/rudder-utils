{"ast":null,"code":"var _jsxFileName = \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/common/dynamicCustomForm.tsx\";\nimport * as React from 'react';\nimport { Flex } from './misc';\nimport styled from 'styled-components';\nimport Svg from '@svg/index';\nimport { Label } from './typography';\nimport TextInputField from './textInput';\nimport SwitchInput from './switchInput';\nimport DynamicForm from './dynamicForm';\nconst Row = styled(Flex)`\n  width: 100%;\n  justify-content: 'flex-start';\n`;\nconst Column = styled.div`\n  flex: 1;\n  input {\n    width: 100%;\n  }\n`;\nconst ButtonText = styled(Label)`\n  margin-left: 10px;\n  color: ${props => props.color || props.theme.color.primary300};\n`;\nexport default class DynamicCustomForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onConfigChange = (index, value, keyValue) => {\n      const {\n        onChange,\n        field\n      } = this.props;\n      this.setState(prevState => {\n        const mapping = prevState.mapping.splice(0);\n        const updatedItem = { ...mapping[index],\n          [keyValue]: value\n        };\n        mapping.splice(index, 1, updatedItem);\n        return { ...prevState,\n          mapping\n        };\n      }, () => onChange(field.value, this.state.mapping));\n    };\n\n    this.renderSingleRow = index => {\n      const {\n        field\n      } = this.props;\n      return React.createElement(\"div\", {\n        className: \"p-b-md p-t-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, field.customFields.map(customField => this.renderField({ ...customField\n      }, index)));\n    };\n\n    this.renderField = (customField, index) => {\n      const {\n        field,\n        disabled\n      } = this.props;\n\n      if (field.default && field.default[index]) {\n        let defaultValue = field.default[index][customField.value];\n        customField.default = defaultValue;\n      } else {\n        customField.default = this.getDefaultValue(customField);\n      }\n\n      switch (customField.type) {\n        case 'textInput':\n        case 'textareaInput':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(TextInputField, {\n            field: customField,\n            onChange: (label, value) => {\n              this.onConfigChange(index, value, label);\n            },\n            type: customField.type == 'textInput' ? 'input' : 'textarea',\n            disabled: disabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          })), customField.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }, customField.footerNote));\n\n        case 'checkbox':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, React.createElement(SwitchInput, {\n            field: customField,\n            hidden: false,\n            onChange: (label, value) => {\n              this.onConfigChange(index, value, label);\n            },\n            disabled: disabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }), customField.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, customField.footerNote));\n\n        case 'dynamicForm':\n          return React.createElement(\"div\", {\n            className: \"p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, React.createElement(DynamicForm, {\n            field: customField,\n            onChange: (label, value) => {\n              this.onConfigChange(index, value, label);\n            },\n            disabled: disabled,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }), customField.footerNote && React.createElement(\"div\", {\n            className: \"p-t-sm p-b-sm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, customField.footerNote));\n\n        default:\n          break;\n      }\n    };\n\n    const fields = props.field.customFields;\n    let fieldData = new Map();\n    fields.map(field => {\n      let key = field.value;\n      fieldData.set(key, field.default ? field.default : this.getDefaultValue(field));\n    });\n    const obj = Object.fromEntries(fieldData);\n    this.state = {\n      mapping: [{ ...obj\n      }],\n      count: 1\n    };\n  }\n\n  componentDidMount() {\n    const {\n      field,\n      onChange\n    } = this.props;\n\n    if (field.default) {\n      this.setState({\n        mapping: [...field.default],\n        count: field.default.length\n      }, () => onChange(field.value, this.state.mapping));\n    }\n  }\n\n  render() {\n    const {\n      field\n    } = this.props;\n    const {\n      count\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"p-b-md p-t-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, [...Array(count)].map((v, index) => this.renderSingleRow(index)), React.createElement(\"a\", {\n      onClick: () => {\n        this.setState({\n          count: this.state.count + 1\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-t-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Svg, {\n      name: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(ButtonText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \" ADD MORE\")))));\n  }\n\n  getDefaultValue(field) {\n    let fieldType = field.type;\n\n    switch (fieldType) {\n      case 'textInput':\n      case 'textareaInput':\n        return '';\n\n      case 'checkbox':\n        return false;\n\n      case 'dynamicForm':\n        const keyLeft = field.keyLeft;\n        const keyRight = field.keyRight;\n        return {\n          [keyLeft]: '',\n          [keyRight]: ''\n        };\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/components/common/dynamicCustomForm.tsx"],"names":["React","Flex","styled","Svg","Label","TextInputField","SwitchInput","DynamicForm","Row","Column","div","ButtonText","props","color","theme","primary300","DynamicCustomForm","Component","constructor","onConfigChange","index","value","keyValue","onChange","field","setState","prevState","mapping","splice","updatedItem","state","renderSingleRow","customFields","map","customField","renderField","disabled","default","defaultValue","getDefaultValue","type","label","footerNote","fields","fieldData","Map","key","set","obj","Object","fromEntries","count","componentDidMount","length","render","Array","v","fieldType","keyLeft","keyRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Flex } from './misc';\nimport styled from 'styled-components';\nimport { Input } from './input';\nimport Svg from '@svg/index';\nimport { Label } from './typography';\nimport { LabelDiv } from '@components/common/typography';\nimport { SubHeaderDiv } from './typography';\nimport TextInputField from './textInput';\nimport SwitchInput from './switchInput';\nimport DynamicForm from './dynamicForm';\n\nconst Row = styled(Flex)`\n  width: 100%;\n  justify-content: 'flex-start';\n`;\n\nconst Column = styled.div`\n  flex: 1;\n  input {\n    width: 100%;\n  }\n`;\nconst ButtonText = styled(Label)`\n  margin-left: 10px;\n  color: ${props => props.color || props.theme.color.primary300};\n`;\n\nexport interface IDynamicCustomFormProps {\n  field: any;\n  onChange: any;\n  disabled: boolean;\n}\nexport interface IDynamicCustomFormState {\n  mapping: any;\n  count: any;\n}\n\nexport default class DynamicCustomForm extends React.Component<\n  IDynamicCustomFormProps,\n  IDynamicCustomFormState\n> {\n  constructor(props: IDynamicCustomFormProps) {\n    super(props);\n    const fields = props.field.customFields;\n    let fieldData = new Map();\n    fields.map((field: any) => {\n      let key: string = field.value;\n      fieldData.set(\n        key,\n        field.default ? field.default : this.getDefaultValue(field),\n      );\n    });\n    const obj = Object.fromEntries(fieldData);\n    this.state = {\n      mapping: [{ ...obj }],\n      count: 1,\n    };\n  }\n\n  componentDidMount() {\n    const { field, onChange } = this.props;\n    if (field.default) {\n      this.setState(\n        { mapping: [...field.default], count: field.default.length },\n        () => onChange(field.value, this.state.mapping),\n      );\n    }\n  }\n\n  public onConfigChange = (index: number, value: string, keyValue: string) => {\n    const { onChange, field } = this.props;\n    this.setState(\n      (prevState: any) => {\n        const mapping = prevState.mapping.splice(0);\n        const updatedItem = {\n          ...mapping[index],\n          [keyValue]: value,\n        };\n        mapping.splice(index, 1, updatedItem);\n        return {\n          ...prevState,\n          mapping,\n        };\n      },\n      () => onChange(field.value, this.state.mapping),\n    );\n  };\n\n  public renderSingleRow = (index: number) => {\n    const { field } = this.props;\n    return (\n      <div className=\"p-b-md p-t-sm\">\n        {field.customFields.map((customField: any) =>\n          this.renderField({ ...customField }, index),\n        )}\n      </div>\n    );\n  };\n\n  public render() {\n    const { field } = this.props;\n    const { count } = this.state;\n    return (\n      <div className=\"p-b-md p-t-sm\">\n        <div>\n          {[...Array(count)].map((v: any, index: number) =>\n            this.renderSingleRow(index),\n          )}\n          <a\n            onClick={() => {\n              this.setState({ count: this.state.count + 1 });\n            }}\n          >\n            <div className=\"p-t-sm\">\n              <Svg name=\"plus\" />\n              <ButtonText> ADD MORE</ButtonText>\n            </div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  public renderField = (customField: any, index: any) => {\n    const { field, disabled } = this.props;\n\n    if (field.default && field.default[index]) {\n      let defaultValue = field.default[index][customField.value];\n      customField.default = defaultValue;\n    } else {\n      customField.default = this.getDefaultValue(customField);\n    }\n\n    switch (customField.type) {\n      case 'textInput':\n      case 'textareaInput':\n        return (\n          <div className=\"p-b-sm\">\n            <div>\n              <TextInputField\n                field={customField}\n                onChange={(label, value) => {\n                  this.onConfigChange(index, value, label);\n                }}\n                type={customField.type == 'textInput' ? 'input' : 'textarea'}\n                disabled={disabled}\n              ></TextInputField>\n            </div>\n            {customField.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{customField.footerNote}</div>\n            )}\n          </div>\n        );\n      case 'checkbox':\n        return (\n          <div className=\"p-b-sm\">\n            <SwitchInput\n              field={customField}\n              hidden={false}\n              onChange={(label, value) => {\n                this.onConfigChange(index, value, label);\n              }}\n              disabled={disabled}\n            ></SwitchInput>\n            {customField.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{customField.footerNote}</div>\n            )}\n          </div>\n        );\n      case 'dynamicForm':\n        return (\n          <div className=\"p-b-sm\">\n            <DynamicForm\n              field={customField}\n              onChange={(label: any, value: any) => {\n                this.onConfigChange(index, value, label);\n              }}\n              disabled={disabled}\n            ></DynamicForm>\n            {customField.footerNote && (\n              <div className=\"p-t-sm p-b-sm\">{customField.footerNote}</div>\n            )}\n          </div>\n        );\n\n      default:\n        break;\n    }\n  };\n\n  getDefaultValue(field: any) {\n    let fieldType = field.type;\n\n    switch (fieldType) {\n      case 'textInput':\n      case 'textareaInput':\n        return '';\n      case 'checkbox':\n        return false;\n      case 'dynamicForm':\n        const keyLeft = field.keyLeft;\n        const keyRight = field.keyRight;\n        return {\n          [keyLeft]: '',\n          [keyRight]: '',\n        };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}