{"ast":null,"code":"import _initializerDefineProperty from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { SourceStore } from '@stores/source';\nimport { action, autorun, observable, toJS } from 'mobx';\nimport KSUID from 'ksuid';\n\nfunction autoSave(store, save) {\n  let firstRun = true;\n  autorun(() => {\n    const sourcesListStore = toJS(store);\n    delete sourcesListStore.rootStore;\n    sourcesListStore.sources.forEach(source => {\n      delete source.rootStore;\n    });\n    const json = JSON.stringify(sourcesListStore);\n\n    if (!firstRun) {\n      save(json);\n    }\n\n    firstRun = false;\n  });\n}\n\nexport let SourcesListStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, (_class = (_temp = class SourcesListStore {\n  constructor(rootStore) {\n    _initializerDefineProperty(this, \"sources\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"rootStore\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"firstLoad\", _descriptor3, this);\n\n    this.rootStore = rootStore;\n  }\n\n  loadAndSave() {\n    this.load();\n    autoSave(this, this.save.bind(this));\n  }\n\n  returnWithoutRootStore() {\n    const sourcesListStore = toJS(this);\n    delete sourcesListStore.rootStore;\n    sourcesListStore.sources.forEach(source => {\n      delete source.rootStore;\n    });\n    return sourcesListStore;\n  }\n\n  load() {\n    const sourcesListStore = localStorage.getItem('sourcesListStore');\n\n    if (sourcesListStore) {\n      const store = JSON.parse(sourcesListStore);\n      this.sources = store.sources.map(source => new SourceStore(source, this.rootStore));\n    }\n  }\n\n  loadImportedFile(sources) {\n    this.sources = sources.map(source => new SourceStore(source, this.rootStore));\n  }\n\n  save(json) {\n    localStorage.setItem('sourcesListStore', json);\n  }\n\n  setSources(sources) {\n    this.sources = sources;\n  }\n\n  async getSources() {\n    this.sources = [];\n    this.firstLoad = true;\n  }\n\n  async createSource(source) {\n    source = { ...source,\n      id: KSUID.randomSync().string,\n      writeKey: KSUID.randomSync().string,\n      enabled: true,\n      config: {},\n      destinations: [],\n      createdAt: Date(),\n      updatedAt: Date()\n    }; // const savedSource = res.data;\n\n    this.sources.push(new SourceStore(source, this.rootStore));\n    return source;\n  }\n\n  async deleteSource(source) {\n    this.sources = this.sources.filter(existingSource => {\n      return existingSource.id != source.id;\n    });\n    return true;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"sources\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"rootStore\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"firstLoad\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setSources\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setSources\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getSources\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"getSources\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"createSource\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"createSource\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteSource\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteSource\"), _class.prototype)), _class));","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/src/stores/sourcesList.ts"],"names":["SourceStore","action","autorun","observable","toJS","KSUID","autoSave","store","save","firstRun","sourcesListStore","rootStore","sources","forEach","source","json","JSON","stringify","SourcesListStore","bound","constructor","loadAndSave","load","bind","returnWithoutRootStore","localStorage","getItem","parse","map","loadImportedFile","setItem","setSources","getSources","firstLoad","createSource","id","randomSync","string","writeKey","enabled","config","destinations","createdAt","Date","updatedAt","push","deleteSource","filter","existingSource"],"mappings":"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","sourcesContent":["import { IRootStore } from '@stores/index';\nimport { ISourceStore, SourceStore } from '@stores/source';\nimport { action, autorun, observable, set, toJS } from 'mobx';\nimport KSUID from 'ksuid';\n\nexport interface ISourcesListStore {\n  sources: ISourceStore[];\n  firstLoad: boolean;\n  rootStore: IRootStore;\n  setSources(sources: ISourceStore[]): void;\n  getSources(): void;\n  createSource(source: any): any;\n  deleteSource(source: ISourceStore): any;\n  loadAndSave(): any;\n  loadImportedFile(sources: any): any;\n  returnWithoutRootStore(): any;\n}\n\nfunction autoSave(store: any, save: any) {\n  let firstRun = true;\n  autorun(() => {\n    const sourcesListStore = toJS(store);\n    delete sourcesListStore.rootStore;\n    sourcesListStore.sources.forEach((source: ISourceStore) => {\n      delete source.rootStore;\n    });\n    const json = JSON.stringify(sourcesListStore);\n    if (!firstRun) {\n      save(json);\n    }\n    firstRun = false;\n  });\n}\n\nexport class SourcesListStore implements ISourcesListStore {\n  @observable public sources: ISourceStore[] = [];\n  @observable public rootStore: IRootStore;\n  @observable public firstLoad: boolean = false;\n\n  constructor(rootStore: IRootStore) {\n    this.rootStore = rootStore;\n  }\n\n  public loadAndSave() {\n    this.load();\n    autoSave(this, this.save.bind(this));\n  }\n\n  public returnWithoutRootStore() {\n    const sourcesListStore = toJS(this);\n    delete sourcesListStore.rootStore;\n    sourcesListStore.sources.forEach((source: ISourceStore) => {\n      delete source.rootStore;\n    });\n    return sourcesListStore;\n  }\n\n  public load() {\n    const sourcesListStore = localStorage.getItem('sourcesListStore');\n    if (sourcesListStore) {\n      const store: ISourcesListStore = JSON.parse(sourcesListStore);\n      this.sources = store.sources.map(\n        source => new SourceStore(source, this.rootStore),\n      );\n    }\n  }\n\n  public loadImportedFile(sources: any) {\n    this.sources = sources.map(\n      (source: any) => new SourceStore(source, this.rootStore),\n    );\n  }\n\n  public save(json: string) {\n    localStorage.setItem('sourcesListStore', json);\n  }\n\n  @action.bound\n  public setSources(sources: ISourceStore[]): void {\n    this.sources = sources;\n  }\n\n  @action.bound\n  public async getSources() {\n    this.sources = [];\n    this.firstLoad = true;\n  }\n\n  @action.bound\n  public async createSource(source: any) {\n    source = {\n      ...source,\n      id: KSUID.randomSync().string,\n      writeKey: KSUID.randomSync().string,\n      enabled: true,\n      config: {},\n      destinations: [],\n      createdAt: Date(),\n      updatedAt: Date(),\n    };\n\n    // const savedSource = res.data;\n    this.sources.push(new SourceStore(source, this.rootStore));\n    return source;\n  }\n\n  @action.bound\n  public async deleteSource(source: ISourceStore) {\n    this.sources = this.sources.filter(existingSource => {\n      return existingSource.id != source.id;\n    });\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}