{"ast":null,"code":"'use strict';\n\nconst {\n  randomBytes\n} = require('crypto');\n\nconst {\n  inspect: {\n    custom: customInspectSymbol\n  }\n} = require('util');\n\nconst padStart = require('string.prototype.padstart');\n\nconst base62 = require('./base62');\n\nfunction asyncRandomBytes(size) {\n  return new Promise((resolve, reject) => {\n    randomBytes(size, (err, bytes) => {\n      /* istanbul ignore if */\n      if (err) {\n        reject(err);\n      } else {\n        resolve(bytes);\n      }\n    });\n  });\n} // KSUID's epoch starts more recently so that the 32-bit number space gives a\n// significantly higher useful lifetime of around 136 years from March 2014.\n// This number (14e11) was picked to be easy to remember.\n\n\nconst EPOCH_IN_MS = 14e11;\nconst MAX_TIME_IN_MS = 1e3 * (Math.pow(2, 32) - 1) + EPOCH_IN_MS; // Timestamp is a uint32\n\nconst TIMESTAMP_BYTE_LENGTH = 4; // Payload is 16-bytes\n\nconst PAYLOAD_BYTE_LENGTH = 16; // KSUIDs are 20 bytes when binary encoded\n\nconst BYTE_LENGTH = TIMESTAMP_BYTE_LENGTH + PAYLOAD_BYTE_LENGTH; // The length of a KSUID when string (base62) encoded\n\nconst STRING_ENCODED_LENGTH = 27;\nconst TIME_IN_MS_ASSERTION = `Valid KSUID timestamps must be in milliseconds since ${new Date(0).toISOString()},\n  no earlier than ${new Date(EPOCH_IN_MS).toISOString()} and no later than ${new Date(MAX_TIME_IN_MS).toISOString()}\n`.trim().replace(/(\\n|\\s)+/g, ' ').replace(/\\.000Z/g, 'Z');\nconst VALID_ENCODING_ASSERTION = `Valid encoded KSUIDs are ${STRING_ENCODED_LENGTH} characters`;\nconst VALID_BUFFER_ASSERTION = `Valid KSUID buffers are ${BYTE_LENGTH} bytes`;\nconst VALID_PAYLOAD_ASSERTION = `Valid KSUID payloads are ${PAYLOAD_BYTE_LENGTH} bytes`;\n\nfunction fromParts(timeInMs, payload) {\n  const timestamp = Math.floor((timeInMs - EPOCH_IN_MS) / 1e3);\n  const timestampBuffer = Buffer.allocUnsafe(TIMESTAMP_BYTE_LENGTH);\n  timestampBuffer.writeUInt32BE(timestamp, 0);\n  return Buffer.concat([timestampBuffer, payload], BYTE_LENGTH);\n}\n\nconst bufferLookup = new WeakMap();\n\nclass KSUID {\n  constructor(buffer) {\n    if (!KSUID.isValid(buffer)) {\n      throw new TypeError(VALID_BUFFER_ASSERTION);\n    }\n\n    bufferLookup.set(this, buffer);\n    Object.defineProperty(this, 'buffer', {\n      enumerable: true,\n\n      get() {\n        return Buffer.from(buffer);\n      }\n\n    });\n  }\n\n  get raw() {\n    return Buffer.from(bufferLookup.get(this).slice(0));\n  }\n\n  get date() {\n    return new Date(1e3 * this.timestamp + EPOCH_IN_MS);\n  }\n\n  get timestamp() {\n    return bufferLookup.get(this).readUInt32BE(0);\n  }\n\n  get payload() {\n    const payload = bufferLookup.get(this).slice(TIMESTAMP_BYTE_LENGTH, BYTE_LENGTH);\n    return Buffer.from(payload);\n  }\n\n  get string() {\n    const encoded = base62.encode(bufferLookup.get(this), STRING_ENCODED_LENGTH);\n    return padStart(encoded, STRING_ENCODED_LENGTH, '0');\n  }\n\n  compare(other) {\n    if (!bufferLookup.has(other)) {\n      return 0;\n    }\n\n    return bufferLookup.get(this).compare(bufferLookup.get(other), 0, BYTE_LENGTH);\n  }\n\n  equals(other) {\n    return this === other || bufferLookup.has(other) && this.compare(other) === 0;\n  }\n\n  toString() {\n    return `${this[Symbol.toStringTag]} { ${this.string} }`;\n  }\n\n  [customInspectSymbol]() {\n    return this.toString();\n  }\n\n  static random() {\n    return asyncRandomBytes(PAYLOAD_BYTE_LENGTH).then(payload => new KSUID(fromParts(Date.now(), payload)));\n  }\n\n  static randomSync() {\n    const payload = randomBytes(PAYLOAD_BYTE_LENGTH);\n    return new KSUID(fromParts(Date.now(), payload));\n  }\n\n  static fromParts(timeInMs, payload) {\n    if (!Number.isInteger(timeInMs) || timeInMs < EPOCH_IN_MS || timeInMs > MAX_TIME_IN_MS) {\n      throw new TypeError(TIME_IN_MS_ASSERTION);\n    }\n\n    if (!Buffer.isBuffer(payload) || payload.byteLength !== PAYLOAD_BYTE_LENGTH) {\n      throw new TypeError(VALID_PAYLOAD_ASSERTION);\n    }\n\n    return new KSUID(fromParts(timeInMs, payload));\n  }\n\n  static isValid(buffer) {\n    return Buffer.isBuffer(buffer) && buffer.byteLength === BYTE_LENGTH;\n  }\n\n  static parse(string) {\n    if (string.length !== STRING_ENCODED_LENGTH) {\n      throw new TypeError(VALID_ENCODING_ASSERTION);\n    }\n\n    const decoded = base62.decode(string, BYTE_LENGTH);\n\n    if (decoded.byteLength === BYTE_LENGTH) {\n      return new KSUID(decoded);\n    }\n\n    const buffer = Buffer.allocUnsafe(BYTE_LENGTH);\n    const padEnd = BYTE_LENGTH - decoded.byteLength;\n    buffer.fill(0, 0, padEnd);\n    decoded.copy(buffer, padEnd);\n    return new KSUID(buffer);\n  }\n\n}\n\nObject.defineProperty(KSUID.prototype, Symbol.toStringTag, {\n  value: 'KSUID'\n}); // A string-encoded maximum value for a KSUID\n\nObject.defineProperty(KSUID, 'MAX_STRING_ENCODED', {\n  value: 'aWgEPTl1tmebfsQzFP4bxwgy80V'\n}); // A string-encoded minimum value for a KSUID\n\nObject.defineProperty(KSUID, 'MIN_STRING_ENCODED', {\n  value: '000000000000000000000000000'\n});\nmodule.exports = KSUID;","map":{"version":3,"sources":["/Users/chandu/dev/rudderlabs/rudder-server/utils/config-gen/node_modules/ksuid/index.js"],"names":["randomBytes","require","inspect","custom","customInspectSymbol","padStart","base62","asyncRandomBytes","size","Promise","resolve","reject","err","bytes","EPOCH_IN_MS","MAX_TIME_IN_MS","Math","pow","TIMESTAMP_BYTE_LENGTH","PAYLOAD_BYTE_LENGTH","BYTE_LENGTH","STRING_ENCODED_LENGTH","TIME_IN_MS_ASSERTION","Date","toISOString","trim","replace","VALID_ENCODING_ASSERTION","VALID_BUFFER_ASSERTION","VALID_PAYLOAD_ASSERTION","fromParts","timeInMs","payload","timestamp","floor","timestampBuffer","Buffer","allocUnsafe","writeUInt32BE","concat","bufferLookup","WeakMap","KSUID","constructor","buffer","isValid","TypeError","set","Object","defineProperty","enumerable","get","from","raw","slice","date","readUInt32BE","string","encoded","encode","compare","other","has","equals","toString","Symbol","toStringTag","random","then","now","randomSync","Number","isInteger","isBuffer","byteLength","parse","length","decoded","decode","padEnd","fill","copy","prototype","value","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {randomBytes} = require('crypto')\nconst {inspect: {custom: customInspectSymbol}} = require('util')\nconst padStart = require('string.prototype.padstart')\nconst base62 = require('./base62')\n\nfunction asyncRandomBytes (size) {\n  return new Promise((resolve, reject) => {\n    randomBytes(size, (err, bytes) => {\n      /* istanbul ignore if */\n      if (err) {\n        reject(err)\n      } else {\n        resolve(bytes)\n      }\n    })\n  })\n}\n\n// KSUID's epoch starts more recently so that the 32-bit number space gives a\n// significantly higher useful lifetime of around 136 years from March 2014.\n// This number (14e11) was picked to be easy to remember.\nconst EPOCH_IN_MS = 14e11\n\nconst MAX_TIME_IN_MS = 1e3 * (Math.pow(2, 32) - 1) + EPOCH_IN_MS\n\n// Timestamp is a uint32\nconst TIMESTAMP_BYTE_LENGTH = 4\n\n// Payload is 16-bytes\nconst PAYLOAD_BYTE_LENGTH = 16\n\n// KSUIDs are 20 bytes when binary encoded\nconst BYTE_LENGTH = TIMESTAMP_BYTE_LENGTH + PAYLOAD_BYTE_LENGTH\n\n// The length of a KSUID when string (base62) encoded\nconst STRING_ENCODED_LENGTH = 27\n\nconst TIME_IN_MS_ASSERTION = `Valid KSUID timestamps must be in milliseconds since ${new Date(0).toISOString()},\n  no earlier than ${new Date(EPOCH_IN_MS).toISOString()} and no later than ${new Date(MAX_TIME_IN_MS).toISOString()}\n`.trim().replace(/(\\n|\\s)+/g, ' ').replace(/\\.000Z/g, 'Z')\n\nconst VALID_ENCODING_ASSERTION = `Valid encoded KSUIDs are ${STRING_ENCODED_LENGTH} characters`\n\nconst VALID_BUFFER_ASSERTION = `Valid KSUID buffers are ${BYTE_LENGTH} bytes`\n\nconst VALID_PAYLOAD_ASSERTION = `Valid KSUID payloads are ${PAYLOAD_BYTE_LENGTH} bytes`\n\nfunction fromParts (timeInMs, payload) {\n  const timestamp = Math.floor((timeInMs - EPOCH_IN_MS) / 1e3)\n  const timestampBuffer = Buffer.allocUnsafe(TIMESTAMP_BYTE_LENGTH)\n  timestampBuffer.writeUInt32BE(timestamp, 0)\n\n  return Buffer.concat([timestampBuffer, payload], BYTE_LENGTH)\n}\n\nconst bufferLookup = new WeakMap()\n\nclass KSUID {\n  constructor (buffer) {\n    if (!KSUID.isValid(buffer)) {\n      throw new TypeError(VALID_BUFFER_ASSERTION)\n    }\n\n    bufferLookup.set(this, buffer)\n    Object.defineProperty(this, 'buffer', {\n      enumerable: true,\n      get () { return Buffer.from(buffer) }\n    })\n  }\n\n  get raw () {\n    return Buffer.from(bufferLookup.get(this).slice(0))\n  }\n\n  get date () {\n    return new Date(1e3 * this.timestamp + EPOCH_IN_MS)\n  }\n\n  get timestamp () {\n    return bufferLookup.get(this).readUInt32BE(0)\n  }\n\n  get payload () {\n    const payload = bufferLookup.get(this).slice(TIMESTAMP_BYTE_LENGTH, BYTE_LENGTH)\n    return Buffer.from(payload)\n  }\n\n  get string () {\n    const encoded = base62.encode(bufferLookup.get(this), STRING_ENCODED_LENGTH)\n    return padStart(encoded, STRING_ENCODED_LENGTH, '0')\n  }\n\n  compare (other) {\n    if (!bufferLookup.has(other)) {\n      return 0\n    }\n\n    return bufferLookup.get(this).compare(bufferLookup.get(other), 0, BYTE_LENGTH)\n  }\n\n  equals (other) {\n    return this === other || (bufferLookup.has(other) && this.compare(other) === 0)\n  }\n\n  toString () {\n    return `${this[Symbol.toStringTag]} { ${this.string} }`\n  }\n\n  [customInspectSymbol] () {\n    return this.toString()\n  }\n\n  static random () {\n    return asyncRandomBytes(PAYLOAD_BYTE_LENGTH).then(payload => new KSUID(fromParts(Date.now(), payload)))\n  }\n\n  static randomSync () {\n    const payload = randomBytes(PAYLOAD_BYTE_LENGTH)\n    return new KSUID(fromParts(Date.now(), payload))\n  }\n\n  static fromParts (timeInMs, payload) {\n    if (!Number.isInteger(timeInMs) || timeInMs < EPOCH_IN_MS || timeInMs > MAX_TIME_IN_MS) {\n      throw new TypeError(TIME_IN_MS_ASSERTION)\n    }\n    if (!Buffer.isBuffer(payload) || payload.byteLength !== PAYLOAD_BYTE_LENGTH) {\n      throw new TypeError(VALID_PAYLOAD_ASSERTION)\n    }\n\n    return new KSUID(fromParts(timeInMs, payload))\n  }\n\n  static isValid (buffer) {\n    return Buffer.isBuffer(buffer) && buffer.byteLength === BYTE_LENGTH\n  }\n\n  static parse (string) {\n    if (string.length !== STRING_ENCODED_LENGTH) {\n      throw new TypeError(VALID_ENCODING_ASSERTION)\n    }\n\n    const decoded = base62.decode(string, BYTE_LENGTH)\n    if (decoded.byteLength === BYTE_LENGTH) {\n      return new KSUID(decoded)\n    }\n\n    const buffer = Buffer.allocUnsafe(BYTE_LENGTH)\n    const padEnd = BYTE_LENGTH - decoded.byteLength\n    buffer.fill(0, 0, padEnd)\n    decoded.copy(buffer, padEnd)\n    return new KSUID(buffer)\n  }\n}\nObject.defineProperty(KSUID.prototype, Symbol.toStringTag, {value: 'KSUID'})\n// A string-encoded maximum value for a KSUID\nObject.defineProperty(KSUID, 'MAX_STRING_ENCODED', {value: 'aWgEPTl1tmebfsQzFP4bxwgy80V'})\n// A string-encoded minimum value for a KSUID\nObject.defineProperty(KSUID, 'MIN_STRING_ENCODED', {value: '000000000000000000000000000'})\n\nmodule.exports = KSUID\n"]},"metadata":{},"sourceType":"script"}